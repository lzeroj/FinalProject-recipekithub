/*
 * App URI: recipe/detailrecipe
 * Source Location: recipe/detailrecipe.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.4584), Don't edit manually.
 */
(function() {
	var app = new cpr.core.App("recipe/detailrecipe", { 
		onPrepare: function(loader) {
			loader.addCSS("theme/cleopatra-theme.css");
			loader.addCSS("theme/controls/htmlobject.part.css");
			loader.addCSS("theme/custom-theme.css");
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports) {
			var linker = {};
			// Start - User Script
			/************************************************
			 * detailrecipe.js
			 * Created at 2023. 8. 11. 오후 4:20:38.
			 *
			 * @author user
			 ************************************************/
			function getTimedSessionData(key) {
				var storedData = sessionStorage.getItem(key);
				
				if (storedData) {
					var data = JSON.parse(storedData);
					var currentTime = new Date().getTime();
					
					if (currentTime < data.expirationTime) {
						return data.value;
					} else {
						sessionStorage.removeItem(key);
					}
				}
				return null;
			}
			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(e) {
				var sessionval = getTimedSessionData("memsession");
				console.log(sessionval);
				var recipeBoardVO = cpr.core.Platform.INSTANCE.getParameter("recipeBoardVO");
				console.log(recipeBoardVO);
				if (sessionval == null || sessionval != recipeBoardVO.memberVO.memberEmail) {
					app.lookup("updateBtn").visible = false;
				}
				app.lookup("recipeBoardImage").src = "/upload/recipe/" + recipeBoardVO.recipeBoardImage;
				app.lookup("recipeBoardTitle").value = recipeBoardVO.recipeBoardTitle;
				app.lookup("memberNick").value = recipeBoardVO.memberVO.memberNick;
				app.lookup("memberProfile").src = "/upload/profile/" + recipeBoardVO.memberVO.memberImage;
				
				var hTMLSnippet = app.lookup("recipeContent");
				hTMLSnippet.value = recipeBoardVO.recipeBoardContent;
				
				app.lookup("regDate").value = recipeBoardVO.recipeRegDate;
				if (recipeBoardVO.recipeEditDate == null) {
					app.lookup("edit").visible = false;
					app.lookup("editDate").visible = false;
				} else {
					app.lookup("editDate").value = recipeBoardVO.recipeEditDate;
				}
				app.lookup("dmRecipeBoardId").setValue("recipeBoardId", recipeBoardVO.recipeBoardId);
				var recipeCommentsub = app.lookup("recipeCommentList");
				recipeCommentsub.send();
				
				// 현준
				app.lookup("dmRecipeBoardId").setValue("recipeBoardId", recipeBoardVO.recipeBoardId);
				app.lookup("subrecipelikecount").send();
				
			}

			/*
			 * 서브미션에서 receive 이벤트 발생 시 호출.
			 * 서버로 부터 데이터를 모두 전송받았을 때 발생합니다.
			 */
			//function onDetailRecipeReceive(e){
			//	var detailRecipe = e.control;
			//	var xhr = detailRecipe.xhr;
			//	var jsonData = JSON.parse(xhr.responseText);
			//	console.log(jsonData);
			//	detailRecipe = jsonData.recipe;
			//	//app.lookup("recipeBoardImage").src = "theme/uploadrecipeimage/"+detailRecipe.recipeBoardImage;
			//	//app.lookup("memberNick").value = detailRecipe.memberVO.memberNick;
			//	//app.lookup("recipeBoardTitle").value = detailRecipe.recipeBoardTitle; 
			//	//app.lookup("recipeBoardContent").value = detailRecipe.recipeBoardContent;
			//}

			/*
			 * "레시피 수정하기" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(e) {
				var button = e.control;
				var recipeBoardVO = cpr.core.Platform.INSTANCE.getParameter("recipeBoardVO");
				//	app.lookup("dmRecipeBoardId").setValue("dmRecipeBoardId", recipeBoardVO.recipeBoardId);
				//	var submission = app.lookup("updateRecipe");
				//	submission.send();
				//window.location.href = "/updateRecipe?recipeBoardId=" + recipeBoardVO.recipeBoardId;
				
				// 로그인 안한사람이 url 로 접속되는 것을 막기 위해 post 방식 사용
				var _httpPostMethod = new cpr.protocols.HttpPostMethod("/updateRecipe", "_self");
				_httpPostMethod.addParameter("recipeBoardId", recipeBoardVO.recipeBoardId);
				_httpPostMethod.submit();
			}

			/*
			 * 서브미션에서 receive 이벤트 발생 시 호출.
			 * 서버로 부터 데이터를 모두 전송받았을 때 발생합니다.
			 */
			//function onRecipeCommentListReceive(e){
			//	var recipeCommentList = e.control;
			//	var xhr = recipeCommentList.xhr;
			//	var jsonData = JSON.parse(xhr.responseText);
			//	var recipeComment = jsonData.recipeCommentList;
			//	var totalCommentCount = jsonData.totalCommentCount;
			//	app.lookup("commentCount").value = totalCommentCount;
			//	var container = app.lookup("commentgrp");
			//		for (var i = 0; i < recipeComment.length; i++) {
			//		(function(index) {
			//			//udc 동적 생성
			//			var comment = new udc.recipeCommentudc();
			//			//udc에서 출판한 이미지 경로 앱 속성 지정
			//			comment.nick = recipeComment[i].memberVO.memberNick;
			//			comment.regDate = recipeComment[i].recipeCommentDate;
			//			comment.content = recipeComment[i].recipeCommentContent;
			//			container.addChild(comment, {
			//				height: "120px",
			//				width: "100px",
			//				autoSize: "both"
			//			});
			//			comment.addEventListener("deleteClick", function(e) {
			//			app.lookup("dmRecipeCommentId").setValue("recipeCommentId", recipeComment[index].recipeCommentId);
			//			var deleteCommentsub = app.lookup("deleteComment");
			//			deleteCommentsub.send();
			//			});
			//		})(i);
			//	}
			//}

			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onRecipeCommentListSubmitSuccess(e) {
				var recipeCommentList = e.control;
				var xhr = recipeCommentList.xhr;
				var jsonData = JSON.parse(xhr.responseText);
				var sessionval = getTimedSessionData("memsession");
				var recipeComment = jsonData.recipeCommentList;
				var totalCommentCount = jsonData.totalCommentCount;
				app.lookup("commentCount").value = totalCommentCount;
				var container = app.lookup("commentgrp");
				
				app.lookup("page").totalRowCount = totalCommentCount;
				
				// 댓글 등록,삭제 시 재조회 할 수 있게 기존 목록 삭제
				container.removeAllChildren();
				
				for (var i = 0; i < recipeComment.length; i++) {
					(function(index) {
						//udc 동적 생성
						var comment = new udc.recipeCommentudc();
						//udc에서 출판한 이미지 경로 앱 속성 지정
						comment.nick = recipeComment[i].memberVO.memberNick;
						comment.regDate = recipeComment[i].recipeCommentDate;
						comment.content = recipeComment[i].recipeCommentContent;
						comment.profile = "/upload/profile/" + recipeComment[i].memberVO.memberImage;
						
						console.log(comment.profile);
						if (sessionval == null || sessionval != recipeComment[i].memberVO.memberEmail) {
							comment.deleteBtn = false;
						}
						container.addChild(comment, {
							height: "75px",
							width: "100px",
							autoSize: "height"
						});
						comment.addEventListener("deleteClick", function(e) {
							app.lookup("dmRecipeCommentId").setValue("recipeCommentId", recipeComment[index].recipeCommentId);
							if (confirm("삭제하시겠습니까?")) {
								var deleteCommentsub = app.lookup("deleteComment");
								deleteCommentsub.send();
							}
						});
					})(i);
				}
			}

			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onDeleteCommentSubmitSuccess(e) {
				var deleteComment = e.control;
				app.lookup("recipeCommentList").send();
			}

			/*
			 * "등록" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick2(e) {
				var button = e.control;
				var sessionval = getTimedSessionData("memsession");
				var recipeBoardVO = cpr.core.Platform.INSTANCE.getParameter("recipeBoardVO");
				if (sessionval == null) {
					var initValue = "로그인이 필요합니다.";
					app.openDialog("dialog/registerChkPopup", {
						width: 400, height: 300, headerClose: true
					}, function(dialog) {
						dialog.ready(function(dialogApp) {
							// 필요한 경우, 다이얼로그의 앱이 초기화 된 후, 앱 속성을 전달하십시오.
							dialogApp.initValue = initValue;
						});
					})
			//		.then(function(returnValue) {
			//			if (returnValue == true) {
			//			}
			//		});
				} else {
					app.lookup("dmInsertValue").setValue("recipeBoardId", recipeBoardVO.recipeBoardId);
					var contentValue = app.lookup("dmInsertValue").getValue("recipeCommentContent");
					if(contentValue == null || contentValue=="" ){
						alert("내용을 입력하세요");
						app.lookup("commentInput").focus();
						return;
					}
					app.lookup("insertComment").send();
				}
			}

			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onInsertCommentSubmitSuccess(e) {
				var insertComment = e.control;
				app.lookup("recipeCommentList").send();
				app.lookup("commentInput").text = "";
			}

			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onSubrecipelikecountSubmitSuccess(e) {
				var subrecipelikecount = e.control;
				var countRecipeLike = subrecipelikecount.getMetadata("countRecipeLike");
				var showlikestatus = subrecipelikecount.getMetadata("showlikestatus");
				var likeimg = app.lookup("likeimg");
				if (showlikestatus == 0) {
					likeimg.src = "theme/images/mealkit/heart.png";
				} else {
					likeimg.src = "theme/images/mealkit/heart_fill.png";
				}
				likeimg.redraw();
				
				app.lookup("opt1").text = countRecipeLike;
				app.lookup("opt1").redraw();
			}

			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onSubinsertrecipelikeSubmitSuccess(e) {
				var subinsertrecipelike = e.control;
				var likeresult = subinsertrecipelike.getMetadata("likeresult");
				var likeimg = app.lookup("likeimg");
				var counttext = app.lookup("opt1").text;
				if (likeresult == 0) {
					likeimg.src = "theme/images/mealkit/heart.png";
					app.lookup("opt1").text = counttext - 1;
				} else {
					likeimg.src = "theme/images/mealkit/heart_fill.png";
					app.lookup("opt1").text = parseInt(counttext) + 1;
				}
				likeimg.redraw();
				
			}

			/*
			 * 이미지에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onLikeimgClick(e) {
				var likeimg = e.control;
				var sessionval = getTimedSessionData("memsession");
				if (sessionval == null) {
					var initValue =  "로그인이 필요합니다.";
					app.openDialog("dialog/registerChkPopup", {
						width: 400, height: 300, headerClose: true
					}, function(dialog) {
						dialog.ready(function(dialogApp) {
							// 필요한 경우, 다이얼로그의 앱이 초기화 된 후, 앱 속성을 전달하십시오.
							dialogApp.initValue = initValue;
						});
					})
			//		.then(function(returnValue) {
			//			if (returnValue == true) {
			//			}
			//		});
				} else {
					app.lookup("subinsertrecipelike").send();
				}
			}

			/*
			 * 이미지에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onImageClick(e) {
				var image = e.control;
				console.log(app.lookup("dmRecipeBoardId").getValue("recipeBoardId"));
				var sessionval = getTimedSessionData("memsession");
				if (sessionval == null) {
					var initValue = "로그인이 필요합니다.";
					app.openDialog("dialog/registerChkPopup", {
						width: 400, height: 300, headerClose: true
					}, function(dialog) {
						dialog.ready(function(dialogApp) {
							// 필요한 경우, 다이얼로그의 앱이 초기화 된 후, 앱 속성을 전달하십시오.
							dialogApp.initValue = initValue;
						});
					})
			//		.then(function(returnValue) {
			//			if (returnValue == true) {
			//			}
			//		});
				} else {
					var initvalue = {
						"recipeBoardId": app.lookup("dmRecipeBoardId").getValue("recipeBoardId")
					};
					app.openDialog("dialog/declarationRecipe", {
						width: 400,
						height: 600,
						headerVisible: false
					}, function(dialog) {
						dialog.ready(function(dialogApp) {
							// 필요한 경우, 다이얼로그의 앱이 초기화 된 후, 앱 속성을 전달하십시오.
							dialog.initValue = initvalue;
						});
					}).then(function(returnValue) {
						if (returnValue == 0) {
							return;
						}
						if (returnValue == null || returnValue == '') {
							return;
						}
						var recipeBoardId = app.lookup("dmRecipeBoardId").getValue("recipeBoardId");
						app.lookup("dmdeclaration").setValue("recipeBoardId", recipeBoardId);
						app.lookup("dmdeclaration").setValue("inputtext", returnValue.inputtext);
						app.lookup("dmdeclaration").setValue("textbox", returnValue.textbox);
						app.lookup("dmdeclaration").setValue("declarationType", returnValue.declarationType);
						app.lookup("subinsertDeclaration").send();
					});
				}
			}

			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onSubinsertDeclarationSubmitSuccess(e) {
				var subinsertDeclaration = e.control;
				var metadata = subinsertDeclaration.getMetadata("insertresult");
				if (metadata == 1) {
					alert("신고가 완료되었습니다");
				} else if (metadata == 0) {
					alert("이미 신고를 완료한 게시물입니다");
				}
			}

			/*
			 * 페이지 인덱서에서 selection-change 이벤트 발생 시 호출.
			 * Page index를 선택하여 선택된 페이지가 변경된 후에 발생하는 이벤트.
			 */
			function onPageSelectionChange(e) {
				var page = e.control;
				app.lookup("recipeCommentList").send();
			}
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("recipeBoard");
			dataSet_1.parseData({
				"columns": [
					{
						"name": "recipeBoardTitle",
						"dataType": "string"
					},
					{
						"name": "recipeBoardContent",
						"dataType": "string"
					},
					{
						"name": "recipeBoardHits",
						"dataType": "decimal"
					},
					{
						"name": "recipeBoardImage",
						"dataType": "string"
					}
				],
				"rows": []
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("recipeComment");
			dataSet_2.parseData({});
			app.register(dataSet_2);
			var dataMap_1 = new cpr.data.DataMap("dmRecipeBoardId");
			dataMap_1.parseData({
				"columns" : [{
					"name": "recipeBoardId",
					"dataType": "number"
				}]
			});
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("dmdeclaration");
			dataMap_2.parseData({
				"columns" : [
					{
						"name": "recipeBoardId",
						"dataType": "number"
					},
					{"name": "inputtext"},
					{"name": "textbox"},
					{"name": "declarationType"}
				]
			});
			app.register(dataMap_2);
			
			var dataMap_3 = new cpr.data.DataMap("dmRecipeCommentId");
			dataMap_3.parseData({
				"columns" : [{
					"name": "recipeCommentId",
					"dataType": "number"
				}]
			});
			app.register(dataMap_3);
			
			var dataMap_4 = new cpr.data.DataMap("dmInsertValue");
			dataMap_4.parseData({
				"columns" : [
					{"name": "recipeCommentContent"},
					{"name": "recipeBoardId"}
				]
			});
			app.register(dataMap_4);
			
			var dataMap_5 = new cpr.data.DataMap("dmPage");
			dataMap_5.parseData({
				"columns" : [{"name": "pageNo"}]
			});
			app.register(dataMap_5);
			var submission_1 = new cpr.protocols.Submission("subrecipelikecount");
			submission_1.action = "/countRecipeLikeList";
			submission_1.mediaType = "application/x-www-form-urlencoded;simple";
			submission_1.addRequestData(dataMap_1);
			if(typeof onSubrecipelikecountSubmitSuccess == "function") {
				submission_1.addEventListener("submit-success", onSubrecipelikecountSubmitSuccess);
			}
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("subinsertrecipelike");
			submission_2.action = "/clickRecipeLike";
			submission_2.mediaType = "application/x-www-form-urlencoded;simple";
			submission_2.addRequestData(dataMap_1);
			if(typeof onSubinsertrecipelikeSubmitSuccess == "function") {
				submission_2.addEventListener("submit-success", onSubinsertrecipelikeSubmitSuccess);
			}
			app.register(submission_2);
			
			var submission_3 = new cpr.protocols.Submission("subinsertDeclaration");
			submission_3.action = "/insertDeclaration";
			submission_3.addRequestData(dataMap_2);
			if(typeof onSubinsertDeclarationSubmitSuccess == "function") {
				submission_3.addEventListener("submit-success", onSubinsertDeclarationSubmitSuccess);
			}
			app.register(submission_3);
			
			var submission_4 = new cpr.protocols.Submission("recipeCommentList");
			submission_4.action = "/recipeCommentList";
			submission_4.addRequestData(dataMap_1);
			submission_4.addRequestData(dataMap_5);
			if(typeof onRecipeCommentListSubmitSuccess == "function") {
				submission_4.addEventListener("submit-success", onRecipeCommentListSubmitSuccess);
			}
			app.register(submission_4);
			
			var submission_5 = new cpr.protocols.Submission("deleteComment");
			submission_5.action = "/deleteRecipeComment";
			submission_5.addRequestData(dataMap_3);
			if(typeof onDeleteCommentSubmitSuccess == "function") {
				submission_5.addEventListener("submit-success", onDeleteCommentSubmitSuccess);
			}
			app.register(submission_5);
			
			var submission_6 = new cpr.protocols.Submission("insertComment");
			submission_6.action = "/insertRecipeComment";
			submission_6.addRequestData(dataMap_4);
			if(typeof onInsertCommentSubmitSuccess == "function") {
				submission_6.addEventListener("submit-success", onInsertCommentSubmitSuccess);
			}
			app.register(submission_6);
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"background-color" : "#F4FAEC",
				"width" : "100%",
				"height" : "100%"
			});
			
			// Layout
			var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
			verticalLayout_1.distribution = "center";
			container.setLayout(verticalLayout_1);
			
			// UI Configuration
			var userDefinedControl_1 = new udc.header3();
			container.addChild(userDefinedControl_1, {
				"width": "1920px",
				"height": "200px"
			});
			
			var group_1 = new cpr.controls.Container();
			group_1.style.css({
				"background-color" : "#FFFFFF"
			});
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_1);
			(function(container){
				var image_1 = new cpr.controls.Image("recipeBoardImage");
				container.addChild(image_1, {
					"top": "42px",
					"width": "642px",
					"height": "201px",
					"left": "calc(50% - 321px)"
				});
				var output_1 = new cpr.controls.Output("memberNick");
				output_1.value = "닉네임";
				output_1.style.css({
					"color" : "#0CA44E",
					"font-weight" : "lighter",
					"font-size" : "18px",
					"text-align" : "center"
				});
				container.addChild(output_1, {
					"top": "303px",
					"width": "128px",
					"height": "34px",
					"left": "calc(50% - 64px)"
				});
				var output_2 = new cpr.controls.Output("recipeBoardTitle");
				output_2.value = "타이틀";
				output_2.style.css({
					"font-weight" : "bold",
					"font-size" : "20px",
					"text-align" : "center"
				});
				container.addChild(output_2, {
					"top": "277px",
					"left": "95px",
					"width": "384px",
					"height": "58px"
				});
				var output_3 = new cpr.controls.Output("opt1");
				output_3.value = "좋아요 갯수";
				output_3.style.css({
					"font-size" : "20px"
				});
				container.addChild(output_3, {
					"top": "305px",
					"left": "1039px",
					"width": "82px",
					"height": "30px"
				});
				var image_2 = new cpr.controls.Image("likeimg");
				image_2.style.css({
					"cursor" : "pointer",
					"background-image" : "none"
				});
				if(typeof onLikeimgClick == "function") {
					image_2.addEventListener("click", onLikeimgClick);
				}
				container.addChild(image_2, {
					"top": "295px",
					"left": "990px",
					"width": "40px",
					"height": "40px"
				});
				var image_3 = new cpr.controls.Image();
				image_3.src = "theme/images/mealkit/alarm.png";
				image_3.style.css({
					"cursor" : "pointer"
				});
				if(typeof onImageClick == "function") {
					image_3.addEventListener("click", onImageClick);
				}
				container.addChild(image_3, {
					"top": "295px",
					"left": "939px",
					"width": "40px",
					"height": "40px"
				});
				var image_4 = new cpr.controls.Image("memberProfile");
				image_4.fallbackSrc = "theme/images/icon/chefimg.png";
				image_4.style.css({
					"border-radius" : "100px"
				});
				container.addChild(image_4, {
					"top": "227px",
					"width": "146px",
					"height": "77px",
					"left": "calc(50% - 73px)"
				});
				var group_2 = new cpr.controls.Container();
				group_2.style.css({
					"background-color" : "#FFFFFF"
				});
				var xYLayout_2 = new cpr.controls.layouts.XYLayout();
				group_2.setLayout(xYLayout_2);
				(function(container){
					var output_4 = new cpr.controls.Output("reg");
					output_4.value = "등록일";
					output_4.style.css({
						"color" : "#D0D0D0"
					});
					container.addChild(output_4, {
						"top": "8px",
						"left": "4px",
						"width": "51px",
						"height": "18px"
					});
					var output_5 = new cpr.controls.Output("regDate");
					output_5.value = "Output";
					output_5.style.css({
						"color" : "#D0D0D0"
					});
					container.addChild(output_5, {
						"top": "8px",
						"left": "54px",
						"width": "138px",
						"height": "18px"
					});
					var output_6 = new cpr.controls.Output("edit");
					output_6.value = "수정일";
					output_6.style.css({
						"color" : "#D0D0D0"
					});
					container.addChild(output_6, {
						"top": "8px",
						"left": "202px",
						"width": "51px",
						"height": "18px"
					});
					var output_7 = new cpr.controls.Output("editDate");
					output_7.value = "Output";
					output_7.style.css({
						"color" : "#D0D0D0"
					});
					container.addChild(output_7, {
						"top": "8px",
						"left": "252px",
						"width": "138px",
						"height": "18px"
					});
				})(group_2);
				container.addChild(group_2, {
					"top": "0px",
					"left": "4px",
					"width": "399px",
					"height": "26px"
				});
				var button_1 = new cpr.controls.Button("updateBtn");
				button_1.value = "";
				button_1.style.css({
					"background-color" : "transparent",
					"border-right-style" : "none",
					"background-size" : "cover",
					"border-left-style" : "none",
					"border-bottom-style" : "none",
					"background-image" : "url('theme/images/recipe/updateButton.png')",
					"background-position" : "center",
					"border-top-style" : "none"
				});
				if(typeof onButtonClick == "function") {
					button_1.addEventListener("click", onButtonClick);
				}
				container.addChild(button_1, {
					"top": "20px",
					"right": "19px",
					"left": "1150px",
					"height": "54px"
				});
			})(group_1);
			container.addChild(group_1, {
				"width": "1200px",
				"height": "353px"
			});
			
			var hTMLSnippet_1 = new cpr.controls.HTMLSnippet("recipeContent");
			hTMLSnippet_1.value = "<p>HTML Snippet<\/p>";
			hTMLSnippet_1.style.css({
				"cursor" : "auto",
				"background-color" : "#FFFFFF"
			});
			container.addChild(hTMLSnippet_1, {
				"autoSize": "height",
				"width": "1200px",
				"height": "300px",
				"minHeight": 300
			});
			
			var group_3 = new cpr.controls.Container();
			group_3.style.css({
				"background-color" : "#FFFFFF"
			});
			var xYLayout_3 = new cpr.controls.layouts.XYLayout();
			group_3.setLayout(xYLayout_3);
			(function(container){
				var output_8 = new cpr.controls.Output();
				output_8.value = "댓글";
				output_8.style.css({
					"font-size" : "25px"
				});
				container.addChild(output_8, {
					"top": "11px",
					"left": "4px",
					"width": "58px",
					"height": "36px"
				});
				var output_9 = new cpr.controls.Output("commentCount");
				output_9.value = "댓글개수";
				output_9.style.css({
					"color" : "#15820C",
					"font-size" : "25px"
				});
				container.addChild(output_9, {
					"top": "11px",
					"left": "61px",
					"width": "129px",
					"height": "36px"
				});
				var button_2 = new cpr.controls.Button("commentBtn");
				button_2.value = "등록";
				button_2.style.css({
					"background-color" : "#0CA44E",
					"color" : "white",
					"background-image" : "none"
				});
				if(typeof onButtonClick2 == "function") {
					button_2.addEventListener("click", onButtonClick2);
				}
				container.addChild(button_2, {
					"top": "46px",
					"left": "1094px",
					"width": "100px",
					"height": "77px"
				});
				var textArea_1 = new cpr.controls.TextArea("commentInput");
				textArea_1.placeholder = "50자 내로 작성해 주세요";
				textArea_1.maxLength = 50;
				textArea_1.bind("value").toDataMap(app.lookup("dmInsertValue"), "recipeCommentContent");
				container.addChild(textArea_1, {
					"top": "46px",
					"left": "4px",
					"width": "1080px",
					"height": "77px"
				});
			})(group_3);
			container.addChild(group_3, {
				"width": "1200px",
				"height": "125px"
			});
			
			var group_4 = new cpr.controls.Container("commentgrp");
			group_4.style.css({
				"background-color" : "#FFFFFF"
			});
			var verticalLayout_2 = new cpr.controls.layouts.VerticalLayout();
			group_4.setLayout(verticalLayout_2);
			container.addChild(group_4, {
				"autoSize": "height",
				"width": "1200px",
				"height": "241px"
			});
			
			var pageIndexer_1 = new cpr.controls.PageIndexer("page");
			pageIndexer_1.pageRowCount = 10;
			pageIndexer_1.bind("currentPageIndex").toDataMap(app.lookup("dmPage"), "pageNo");
			pageIndexer_1.init(1, 1, 1);
			if(typeof onPageSelectionChange == "function") {
				pageIndexer_1.addEventListener("selection-change", onPageSelectionChange);
			}
			container.addChild(pageIndexer_1, {
				"width": "200px",
				"height": "40px"
			});
			
			var userDefinedControl_2 = new udc.footer();
			container.addChild(userDefinedControl_2, {
				"width": "1920px",
				"height": "100px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	app.title = "detailrecipe";
	cpr.core.Platform.INSTANCE.register(app);
})();
