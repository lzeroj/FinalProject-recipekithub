/*
 * App URI: recipe/updaterecipe
 * Source Location: recipe/updaterecipe.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.4584), Don't edit manually.
 */
(function() {
	var app = new cpr.core.App("recipe/updaterecipe", { 
		onPrepare: function(loader) {
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports) {
			var linker = {};
			// Start - User Script
			/************************************************
			 * updaterecipe.js
			 * Created at 2023. 8. 14. 오전 11:49:00.
			 *
			 * @author user
			 ************************************************/

			/*
			 * 루트 컨테이너에서 init 이벤트 발생 시 호출.
			 * 앱이 최초 구성될 때 발생하는 이벤트 입니다.
			 */
			function onBodyInit(e) {
				var voResourceLoader = new cpr.core.ResourceLoader();
				voResourceLoader.addScript("https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js").load().then(function(input) {
					voResourceLoader.addScript("https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote.min.js").load().then(function(input) {
						loaded = true;
						app.lookup("smnote").redraw();
					});
				});
			}

			/*
			 * 쉘에서 load 이벤트 발생 시 호출.
			 * 쉘이 그려진 후 내용을 작성하는 이벤트.
			 */
			function onSmnoteLoad(e){
				var smnote = e.control;
				var content = e.content;
				var recipeBoardVO = cpr.core.Platform.INSTANCE.getParameter("recipeBoardVO");
				
				if (loaded) {
					smnote.registerComponent("Editor", content);
					
					//에디터를 넣어줄 div 생성
					var editorDiv = document.createElement("div")
					editorDiv.id = "summernote";
					editorDiv.style.height = "100%";
					editorDiv.style.width = "100%";
					
					//생성한 에디터를 쉘 영역안에 넣어준다.
					content.appendChild(editorDiv);
					
					$('#summernote').summernote({
						placeholder: '글 작성란',
						tabsize: 2,
						height: 300,
						toolbar: [
							['style', ['style']],
							['font', ['bold', 'underline', 'clear']],
							['color', ['color']],
							['para', ['ul', 'ol', 'paragraph']],
							['table', ['table']],
							//['insert', ['link', 'picture', 'video']],
							['view', ['fullscreen', 'codeview', 'help']]
						]
						
					});
					  $("#summernote").summernote('code',  recipeBoardVO.recipeBoardContent);
				}
			}

			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(e){
				var recipeBoardVO = cpr.core.Platform.INSTANCE.getParameter("recipeBoardVO");
				var imagePath = cpr.core.Platform.INSTANCE.getParameter("imagePath");
				app.lookup("ipb1").value = recipeBoardVO.recipeBoardTitle;
				app.lookup("lcb1").value = recipeBoardVO.categoryType;
				app.lookup("lcb2").value = recipeBoardVO.categoryIngredients;
				app.lookup("lcb3").value = recipeBoardVO.categoryMethod;
				app.lookup("uploadImg").src = imagePath;
			//	var fileInput = app.lookup("fi1");
			//	var imageFile = new File([""], imagePath);
			//	fileInput.files = [imageFile];
			}

			/*
			 * 파일 인풋에서 value-change 이벤트 발생 시 호출.
			 * FileInput의 value를 변경하여 변경된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onFi1ValueChange(e){
				var fi1 = e.control;
				var image = app.lookup("uploadImg");
				var fileInput = app.lookup("fi1");
				if (fileInput.files && fileInput.files[0]) {
			        var reader = new FileReader();
			        reader.onload = function(e) {
			           image.src = e.target.result;
			        };
			        reader.readAsDataURL(fileInput.files[0]);
			    }
			}

			/*
			 * "x" 버튼(deleteImg)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onDeleteImgClick(e){
				var deleteImg = e.control;
				var fileInput = app.lookup("fi1");
				var image = app.lookup("uploadImg");
				fileInput.clear();
				image.src = "";
			}

			/*
			 * "저장" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(e){
				var button = e.control;
				alert(app.lookup("uploadImg").src);
			};
			// End - User Script
			
			// Header
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"background-color" : "#F0F0F0",
				"width" : "100%",
				"height" : "100%"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var uIControlShell_1 = new cpr.controls.UIControlShell("smnote");
			if(typeof onSmnoteLoad == "function") {
				uIControlShell_1.addEventListener("load", onSmnoteLoad);
			}
			container.addChild(uIControlShell_1, {
				"top": "263px",
				"width": "724px",
				"height": "277px",
				"left": "calc(50% - 362px)"
			});
			
			var group_1 = new cpr.controls.Container();
			group_1.style.css({
				"background-color" : "#E7E7E7",
				"background-image" : "none"
			});
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var output_1 = new cpr.controls.Output();
				output_1.value = "레시피 등록";
				output_1.style.css({
					"font-weight" : "bold",
					"font-size" : "20px",
					"font-family" : "@HY엽서L"
				});
				container.addChild(output_1, {
					"top": "0px",
					"left": "0px",
					"width": "127px",
					"height": "52px"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "10px",
				"width": "724px",
				"height": "52px",
				"left": "calc(50% - 362px)"
			});
			
			var group_2 = new cpr.controls.Container();
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.scrollable = false;
			formLayout_1.topMargin = "5px";
			formLayout_1.rightMargin = "5px";
			formLayout_1.bottomMargin = "5px";
			formLayout_1.leftMargin = "5px";
			formLayout_1.horizontalSpacing = "10px";
			formLayout_1.verticalSpacing = "10px";
			formLayout_1.setColumns(["1fr", "1fr", "1fr"]);
			formLayout_1.setRows(["1fr"]);
			group_2.setLayout(formLayout_1);
			(function(container){
				var button_1 = new cpr.controls.Button();
				button_1.value = "저장";
				button_1.style.css({
					"font-weight" : "bold",
					"background-image" : "linear-gradient(#52b135,#58fd45)"
				});
				if(typeof onButtonClick == "function") {
					button_1.addEventListener("click", onButtonClick);
				}
				container.addChild(button_1, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var button_2 = new cpr.controls.Button();
				button_2.value = "취소";
				button_2.style.css({
					"font-weight" : "bold",
					"background-image" : "linear-gradient(#ffffff, #5690cb)"
				});
				container.addChild(button_2, {
					"colIndex": 2,
					"rowIndex": 0
				});
				var button_3 = new cpr.controls.Button();
				button_3.value = "삭제";
				button_3.style.css({
					"font-weight" : "bold",
					"background-image" : "linear-gradient(#52b135,#58fd45)"
				});
				container.addChild(button_3, {
					"colIndex": 1,
					"rowIndex": 0
				});
			})(group_2);
			container.addChild(group_2, {
				"top": "698px",
				"width": "400px",
				"height": "50px",
				"left": "calc(50% - 200px)"
			});
			
			var group_3 = new cpr.controls.Container();
			var xYLayout_3 = new cpr.controls.layouts.XYLayout();
			group_3.setLayout(xYLayout_3);
			(function(container){
				var group_4 = new cpr.controls.Container();
				group_4.style.css({
					"background-color" : "#FFFFFF"
				});
				var formLayout_2 = new cpr.controls.layouts.FormLayout();
				formLayout_2.scrollable = false;
				formLayout_2.topMargin = "5px";
				formLayout_2.rightMargin = "5px";
				formLayout_2.bottomMargin = "5px";
				formLayout_2.leftMargin = "5px";
				formLayout_2.horizontalSpacing = "10px";
				formLayout_2.verticalSpacing = "10px";
				formLayout_2.setColumns(["100px", "388px"]);
				formLayout_2.setRows(["1fr", "1fr", "1fr"]);
				group_4.setLayout(formLayout_2);
				(function(container){
					var output_2 = new cpr.controls.Output();
					output_2.value = "레시피 제목";
					output_2.style.css({
						"font-weight" : "bolder",
						"text-align" : "center"
					});
					container.addChild(output_2, {
						"colIndex": 0,
						"rowIndex": 0
					});
					var output_3 = new cpr.controls.Output();
					output_3.value = "대표 사진";
					output_3.style.css({
						"font-weight" : "bolder",
						"text-align" : "center"
					});
					container.addChild(output_3, {
						"colIndex": 0,
						"rowIndex": 1
					});
					var output_4 = new cpr.controls.Output();
					output_4.value = "카테고리";
					output_4.style.css({
						"font-weight" : "bolder",
						"text-align" : "center"
					});
					container.addChild(output_4, {
						"colIndex": 0,
						"rowIndex": 2
					});
					var inputBox_1 = new cpr.controls.InputBox("ipb1");
					inputBox_1.style.css({
						"font-size" : "18px"
					});
					container.addChild(inputBox_1, {
						"colIndex": 1,
						"rowIndex": 0
					});
					var group_5 = new cpr.controls.Container();
					var formLayout_3 = new cpr.controls.layouts.FormLayout();
					formLayout_3.scrollable = false;
					formLayout_3.topMargin = "5px";
					formLayout_3.rightMargin = "5px";
					formLayout_3.bottomMargin = "5px";
					formLayout_3.leftMargin = "5px";
					formLayout_3.horizontalSpacing = "10px";
					formLayout_3.verticalSpacing = "10px";
					formLayout_3.setColumns(["80px", "80px", "80px"]);
					formLayout_3.setRows(["1fr"]);
					group_5.setLayout(formLayout_3);
					(function(container){
						var linkedComboBox_1 = new cpr.controls.LinkedComboBox("lcb1");
						linkedComboBox_1.placeholders = ["종류별"];
						(function(linkedComboBox_1){
							linkedComboBox_1.addItem((function(){
								var treeItem_1 = new cpr.controls.TreeItem("밑반찬", "밑반찬", null);
								treeItem_1.checked = false;
								return treeItem_1;
							})());
							linkedComboBox_1.addItem(new cpr.controls.TreeItem("메인반찬", "메인반찬", null));
							linkedComboBox_1.addItem(new cpr.controls.TreeItem("국/탕", "국/탕", null));
							linkedComboBox_1.addItem(new cpr.controls.TreeItem("디저트", "디저트", null));
							linkedComboBox_1.addItem(new cpr.controls.TreeItem("면", "면", null));
							linkedComboBox_1.addItem(new cpr.controls.TreeItem("샐러드", "샐러드", null));
							linkedComboBox_1.addItem(new cpr.controls.TreeItem("음료", "음료", null));
							linkedComboBox_1.addItem(new cpr.controls.TreeItem("기타", "기타", null));
						})(linkedComboBox_1);
						container.addChild(linkedComboBox_1, {
							"colIndex": 0,
							"rowIndex": 0,
							"colSpan": 1,
							"rowSpan": 1
						});
						var linkedComboBox_2 = new cpr.controls.LinkedComboBox("lcb2");
						linkedComboBox_2.placeholders = ["방법별"];
						(function(linkedComboBox_2){
							linkedComboBox_2.addItem(new cpr.controls.TreeItem("육류", "육류", null));
							linkedComboBox_2.addItem(new cpr.controls.TreeItem("채소류", "채소류", null));
							linkedComboBox_2.addItem(new cpr.controls.TreeItem("해물류", "해물류", null));
							linkedComboBox_2.addItem(new cpr.controls.TreeItem("달걀/유제품", "달걀/유제품", null));
							linkedComboBox_2.addItem(new cpr.controls.TreeItem("가공식품류", "가공식품류", null));
							linkedComboBox_2.addItem(new cpr.controls.TreeItem("과일류", "과일류", null));
							linkedComboBox_2.addItem(new cpr.controls.TreeItem("기타", "기타", null));
						})(linkedComboBox_2);
						container.addChild(linkedComboBox_2, {
							"colIndex": 1,
							"rowIndex": 0
						});
						var linkedComboBox_3 = new cpr.controls.LinkedComboBox("lcb3");
						linkedComboBox_3.placeholders = ["재료별"];
						(function(linkedComboBox_3){
							linkedComboBox_3.addItem(new cpr.controls.TreeItem("볶음", "볶음", null));
							linkedComboBox_3.addItem(new cpr.controls.TreeItem("끓이기", "끓이기", null));
							linkedComboBox_3.addItem(new cpr.controls.TreeItem("조림", "조림", null));
							linkedComboBox_3.addItem(new cpr.controls.TreeItem("튀김", "튀김", null));
							linkedComboBox_3.addItem(new cpr.controls.TreeItem("삶기", "삶기", null));
							linkedComboBox_3.addItem(new cpr.controls.TreeItem("굽기", "굽기", null));
							linkedComboBox_3.addItem(new cpr.controls.TreeItem("기타", "기타", null));
						})(linkedComboBox_3);
						container.addChild(linkedComboBox_3, {
							"colIndex": 2,
							"rowIndex": 0
						});
					})(group_5);
					container.addChild(group_5, {
						"colIndex": 1,
						"rowIndex": 2,
						"colSpan": 1,
						"rowSpan": 1
					});
					var fileInput_1 = new cpr.controls.FileInput("fi1");
					if(typeof onFi1ValueChange == "function") {
						fileInput_1.addEventListener("value-change", onFi1ValueChange);
					}
					container.addChild(fileInput_1, {
						"colIndex": 1,
						"rowIndex": 1
					});
				})(group_4);
				container.addChild(group_4, {
					"right": "215px",
					"left": "5px",
					"height": "190px",
					"top": "calc(50% - 95px)"
				});
				var image_1 = new cpr.controls.Image("uploadImg");
				if(typeof onUploadImageValueChange == "function") {
					image_1.addEventListener("value-change", onUploadImageValueChange);
				}
				container.addChild(image_1, {
					"top": "5px",
					"left": "508px",
					"width": "216px",
					"height": "193px"
				});
				var button_4 = new cpr.controls.Button("deleteImg");
				button_4.value = "X";
				if(typeof onDeleteImgClick == "function") {
					button_4.addEventListener("click", onDeleteImgClick);
				}
				container.addChild(button_4, {
					"top": "5px",
					"left": "686px",
					"width": "38px",
					"height": "20px"
				});
			})(group_3);
			container.addChild(group_3, {
				"top": "61px",
				"width": "724px",
				"height": "200px",
				"left": "calc(50% - 362px)"
			});
			if(typeof onBodyInit == "function"){
				app.addEventListener("init", onBodyInit);
			}
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	app.title = "updaterecipe";
	cpr.core.Platform.INSTANCE.register(app);
})();
