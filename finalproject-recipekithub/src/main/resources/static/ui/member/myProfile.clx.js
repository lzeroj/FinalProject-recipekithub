/*
 * App URI: member/myProfile
 * Source Location: member/myProfile.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.4584), Don't edit manually.
 */
(function() {
	var app = new cpr.core.App("member/myProfile", { 
		onPrepare: function(loader) {
			loader.addCSS("theme/cleopatra-theme.css");
			loader.addCSS("theme/controls/accordion.part.css");
			loader.addCSS("theme/controls/apptitle.part.css");
			loader.addCSS("theme/controls/audio.part.css");
			loader.addCSS("theme/controls/button.part.css");
			loader.addCSS("theme/controls/calendar.part.css");
			loader.addCSS("theme/controls/checkbox.part.css");
			loader.addCSS("theme/controls/combo-box.part.css");
			loader.addCSS("theme/controls/common.part.css");
			loader.addCSS("theme/controls/date-input.part.css");
			loader.addCSS("theme/controls/dialog.part.css");
			loader.addCSS("theme/controls/file-input.part.css");
			loader.addCSS("theme/controls/file-upload.part.css");
			loader.addCSS("theme/controls/focus.part.css");
			loader.addCSS("theme/controls/form-layout.part.css");
			loader.addCSS("theme/controls/grid.part.css");
			loader.addCSS("theme/controls/htmlobject.css");
			loader.addCSS("theme/controls/htmlobject.part.css");
			loader.addCSS("theme/controls/input.part.css");
			loader.addCSS("theme/controls/linked-combo-box.part.css");
			loader.addCSS("theme/controls/linked-listbox.part.css");
			loader.addCSS("theme/controls/listbox.part.css");
			loader.addCSS("theme/controls/mask-editor.part.css");
			loader.addCSS("theme/controls/menu.part.css");
			loader.addCSS("theme/controls/nav-bar.part.css");
			loader.addCSS("theme/controls/notifier.part.css");
			loader.addCSS("theme/controls/number-editor.part.css");
			loader.addCSS("theme/controls/output.part.css");
			loader.addCSS("theme/controls/page-indexer.part.css");
			loader.addCSS("theme/controls/progress-bar.part.css");
			loader.addCSS("theme/controls/radio-button.part.css");
			loader.addCSS("theme/controls/searchinput.part.css");
			loader.addCSS("theme/controls/side-nav.part.css");
			loader.addCSS("theme/controls/slider.part.css");
			loader.addCSS("theme/controls/statecell.part.css");
			loader.addCSS("theme/controls/tabfolder.part.css");
			loader.addCSS("theme/controls/textarea.part.css");
			loader.addCSS("theme/controls/tree.part.css");
			loader.addCSS("theme/controls/treecell.part.css");
			loader.addCSS("theme/controls/video.part.css");
			loader.addCSS("theme/custom-settings.part.css");
			loader.addCSS("theme/custom-theme.css");
			loader.addCSS("theme/custom/badge.part.css");
			loader.addCSS("theme/custom/breadcrumb.part.css");
			loader.addCSS("theme/custom/button.part.css");
			loader.addCSS("theme/custom/card.part.css");
			loader.addCSS("theme/custom/dropdown.part.css");
			loader.addCSS("theme/custom/extensions.part.css");
			loader.addCSS("theme/custom/fonts.part.css");
			loader.addCSS("theme/custom/globals.part.css");
			loader.addCSS("theme/custom/main.part.css");
			loader.addCSS("theme/custom/member.part.css");
			loader.addCSS("theme/custom/navigation.part.css");
			loader.addCSS("theme/custom/search-box.part.css");
			loader.addCSS("theme/custom/spinner.part.css");
			loader.addCSS("theme/custom/status.part.css");
			loader.addCSS("theme/custom/table.part.css");
			loader.addCSS("theme/custom/typography.part.css");
			loader.addCSS("theme/settings.part.css");
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports) {
			var linker = {};
			// Start - User Script
			/************************************************
			 * myProfile.js
			 * Created at 2023. 8. 10. 오후 3:52:23.
			 *
			 * @author kjoon
			 ************************************************/

			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.

			function onBodyLoad(e) {
				//var sessionval = getSessionStorage("memsession");
				//console.log(sessionval);
				var recipeBoardVO = cpr.core.Platform.INSTANCE.getParameter("recipeBoardVO");
				console.log(recipeBoardVO);
				//if(sessionval ==null || sessionval != recipeBoardVO.memberVO.memberEmail){
				//	app.lookup("updateBtn").visible = false;
				//}
				app.lookup("recipeBoardImage").src = "/upload/recipe/" + recipeBoardVO.recipeBoardImage;
				app.lookup("recipeBoardTitle").value = recipeBoardVO.recipeBoardTitle;
				app.lookup("memberNick").value = recipeBoardVO.memberVO.memberNick;
				var hTMLSnippet = app.lookup("recipeContent");
				hTMLSnippet.value = recipeBoardVO.recipeBoardContent;
				
				app.lookup("regDate").value = recipeBoardVO.recipeRegDate;
				if(recipeBoardVO.recipeEditDate ==null){
					app.lookup("edit").visible = false;
					app.lookup("editDate").visible = false;
				}else{
					app.lookup("editDate").value = recipeBoardVO.recipeEditDate;
				}
				app.lookup("dmRecipeBoardId").setValue("recipeBoardId", recipeBoardVO.recipeBoardId);
				var recipeCommentsub = app.lookup("recipeCommentList");
				recipeCommentsub.send();
				
				// 현준
				app.lookup("dmRecipeBoardId").setValue("recipeBoardId", recipeBoardVO.recipeBoardId);
				app.lookup("subrecipelikecount").send();
				
			}
			 */





			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(e) {
				//sessionStorage.getItem("memsession");
				
				var submission = app.lookup("sub_profile");
				submission.send();
			}

			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onSub_profileSubmitSuccess(e) {
				var sub_profile = e.control;
				var dsProfile = app.lookup("ds_profile");
				app.lookup("ipbEmail").text = dsProfile.getValue(0, "memberEmail");
				app.lookup("ipbPassword1").text = dsProfile.getValue(0, "memberPassword");
				app.lookup("ipbName").text = dsProfile.getValue(0, "memberName");
				app.lookup("ipbNick").text = dsProfile.getValue(0, "memberNick");
				app.lookup("address").text = dsProfile.getValue(0, "memberAddress");
				app.lookup("postCode").text = dsProfile.getValue(0, "memberPostcode");
				app.lookup("detailAddress").text = dsProfile.getValue(0, "memberAddressDetail");
				app.lookup("ipbPhone").mask = dsProfile.getValue(0, "memberPhone");
				app.lookup("ipbBirthday").value = dsProfile.getValue(0, "memberBirthday");
				//dataMap 형식으로 수정하기  -> 그룹 전체를 redraw하기
				//app.lookup("dm_profile");
				//app.lookup("myProfileForm").redraw();
			}


			/*
			 * 인풋 박스에서 keyup 이벤트 발생 시 호출.
			 * 사용자가 키에서 손을 뗄 때 발생하는 이벤트. 키코드 관련 상수는 {@link cpr.events.KeyCode}에서 참조할 수 있습니다.
			 */
			//---[ password1이 변경될 때마다 호출되어 비밀번호 유효성을 확인하고, password2와의 일치 여부를 갱신 ]---//
			function onIpbPassword1Keyup(e) {
				var ipbPassword1 = e.control;
				var checkPswd1Flag = false; 	// 사용자가 사용 가능 상태에서 다시 사용불가 상태 아이디로 입력할 수 있으므로 keyup 이벤트 발생시마다 false로 상태 초기화
				var password1 = app.lookup("ipbPassword1");
				var imgPswd1 = app.lookup("imgPswdChk1");
				var checkPswdResult1 = app.lookup("opbCheckPassword");
				var pswd1 = ipbPassword1.displayText;
				var pswd1Value = String(pswd1);
				// 회원가입시 사용가능한 비밀번호 정규식을 체크하는 변수 : 8-25자 사이, 숫자, 대소문자, 특수 문자 모두 포함
				var regExp = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[\W])[a-zA-Z\d\W]{8,25}$/;
				
				if (pswd1Value === "") { 															//---> 1. 비밀번호 입력칸이 빈칸인 경우
					checkPswdResult1.style.css("color", "pink");
					checkPswdResult1.value = "비밀번호를 입력해주세요.";
					imgPswd1.src = "";
				} else if (pswd1Value.length < 8 || pswd1Value.length > 25) { 		//---> 2. 비밀번호로 입력한 값이 30자를 초과한 경우
					checkPswdResult1.style.css("color", "red");
					checkPswdResult1.value = "비밀번호는 8자 이상 25자 이하이어야 합니다.";
					imgPswd1.src = "../ui/theme/images/member/cross.png";
				} else if (regExp.test(pswd1Value) == false) { 							//---> 3. 입력한 값이 비밀번호 형식에 적합하지 않아 사용할 수 없는 경우
					checkPswdResult1.style.css("color", "red");
					checkPswdResult1.value = "비밀번호 형식을 확인해주시기 바랍니다.";
					imgPswd1.src = "../ui/theme/images/member/cross.png";
				} else if (pswd1Value.search(" ") != -1) { 									//---> 4. 입력한 비밀번호에 공백이 포함되어 사용할 수 없는 경우
					checkPswdResult1.style.css("color", "red");
					checkPswdResult1.value = "비밀번호는 공백을 포함할 수 없습니다.";
					imgPswd1.src = "../ui/theme/images/member/cross.png";
				} else if (/(.)\1\1/.test(pswd1Value)) { 									//---> 5. 입력한 비밀번호에 같은 문자가 연속하여 3번 이상 사용된 경우
					checkPswdResult1.style.css("color", "red");
					checkPswdResult1.value = "같은 문자를 연속하여 3번 사용할 수 없습니다.";
					imgPswd1.src = "../ui/theme/images/member/cross.png";
				} else { 																					//---> 6. 입력한 비밀번호가 사용 가능한 경우
					checkPswd1Flag = true;
					checkPswdResult1.style.css("color", "blue");
					checkPswdResult1.value = "사용가능한 비밀번호입니다.";
					imgPswd1.src = "../ui/theme/images/member/checked.png";
				}
				
				// password1이 변경될 때마다 password2와의 일치 여부를 검사하여 password2의 확인 상태를 갱신
				var ipbPassword2 = app.lookup("ipbPassword2");
				var pswd2 = ipbPassword2.displayText;
				var pswd2Value = String(pswd2);
				var checkPswdResult2 = app.lookup("opbCheckPassword2");
				
				if (pswd2Value !== "") { 		// password2가 비어 있지 않은 경우에만 확인
					if (pswd1Value !== pswd2Value) {
						checkPswdResult2.style.css("color", "red");
						checkPswdResult2.value = "위의 비밀번호와 일치하지 않습니다.";
						app.lookup("imgPswdChk2").src = "../ui/theme/images/member/cross.png";
					} else {
						checkPswdResult2.style.css("color", "blue");
						checkPswdResult2.value = "비밀번호가 일치합니다.";
						app.lookup("imgPswdChk2").src = "../ui/theme/images/member/checked.png";
					}
				}
			}

			/*
			 * 인풋 박스에서 keyup 이벤트 발생 시 호출.
			 * 사용자가 키에서 손을 뗄 때 발생하는 이벤트. 키코드 관련 상수는 {@link cpr.events.KeyCode}에서 참조할 수 있습니다.
			 */
			//---[ password2가 변경될 때마다 호출되어 password1과의 일치 여부를 확인 ]---//
			function onIpbPassword2Keyup(e) {
				var ipbPassword2 = e.control;
				var ipbPassword1 = app.lookup("ipbPassword1");
				var imgPswd2 = app.lookup("imgPswdChk2");
				var pswd1 = ipbPassword1.displayText;
				var pswd1Value = String(pswd1);
				var pswd2 = ipbPassword2.displayText;
				var pswd2Value = String(pswd2);
				var checkPswdResult2 = app.lookup("opbCheckPassword2");
				
				if (pswd2Value === "") {
					checkPswdResult2.text = "";
					imgPswd2.src = "";
				} else if (pswd1Value != pswd2Value) {
					checkPswdResult2.style.css("color", "red");
					checkPswdResult2.value = "위의 비밀번호와 일치하지 않습니다.";
					imgPswd2.src = "../ui/theme/images/member/cross.png";
				} else if (pswd1Value === pswd2Value) {
					checkPswdResult2.style.css("color", "blue");
					checkPswdResult2.value = "비밀번호가 일치합니다.";
					imgPswd2.src = "../ui/theme/images/member/checked.png";
				}
			}

			/*
			 * 인풋 박스에서 keyup 이벤트 발생 시 호출.
			 * 사용자가 키에서 손을 뗄 때 발생하는 이벤트. 키코드 관련 상수는 {@link cpr.events.KeyCode}에서 참조할 수 있습니다.
			 */
			function onIpbNickKeyup(e) {
				var ipbNick = e.control;
				
				var dataMap = app.lookup("dm_check_nick");
				dataMap.setValue("member_nick", app.lookup("ipbNick").value);
				
				var subCheckNick = app.lookup("sub_check_nick");
				subCheckNick.send();
			}

			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			//---[ 닉네임이 변경될 때마다 호출되어 닉네임 유효성을 확인 ]---//
			function onSub_check_nickSubmitSuccess(e) {
				var sub_check_nick = e.control;
				var checkNickFlag = false; 		// 사용자가 사용 가능 상태에서 다시 사용불가 상태 아이디로 입력할 수 있으므로 keyup 이벤트 발생시마다 false로 상태 초기화
				
				var metadataOk = sub_check_nick.getMetadata("ok"); 			// Controller측에서 닉네임 중복 여부를 체크하여 ok(사용 가능)인 경우
				var metadataFail = sub_check_nick.getMetadata("fail"); 		// Controller측에서 닉네임 중복 여부를 체크하여 fail(중복되어 사용 불가)인 경우
				
				var ipbNick = app.lookup("ipbNick"); 									// 닉네임 입력 input-box
				var opbCheckNickResult = app.lookup("opbCheckNick"); 		// 닉네임 유효성 검사 결과가 출력되는 output-box
				var imgNick = app.lookup("imgNickChk"); 								// 사용가능한 Email인지 시각적으로 표현해주는 O/X 이미지가 출력되는 image-box
				
				var nick = ipbNick.displayText;
				var nickValue = String(nick); 		// input-box에서 보여지는 HTML Element의 value를 가져와서 String 타입으로 저장.	
				
				if (nickValue === "") { 														//---> 1. 닉네임 입력칸이 빈칸인 경우
					opbCheckNickResult.style.css("color", "pink");
					opbCheckNickResult.value = "닉네임을 입력해주세요.";
					imgNick.src = "";
				} else if (nickValue.length < 2 || nickValue.length > 8) { 			//---> 2. 닉네임으로 입력한 값이 1자 or 9자를 이상인 경우
					opbCheckNickResult.style.css("color", "red");
					opbCheckNickResult.value = "닉네임은 2자이상 ~ 8자 이하이어야 합니다.";
					imgNick.src = "../ui/theme/images/member/cross.png";
				} else if (metadataFail) { 													//---> 3. 입력한 닉네임이 중복되어 사용할 수 없는 경우
					opbCheckNickResult.style.css("color", "red");
					opbCheckNickResult.value = "닉네임이 중복됩니다.";
					imgNick.src = "../ui/theme/images/member/cross.png";
				} else if (nickValue.search(" ") != -1) { 									//---> 4. 입력한 닉네임에 공백이 포함되어 사용할 수 없는 경우
					opbCheckNickResult.style.css("color", "red");
					opbCheckNickResult.value = "닉네임은 공백을 포함할 수 없습니다.";
					imgNick.src = "../ui/theme/images/member/cross.png";
				} else { 																				//---> 5. 입력한 닉네임이 사용 가능한 경우
					checkNickFlag = true;
					opbCheckNickResult.style.css("color", "blue");
					opbCheckNickResult.value = "사용가능한 닉네임입니다.";
					imgNick.src = "../ui/theme/images/member/checked.png";
				}
			}


			/*
			 * "수정" 버튼(btnMemUpdate)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnMemUpdateClick(e){
				var btnMemUpdate = e.control;
				var dataMap = app.lookup("dm_update");
				dataMap.setValue("memberEmail", app.lookup("ipbEmail").value);
				dataMap.setValue("memberPassword", app.lookup("ipbPassword1").value);
				dataMap.setValue("memberName", app.lookup("ipbName").value);
				dataMap.setValue("memberNick", app.lookup("ipbNick").value);
				dataMap.setValue("memberBirthday", app.lookup("ipbBirthday").value);
				dataMap.setValue("memberPhone", app.lookup("ipbPhone").value);
				dataMap.setValue("memberPostcode", app.lookup("postCode").value);
				dataMap.setValue("memberAddress", app.lookup("address").value);
				dataMap.setValue("memberAddressDetail", app.lookup("detailAddress").value);
				
				var initValue = "정말로 수정하시겠습니까?";
				app.openDialog("dialog/registerPopup", {
					width: 400, height: 300, headerClose: true, resizable: false
				}, function(dialog) {
					dialog.ready(function(dialogApp) {
						dialogApp.initValue = initValue;
					});
				}).then(function(returnValue) {
					var submission = app.lookup("sub_update");
					submission.send();
				});
			}

			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onSub_updateSubmitSuccess(e) {
				var sub_update = e.control;
				var initValue = "회원 정보 수정이 완료되었습니다!";
				app.openDialog("dialog/registerChkPopup", {
					width: 400, height: 300, resizable: false, headerMovable: false
				}, function(dialog) {
					dialog.ready(function(dialogApp) {
						dialogApp.initValue = initValue;
					});
				}).then(function(returnValue) {
					window.location.href = "index.clx";
				});
			}


			/*
			 * "탈퇴" 버튼(btnMemDelete)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnMemDeleteClick(e){
				var btnMemDelete = e.control;
				
				var initValue = "정말로 탈퇴하시겠습니까?";
				app.openDialog("dialog/registerPopup", {
					width: 400, height: 300, headerClose: true, resizable: false
				}, function(dialog) {
					dialog.ready(function(dialogApp) {
						dialogApp.initValue = initValue;
					});
				}).then(function(returnValue) {
					var dataMap = app.lookup("dm_delete");
					dataMap.setValue("memberEmail", app.lookup("ipbEmail").value);
					var submission = app.lookup("sub_delete");
					submission.send();
				});
			}

			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onSub_deleteSubmitSuccess(e) {
				var sub_delete = e.control;
				
				var initValue = "지금까지 RecipeKitHub을 이용해주셔서 감사합니다!";
				app.openDialog("dialog/registerChkPopup", {
					width: 400, height: 300, resizable: false, headerMovable: false
				}, function(dialog) {
					dialog.ready(function(dialogApp) {
						dialogApp.initValue = initValue;
					});
				}).then(function(returnValue) {
					window.location.href = "index.clx";
				});
			}


			/*
			 * "취소" 버튼(btnCancel)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnCancelClick(e) {
				window.location.href = "index.clx";
			}


			/*
			 * 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(e) {
				var button = e.control;
				var submission = app.lookup("sub_logout");
				submission.send();
			}

			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onSub_logoutSubmitSuccess(e) {
				var sub_logout = e.control;
				alert("로그아웃이 완료되었습니다!")
				//var httpPostMethod = new cpr.protocols.HttpPostMethod("index.clx");
				//httpPostMethod.submit();
				window.location.href = "index.clx";
			}


			/*
			 * "프로필 사진 등록/수정" 버튼(btnInsertProfileImg)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnInsertProfileImgClick(e){
				var btnInsertProfileImg = e.control;
				
			}

			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onSub_insert_imageSubmitSuccess(e){
				var sub_insert_image = e.control;
				
			}


			/*
			 * "프로필 사진 삭제" 버튼(btnDeleteProfileImg)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnDeleteProfileImgClick(e){
				var btnDeleteProfileImg = e.control;
				
			}

			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onSub_delete_imageSubmitSuccess(e){
				var sub_delete_image = e.control;
				
			}

			//=============================================[ 카카오 주소검색 API ]=============================================//

			/*
			 * 루트 컨테이너에서 init 이벤트 발생 시 호출.
			 * 앱이 최초 구성될 때 발생하는 이벤트 입니다.
			 */
			function onBodyInit(e){
					// 다음에서 제공하는 통합로딩 url
				var voResourceLoader = new cpr.core.ResourceLoader();
				voResourceLoader.addScript("//t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js").load().then(function(input) {
					//후처리
				});
			}

			/*
			 * "주소 검색" 버튼(btnPostcode)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onBtnPostcodeClick(e){
				//var btnPostcode = e.control;
				//app.lookup("btnPostcode").click();
				
				postCode();
			}

			var appConf = cpr.core.AppConfig.INSTANCE;
			appConf.getEnvConfig().setValue("appcache", true);

			function postCode() {
				new daum.Postcode({
					/* 해당 정보를 받아 처리할 콜백 함수를 정의하는 부분 입니다. */
					oncomplete: function(data) {
						/* 팝업에서 검색결과 항목을 클릭했을떄 실행할 코드를 작성하는 부분 */
						var vcPostCode = app.lookup("postCode");
						var vcAddress = app.lookup("address");
						var vcDetailAddress = app.lookup("detailAddress");
						
						// 도로명 주소의 노출 규칙에 따라 주소를 표시한다.
						// 내려오는 변수가 값이 없는 경우엔 공백('')값을 가지므로, 이를 참고하여 분기 한다.
						var roadAddr = data.roadAddress; // 도로명 주소 변수
						var extraRoadAddr = ""; // 참고 항목 변수
						
						// 법정동명이 있을 경우 추가한다. (법정리는 제외)
						// 법정동의 경우 마지막 문자가 "동/로/가"로 끝난다.
						if (data.bname !== "" && /[동|로|가]$/g.test(data.bname)) {
							extraRoadAddr += data.bname;
						}
						// 건물명이 있고, 공동주택일 경우 추가한다.
						if (data.buildingName !== "" && data.apartment === "Y") {
							extraRoadAddr += (extraRoadAddr !== "" ? ", " + data.buildingName : data.buildingName);
						}
						
						// 표시할 참고항목이 있을 경우, 괄호까지 추가한 최종 문자열을 만든다.
						if (extraRoadAddr !== "") {
							extraRoadAddr = " (" + extraRoadAddr + ")";
						}
						
						// 우편번호와 주소 정보를 해당 필드에 넣는다.
						vcPostCode.value = data.zonecode;
						
						// 사용자가 도로명 주소를 선택한 경우
						if (data.userSelectedType === "R") {
							vcAddress.value = roadAddr + extraRoadAddr; // 참고항목이 있다면, 괄호와 함께 추가한다.
						}
						// 사용자가 지번 주소를 선택한 경우
						else if (data.userSelectedType === "J") {
							vcAddress.value = data.jibunAddress;
						}
						
						// 참고항목 문자열이 있을 경우 해당 필드에 넣는다.
						if (roadAddr !== "") {
							vcDetailAddress.value = extraRoadAddr;
						} else {
							vcDetailAddress.value = "";
						}
						
						/*커서를 상세주소 필드로 이동합니다. */
						vcDetailAddress.focus();
					}
				}).open();
			}

			/*
			 * 루트 컨테이너에서 unload 이벤트 발생 시 호출.
			 * 앱이 언로드된 후 발생하는 이벤트입니다.
			 */
			function onBodyUnload(e){
				var appConf = cpr.core.AppConfig.INSTANCE;
				appConf.getEnvConfig().setValue("appcache", false);
			};
			// End - User Script
			
			// Header
			app.declareAppProperty("myProfile", null);
			var dataSet_1 = new cpr.data.DataSet("ds_profile");
			dataSet_1.parseData({
				"columns" : [
					{
						"name": "memberEmail",
						"dataType": "string"
					},
					{
						"name": "memberPassword",
						"dataType": "string"
					},
					{
						"name": "memberName",
						"dataType": "string"
					},
					{
						"name": "memberNick",
						"dataType": "string"
					},
					{
						"name": "memberAddress",
						"dataType": "string"
					},
					{
						"name": "memberPhone",
						"dataType": "string"
					},
					{
						"name": "memberBirthday",
						"dataType": "string"
					},
					{
						"name": "memberType",
						"dataType": "string"
					},
					{
						"name": "memberStatus",
						"dataType": "string"
					},
					{
						"name": "memberRegDate",
						"dataType": "string"
					},
					{
						"name": "memberPostcode",
						"dataType": "string"
					},
					{
						"name": "memberAddressDetail",
						"dataType": "string"
					}
				]
			});
			app.register(dataSet_1);
			var dataMap_1 = new cpr.data.DataMap("dm_profile");
			dataMap_1.parseData({
				"columns" : [
					{
						"name": "memberEmail",
						"dataType": "string"
					},
					{
						"name": "memberPassword",
						"dataType": "string"
					},
					{
						"name": "memberName",
						"dataType": "string"
					},
					{
						"name": "memberNick",
						"dataType": "string"
					},
					{
						"name": "memberAddress",
						"dataType": "string"
					},
					{
						"name": "memberPhone",
						"dataType": "string"
					},
					{
						"name": "memberBirthday",
						"dataType": "string"
					},
					{
						"name": "memberType",
						"dataType": "string"
					},
					{
						"name": "memberStatus",
						"dataType": "string"
					},
					{
						"name": "memberRegDate",
						"dataType": "string"
					},
					{
						"name": "memberPostcode",
						"dataType": "string"
					},
					{
						"name": "memberAddressDetail",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("dm_update");
			dataMap_2.parseData({
				"columns" : [
					{"name": "memberEmail"},
					{
						"name": "memberPassword",
						"dataType": "string"
					},
					{
						"name": "memberName",
						"dataType": "string"
					},
					{
						"name": "memberNick",
						"dataType": "string"
					},
					{
						"name": "memberAddress",
						"dataType": "string"
					},
					{
						"name": "memberPhone",
						"dataType": "string"
					},
					{
						"name": "memberBirthday",
						"dataType": "string"
					},
					{
						"name": "memberPostcode",
						"dataType": "string"
					},
					{
						"name": "memberAddressDetail",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_2);
			
			var dataMap_3 = new cpr.data.DataMap("dm_delete");
			dataMap_3.parseData({
				"columns" : [{
					"name": "memberEmail",
					"dataType": "string"
				}]
			});
			app.register(dataMap_3);
			
			var dataMap_4 = new cpr.data.DataMap("dm_check_nick");
			dataMap_4.parseData({
				"columns" : [{
					"name": "member_nick",
					"dataType": "string"
				}]
			});
			app.register(dataMap_4);
			
			var dataMap_5 = new cpr.data.DataMap("dm_profile_img");
			dataMap_5.parseData({});
			app.register(dataMap_5);
			var submission_1 = new cpr.protocols.Submission("sub_profile");
			submission_1.action = "/member/profileInfo";
			submission_1.addResponseData(dataSet_1, false);
			if(typeof onSub_profileSubmitSuccess == "function") {
				submission_1.addEventListener("submit-success", onSub_profileSubmitSuccess);
			}
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("sub_update");
			submission_2.action = "/member/updateMember";
			submission_2.addRequestData(dataMap_2);
			submission_2.addResponseData(dataSet_1, false);
			if(typeof onSub_updateSubmitSuccess == "function") {
				submission_2.addEventListener("submit-success", onSub_updateSubmitSuccess);
			}
			app.register(submission_2);
			
			var submission_3 = new cpr.protocols.Submission("sub_delete");
			submission_3.action = "/member/deleteMember";
			submission_3.addRequestData(dataMap_3);
			if(typeof onSub_deleteSubmitSuccess == "function") {
				submission_3.addEventListener("submit-success", onSub_deleteSubmitSuccess);
			}
			app.register(submission_3);
			
			var submission_4 = new cpr.protocols.Submission("sub_logout");
			submission_4.action = "/member/logout";
			if(typeof onSub_logoutSubmitSuccess == "function") {
				submission_4.addEventListener("submit-success", onSub_logoutSubmitSuccess);
			}
			app.register(submission_4);
			
			var submission_5 = new cpr.protocols.Submission("sub_check_nick");
			submission_5.action = "/member/checkNick";
			submission_5.addRequestData(dataMap_4);
			if(typeof onSub_check_nickSubmitSuccess == "function") {
				submission_5.addEventListener("submit-success", onSub_check_nickSubmitSuccess);
			}
			app.register(submission_5);
			
			var submission_6 = new cpr.protocols.Submission("sub_insert_image");
			if(typeof onSub_insert_imageSubmitSuccess == "function") {
				submission_6.addEventListener("submit-success", onSub_insert_imageSubmitSuccess);
			}
			app.register(submission_6);
			
			var submission_7 = new cpr.protocols.Submission("sub_delete_image");
			if(typeof onSub_delete_imageSubmitSuccess == "function") {
				submission_7.addEventListener("submit-success", onSub_delete_imageSubmitSuccess);
			}
			app.register(submission_7);
			app.supportMedia("all and (min-width: 1920px)", "FHD");
			app.supportMedia("all and (min-width: 1024px) and (max-width: 1919px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"height" : "100%"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			group_1.style.css({
				"background-color" : "#F4FAEC",
				"background-size" : "cover",
				"background-image" : "url('theme/images/common/bgimg11.png')",
				"background-position" : "center"
			});
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var group_2 = new cpr.controls.Container();
				var responsiveXYLayout_1 = new cpr.controls.layouts.ResponsiveXYLayout();
				group_2.setLayout(responsiveXYLayout_1);
				(function(container){
					var group_3 = new cpr.controls.Container();
					var responsiveXYLayout_2 = new cpr.controls.layouts.ResponsiveXYLayout();
					group_3.setLayout(responsiveXYLayout_2);
					(function(container){
						var tabFolder_1 = new cpr.controls.TabFolder();
						tabFolder_1.style.css({
							"font-size" : "28px"
						});
						tabFolder_1.style.item.css({
							"background-color" : "#0CA44E",
							"border-radius" : "20 20 0 0",
							"padding-top" : "10px",
							"font-weight" : "bolder",
							"padding-left" : "50px",
							"padding-bottom" : "10px",
							"font-size" : "30px",
							"font-family" : "푸른전남 Medium",
							"padding-right" : "50px"
						});
						tabFolder_1.style.body.css({
							"border-radius" : "0 10 20 20"
						});
						
						var tabItem_1 = (function(tabFolder){
							var tabItem_1 = new cpr.controls.TabItem();
							tabItem_1.text = "MyProfile";
							var group_4 = new cpr.controls.Container("myProfileForm");
							var dataMapContext_1 = new cpr.bind.DataMapContext(app.lookup("dm_profile"));
							group_4.setBindContext(dataMapContext_1);
							var formLayout_1 = new cpr.controls.layouts.FormLayout();
							formLayout_1.scrollable = false;
							formLayout_1.topMargin = "10px";
							formLayout_1.rightMargin = "10px";
							formLayout_1.bottomMargin = "10px";
							formLayout_1.leftMargin = "10px";
							formLayout_1.horizontalSpacing = "20px";
							formLayout_1.verticalSpacing = "20px";
							formLayout_1.setColumns(["1fr", "1fr"]);
							formLayout_1.setRows(["1fr"]);
							group_4.setLayout(formLayout_1);
							(function(container){
								var group_5 = new cpr.controls.Container();
								var formLayout_2 = new cpr.controls.layouts.FormLayout();
								formLayout_2.scrollable = false;
								formLayout_2.topMargin = "10px";
								formLayout_2.rightMargin = "10px";
								formLayout_2.bottomMargin = "10px";
								formLayout_2.leftMargin = "10px";
								formLayout_2.horizontalSpacing = "20px";
								formLayout_2.verticalSpacing = "20px";
								formLayout_2.setColumns(["1fr"]);
								formLayout_2.setRows(["370px", "50px", "50px", "50px", "50px"]);
								group_5.setLayout(formLayout_2);
								(function(container){
									var group_6 = new cpr.controls.Container();
									var formLayout_3 = new cpr.controls.layouts.FormLayout();
									formLayout_3.scrollable = false;
									formLayout_3.topMargin = "5px";
									formLayout_3.rightMargin = "5px";
									formLayout_3.bottomMargin = "5px";
									formLayout_3.leftMargin = "5px";
									formLayout_3.horizontalSpacing = "20px";
									formLayout_3.verticalSpacing = "10px";
									formLayout_3.setColumns(["120px", "1fr"]);
									formLayout_3.setRows(["1fr"]);
									group_6.setLayout(formLayout_3);
									(function(container){
										var output_1 = new cpr.controls.Output();
										output_1.value = " - 이름";
										output_1.style.css({
											"background-color" : "#F0F0F0",
											"border-radius" : "5px",
											"font-weight" : "bolder",
											"font-size" : "15px"
										});
										container.addChild(output_1, {
											"colIndex": 0,
											"rowIndex": 0
										});
										var inputBox_1 = new cpr.controls.InputBox("ipbName");
										inputBox_1.showClearButton = true;
										inputBox_1.lengthUnit = "utf8";
										inputBox_1.maxLength = 18;
										inputBox_1.spellCheck = false;
										inputBox_1.style.css({
											"border-radius" : "5px",
											"font-size" : "15px"
										});
										inputBox_1.bind("value").toDataSet(app.lookup("ds_profile"), "memberName", 0);
										container.addChild(inputBox_1, {
											"colIndex": 1,
											"rowIndex": 0
										});
									})(group_6);
									container.addChild(group_6, {
										"colIndex": 0,
										"rowIndex": 3
									});
									var group_7 = new cpr.controls.Container();
									var formLayout_4 = new cpr.controls.layouts.FormLayout();
									formLayout_4.scrollable = false;
									formLayout_4.topMargin = "5px";
									formLayout_4.rightMargin = "5px";
									formLayout_4.bottomMargin = "5px";
									formLayout_4.leftMargin = "5px";
									formLayout_4.horizontalSpacing = "20px";
									formLayout_4.verticalSpacing = "10px";
									formLayout_4.setColumns(["120px", "1fr"]);
									formLayout_4.setRows(["1fr"]);
									group_7.setLayout(formLayout_4);
									(function(container){
										var inputBox_2 = new cpr.controls.InputBox("ipbEmail");
										inputBox_2.readOnly = true;
										inputBox_2.style.css({
											"border-radius" : "5px",
											"font-size" : "15px"
										});
										inputBox_2.bind("value").toDataSet(app.lookup("ds_profile"), "memberEmail", 0);
										container.addChild(inputBox_2, {
											"colIndex": 1,
											"rowIndex": 0
										});
										var output_2 = new cpr.controls.Output();
										output_2.value = " - Email";
										output_2.style.css({
											"background-color" : "#F0F0F0",
											"border-radius" : "5px",
											"font-weight" : "bolder",
											"font-size" : "15px"
										});
										container.addChild(output_2, {
											"colIndex": 0,
											"rowIndex": 0
										});
									})(group_7);
									container.addChild(group_7, {
										"colIndex": 0,
										"rowIndex": 2
									});
									var group_8 = new cpr.controls.Container();
									var formLayout_5 = new cpr.controls.layouts.FormLayout();
									formLayout_5.scrollable = false;
									formLayout_5.topMargin = "0px";
									formLayout_5.rightMargin = "0px";
									formLayout_5.bottomMargin = "0px";
									formLayout_5.leftMargin = "0px";
									formLayout_5.horizontalSpacing = "30px";
									formLayout_5.verticalSpacing = "30px";
									formLayout_5.setColumns(["1fr", "1fr", "1fr"]);
									formLayout_5.setRows(["1fr"]);
									group_8.setLayout(formLayout_5);
									(function(container){
										var button_1 = new cpr.controls.Button("btnMemUpdate");
										button_1.value = "수정";
										button_1.style.setClasses(["btn-dim", "btn-success"]);
										button_1.style.css({
											"border-bottom-color" : "#0ca44e",
											"border-top-width" : "2px",
											"border-right-width" : "2px",
											"font-weight" : "bolder",
											"border-left-color" : "#0ca44e",
											"font-size" : "18px",
											"border-right-color" : "#0ca44e",
											"border-left-width" : "2px",
											"background-color" : "none",
											"border-radius" : "10px",
											"text-shadow" : "none",
											"border-bottom-width" : "2px",
											"border-top-color" : "#0ca44e",
											"font-family" : "푸른전남 Medium",
											"background-image" : "none"
										});
										if(typeof onBtnMemUpdateClick == "function") {
											button_1.addEventListener("click", onBtnMemUpdateClick);
										}
										container.addChild(button_1, {
											"colIndex": 0,
											"rowIndex": 0
										});
										var button_2 = new cpr.controls.Button("btnMemDelete");
										button_2.value = "탈퇴";
										button_2.style.setClasses(["btn-dim", "btn-danger"]);
										button_2.style.css({
											"border-bottom-color" : "#ff0000",
											"border-top-width" : "2px",
											"border-right-width" : "2px",
											"font-weight" : "bolder",
											"border-left-color" : "#ff0000",
											"font-size" : "18px",
											"border-right-color" : "#ff0000",
											"border-left-width" : "2px",
											"background-color" : "none",
											"border-radius" : "10px",
											"text-shadow" : "none",
											"border-bottom-width" : "2px",
											"border-top-color" : "#ff0000",
											"font-family" : "푸른전남 Medium",
											"background-image" : "none"
										});
										if(typeof onBtnMemDeleteClick == "function") {
											button_2.addEventListener("click", onBtnMemDeleteClick);
										}
										container.addChild(button_2, {
											"colIndex": 1,
											"rowIndex": 0
										});
										var button_3 = new cpr.controls.Button("btnCancel");
										button_3.value = "취소";
										button_3.style.setClasses(["btn-outline-gray"]);
										button_3.style.css({
											"background-color" : "none",
											"border-radius" : "10px",
											"text-shadow" : "none",
											"border-top-width" : "2px",
											"border-right-width" : "2px",
											"font-weight" : "bolder",
											"border-bottom-width" : "2px",
											"font-size" : "18px",
											"font-family" : "푸른전남 Medium",
											"background-image" : "none",
											"border-left-width" : "2px"
										});
										if(typeof onBtnCancelClick == "function") {
											button_3.addEventListener("click", onBtnCancelClick);
										}
										container.addChild(button_3, {
											"colIndex": 2,
											"rowIndex": 0
										});
									})(group_8);
									container.addChild(group_8, {
										"colIndex": 0,
										"rowIndex": 4
									});
									var image_1 = new cpr.controls.Image("profileImg");
									image_1.src = "theme/images/common/mypageIcon.png";
									container.addChild(image_1, {
										"colIndex": 0,
										"rowIndex": 0
									});
									var group_9 = new cpr.controls.Container();
									var formLayout_6 = new cpr.controls.layouts.FormLayout();
									formLayout_6.scrollable = false;
									formLayout_6.topMargin = "0px";
									formLayout_6.rightMargin = "0px";
									formLayout_6.bottomMargin = "0px";
									formLayout_6.leftMargin = "0px";
									formLayout_6.horizontalSpacing = "20px";
									formLayout_6.verticalSpacing = "20px";
									formLayout_6.setColumns(["1fr", "1fr"]);
									formLayout_6.setRows(["1fr"]);
									group_9.setLayout(formLayout_6);
									(function(container){
										var button_4 = new cpr.controls.Button("btnInsertProfileImg");
										button_4.value = "프로필 사진 등록/수정";
										button_4.style.setClasses(["btn-outline-secondary"]);
										button_4.style.css({
											"background-color" : "none",
											"text-shadow" : "none",
											"background-image" : "none"
										});
										if(typeof onBtnInsertProfileImgClick == "function") {
											button_4.addEventListener("click", onBtnInsertProfileImgClick);
										}
										container.addChild(button_4, {
											"colIndex": 0,
											"rowIndex": 0
										});
										var button_5 = new cpr.controls.Button("btnDeleteProfileImg");
										button_5.value = "프로필 사진 삭제";
										button_5.style.setClasses(["btn-outline-secondary"]);
										button_5.style.css({
											"background-color" : "none",
											"text-shadow" : "none",
											"background-image" : "none"
										});
										if(typeof onBtnDeleteProfileImgClick == "function") {
											button_5.addEventListener("click", onBtnDeleteProfileImgClick);
										}
										container.addChild(button_5, {
											"colIndex": 1,
											"rowIndex": 0
										});
									})(group_9);
									container.addChild(group_9, {
										"colIndex": 0,
										"rowIndex": 1
									});
								})(group_5);
								container.addChild(group_5, {
									"colIndex": 0,
									"rowIndex": 0,
									"colSpan": 1,
									"rowSpan": 1
								});
								var group_10 = new cpr.controls.Container();
								group_10.style.css({
									"font-weight" : "bolder",
									"font-size" : "15px"
								});
								var formLayout_7 = new cpr.controls.layouts.FormLayout();
								formLayout_7.scrollable = false;
								formLayout_7.topMargin = "5px";
								formLayout_7.rightMargin = "5px";
								formLayout_7.bottomMargin = "5px";
								formLayout_7.leftMargin = "5px";
								formLayout_7.horizontalSpacing = "20px";
								formLayout_7.verticalSpacing = "20px";
								formLayout_7.setColumns(["120px", "1fr"]);
								formLayout_7.setRows(["110px", "110px", "110px", "40px", "40px", "135px"]);
								group_10.setLayout(formLayout_7);
								(function(container){
									var group_11 = new cpr.controls.Container();
									var formLayout_8 = new cpr.controls.layouts.FormLayout();
									formLayout_8.scrollable = false;
									formLayout_8.topMargin = "0px";
									formLayout_8.rightMargin = "0px";
									formLayout_8.bottomMargin = "0px";
									formLayout_8.leftMargin = "0px";
									formLayout_8.horizontalSpacing = "20px";
									formLayout_8.verticalSpacing = "5px";
									formLayout_8.setColumns(["120px", "180px", "1fr"]);
									formLayout_8.setRows(["40px", "30px", "30px"]);
									group_11.setLayout(formLayout_8);
									(function(container){
										var output_3 = new cpr.controls.Output();
										output_3.value = " - 비밀번호";
										output_3.style.css({
											"background-color" : "#F0F0F0",
											"border-radius" : "5px",
											"font-weight" : "bolder",
											"font-size" : "15px"
										});
										container.addChild(output_3, {
											"colIndex": 0,
											"rowIndex": 0,
											"colSpan": 1,
											"rowSpan": 3
										});
										var inputBox_3 = new cpr.controls.InputBox("ipbPassword1");
										inputBox_3.secret = true;
										inputBox_3.showClearButton = false;
										inputBox_3.maxLength = 25;
										inputBox_3.spellCheck = false;
										inputBox_3.style.css({
											"border-radius" : "5px",
											"font-size" : "15px"
										});
										inputBox_3.bind("value").toDataSet(app.lookup("ds_profile"), "memberPassword", 0);
										if(typeof onIpbPassword1Keyup == "function") {
											inputBox_3.addEventListener("keyup", onIpbPassword1Keyup);
										}
										container.addChild(inputBox_3, {
											"colIndex": 1,
											"rowIndex": 0
										});
										var image_2 = new cpr.controls.Image("imgPswdChk1");
										container.addChild(image_2, {
											"colIndex": 2,
											"rowIndex": 0
										});
										var output_4 = new cpr.controls.Output("opbCheckPassword");
										output_4.value = "";
										container.addChild(output_4, {
											"colIndex": 1,
											"rowIndex": 1,
											"colSpan": 2,
											"rowSpan": 1
										});
										var output_5 = new cpr.controls.Output();
										output_5.value = "❈ 비밀번호는 1자 이상~25자 이하입니다.";
										output_5.style.css({
											"font-size" : "10px"
										});
										container.addChild(output_5, {
											"colIndex": 1,
											"rowIndex": 2,
											"colSpan": 2,
											"rowSpan": 1
										});
									})(group_11);
									container.addChild(group_11, {
										"colIndex": 0,
										"rowIndex": 0,
										"colSpan": 2,
										"rowSpan": 1
									});
									var group_12 = new cpr.controls.Container();
									var formLayout_9 = new cpr.controls.layouts.FormLayout();
									formLayout_9.scrollable = false;
									formLayout_9.topMargin = "0px";
									formLayout_9.rightMargin = "0px";
									formLayout_9.bottomMargin = "0px";
									formLayout_9.leftMargin = "0px";
									formLayout_9.horizontalSpacing = "20px";
									formLayout_9.verticalSpacing = "5px";
									formLayout_9.setColumns(["120px", "180px", "1fr"]);
									formLayout_9.setRows(["40px", "30px", "30px"]);
									group_12.setLayout(formLayout_9);
									(function(container){
										var output_6 = new cpr.controls.Output();
										output_6.value = " - 비밀번호 확인";
										output_6.style.css({
											"background-color" : "#F0F0F0",
											"border-radius" : "5px",
											"font-weight" : "bolder",
											"font-size" : "15px"
										});
										container.addChild(output_6, {
											"colIndex": 0,
											"rowIndex": 0,
											"colSpan": 1,
											"rowSpan": 3
										});
										var inputBox_4 = new cpr.controls.InputBox("ipbPassword2");
										inputBox_4.secret = true;
										inputBox_4.showClearButton = false;
										inputBox_4.maxLength = 25;
										inputBox_4.spellCheck = false;
										inputBox_4.style.css({
											"border-radius" : "5px",
											"font-size" : "15px"
										});
										if(typeof onIpbPassword2Keyup == "function") {
											inputBox_4.addEventListener("keyup", onIpbPassword2Keyup);
										}
										container.addChild(inputBox_4, {
											"colIndex": 1,
											"rowIndex": 0
										});
										var image_3 = new cpr.controls.Image("imgPswdChk2");
										container.addChild(image_3, {
											"colIndex": 2,
											"rowIndex": 0
										});
										var output_7 = new cpr.controls.Output("opbCheckPassword2");
										output_7.value = "";
										container.addChild(output_7, {
											"colIndex": 1,
											"rowIndex": 1,
											"colSpan": 2,
											"rowSpan": 1
										});
										var output_8 = new cpr.controls.Output();
										output_8.value = "❈ 비밀번호는 1자 이상~25자 이하입니다.";
										output_8.style.css({
											"font-size" : "10px"
										});
										container.addChild(output_8, {
											"colIndex": 1,
											"rowIndex": 2,
											"colSpan": 2,
											"rowSpan": 1
										});
									})(group_12);
									container.addChild(group_12, {
										"colIndex": 0,
										"rowIndex": 1,
										"colSpan": 2,
										"rowSpan": 1
									});
									var group_13 = new cpr.controls.Container();
									var formLayout_10 = new cpr.controls.layouts.FormLayout();
									formLayout_10.scrollable = false;
									formLayout_10.topMargin = "0px";
									formLayout_10.rightMargin = "0px";
									formLayout_10.bottomMargin = "0px";
									formLayout_10.leftMargin = "0px";
									formLayout_10.horizontalSpacing = "20px";
									formLayout_10.verticalSpacing = "5px";
									formLayout_10.setColumns(["120px", "180px", "1fr"]);
									formLayout_10.setRows(["40px", "30px", "30px"]);
									group_13.setLayout(formLayout_10);
									(function(container){
										var output_9 = new cpr.controls.Output();
										output_9.value = " - 닉네임";
										output_9.style.css({
											"background-color" : "#F0F0F0",
											"font-weight" : "bolder",
											"font-size" : "15px",
											"border-top-style" : "none"
										});
										container.addChild(output_9, {
											"colIndex": 0,
											"rowIndex": 0,
											"colSpan": 1,
											"rowSpan": 3
										});
										var inputBox_5 = new cpr.controls.InputBox("ipbNick");
										inputBox_5.showClearButton = true;
										inputBox_5.lengthUnit = "utf8";
										inputBox_5.maxLength = 24;
										inputBox_5.spellCheck = false;
										inputBox_5.style.css({
											"border-radius" : "5px",
											"font-size" : "15px"
										});
										inputBox_5.bind("value").toDataSet(app.lookup("ds_profile"), "memberNick", 0);
										if(typeof onIpbNickKeyup == "function") {
											inputBox_5.addEventListener("keyup", onIpbNickKeyup);
										}
										container.addChild(inputBox_5, {
											"colIndex": 1,
											"rowIndex": 0
										});
										var output_10 = new cpr.controls.Output("opbCheckNick");
										output_10.value = "";
										container.addChild(output_10, {
											"colIndex": 1,
											"rowIndex": 1,
											"colSpan": 2,
											"rowSpan": 1
										});
										var output_11 = new cpr.controls.Output();
										output_11.value = "❈ 닉네임은 1자 이상~8자 이하입니다.";
										output_11.style.css({
											"font-size" : "10px"
										});
										container.addChild(output_11, {
											"colIndex": 1,
											"rowIndex": 2,
											"colSpan": 2,
											"rowSpan": 1
										});
										var image_4 = new cpr.controls.Image("imgNickChk");
										container.addChild(image_4, {
											"colIndex": 2,
											"rowIndex": 0
										});
									})(group_13);
									container.addChild(group_13, {
										"colIndex": 0,
										"rowIndex": 2,
										"colSpan": 2,
										"rowSpan": 1
									});
									var output_12 = new cpr.controls.Output();
									output_12.value = " - 생년월일";
									output_12.style.css({
										"background-color" : "#F0F0F0",
										"border-radius" : "5px",
										"font-weight" : "bolder",
										"font-size" : "15px"
									});
									container.addChild(output_12, {
										"colIndex": 0,
										"rowIndex": 3
									});
									var output_13 = new cpr.controls.Output();
									output_13.value = " - 핸드폰 번호";
									output_13.style.css({
										"background-color" : "#F0F0F0",
										"border-radius" : "5px",
										"font-weight" : "bolder",
										"font-size" : "15px"
									});
									container.addChild(output_13, {
										"colIndex": 0,
										"rowIndex": 4
									});
									var output_14 = new cpr.controls.Output();
									output_14.value = " - 주소";
									output_14.style.css({
										"background-color" : "#F0F0F0",
										"border-radius" : "5px",
										"font-weight" : "bolder",
										"font-size" : "15px",
										"font-family" : "'fonts/PureunJeonnam.ttf' , 'Malgun Gothic' , sans-serif"
									});
									container.addChild(output_14, {
										"colIndex": 0,
										"rowIndex": 5
									});
									var dateInput_1 = new cpr.controls.DateInput("ipbBirthday");
									dateInput_1.spinButton = true;
									dateInput_1.showClearButton = true;
									dateInput_1.style.setClasses(["cl-dateinput-register", "single-datepicker"]);
									dateInput_1.style.css({
										"border-radius" : "5px",
										"font-size" : "15px"
									});
									dateInput_1.bind("value").toDataSet(app.lookup("ds_profile"), "memberBirthday", 0);
									container.addChild(dateInput_1, {
										"colIndex": 1,
										"rowIndex": 3
									});
									var maskEditor_1 = new cpr.controls.MaskEditor("ipbPhone");
									maskEditor_1.mask = "000-0000-0000";
									maskEditor_1.showClearButton = true;
									maskEditor_1.style.css({
										"border-radius" : "5px",
										"font-size" : "15px"
									});
									maskEditor_1.bind("value").toDataSet(app.lookup("ds_profile"), "memberPhone", 0);
									container.addChild(maskEditor_1, {
										"colIndex": 1,
										"rowIndex": 4
									});
									var group_14 = new cpr.controls.Container();
									var formLayout_11 = new cpr.controls.layouts.FormLayout();
									formLayout_11.scrollable = false;
									formLayout_11.topMargin = "0px";
									formLayout_11.rightMargin = "0px";
									formLayout_11.bottomMargin = "0px";
									formLayout_11.leftMargin = "0px";
									formLayout_11.horizontalSpacing = "10px";
									formLayout_11.verticalSpacing = "15px";
									formLayout_11.setColumns(["128px", "100px"]);
									formLayout_11.setRows(["35px", "35px", "35px"]);
									group_14.setLayout(formLayout_11);
									(function(container){
										var button_6 = new cpr.controls.Button("btnPostcode");
										button_6.value = "주소 검색";
										button_6.style.css({
											"font-size" : "15px"
										});
										if(typeof onBtnPostcodeClick == "function") {
											button_6.addEventListener("click", onBtnPostcodeClick);
										}
										container.addChild(button_6, {
											"colIndex": 1,
											"rowIndex": 0
										});
										var maskEditor_2 = new cpr.controls.MaskEditor("postCode");
										maskEditor_2.mask = "00000";
										maskEditor_2.style.css({
											"border-radius" : "5px"
										});
										maskEditor_2.bind("value").toDataSet(app.lookup("ds_profile"), "memberPostcode", 0);
										container.addChild(maskEditor_2, {
											"colIndex": 0,
											"rowIndex": 0
										});
										var inputBox_6 = new cpr.controls.InputBox("address");
										inputBox_6.lengthUnit = "utf8";
										inputBox_6.maxLength = 30;
										inputBox_6.style.css({
											"border-radius" : "5px"
										});
										inputBox_6.bind("value").toDataSet(app.lookup("ds_profile"), "memberAddress", 0);
										container.addChild(inputBox_6, {
											"colIndex": 0,
											"rowIndex": 1,
											"colSpan": 2,
											"rowSpan": 1
										});
										var inputBox_7 = new cpr.controls.InputBox("detailAddress");
										inputBox_7.lengthUnit = "utf8";
										inputBox_7.maxLength = 30;
										inputBox_7.style.css({
											"border-radius" : "5px"
										});
										inputBox_7.bind("value").toDataSet(app.lookup("ds_profile"), "memberAddressDetail", 0);
										container.addChild(inputBox_7, {
											"colIndex": 0,
											"rowIndex": 2,
											"colSpan": 2,
											"rowSpan": 1
										});
									})(group_14);
									container.addChild(group_14, {
										"colIndex": 1,
										"rowIndex": 5
									});
								})(group_10);
								container.addChild(group_10, {
									"colIndex": 1,
									"rowIndex": 0
								});
							})(group_4);
							tabItem_1.content = group_4;
							return tabItem_1;
						})(tabFolder_1);
						tabFolder_1.addTabItem(tabItem_1);
						tabFolder_1.setSelectedTabItem(tabItem_1);
						container.addChild(tabFolder_1, {
							positions: [
								{
									"media": "all and (min-width: 1920px)",
									"width": "820px",
									"height": "740px",
									"left": "calc(50% - 410px)",
									"top": "calc(50% - 370px)"
								}, 
								{
									"media": "all and (min-width: 1024px) and (max-width: 1919px)",
									"width": "820px",
									"height": "740px",
									"left": "calc(50% - 410px)",
									"top": "calc(50% - 370px)"
								}, 
								{
									"media": "all and (min-width: 500px) and (max-width: 1023px)",
									"width": "400px",
									"height": "740px",
									"left": "calc(50% - 200px)",
									"top": "calc(50% - 370px)"
								}, 
								{
									"media": "all and (max-width: 499px)",
									"width": "280px",
									"height": "740px",
									"left": "calc(50% - 140px)",
									"top": "calc(50% - 370px)"
								}
							]
						});
					})(group_3);
					container.addChild(group_3, {
						positions: [
							{
								"media": "all and (min-width: 1920px)",
								"width": "820px",
								"height": "740px",
								"left": "calc(50% - 410px)",
								"top": "calc(50% - 370px)"
							}, 
							{
								"media": "all and (min-width: 1024px) and (max-width: 1919px)",
								"width": "820px",
								"height": "740px",
								"left": "calc(50% - 410px)",
								"top": "calc(50% - 370px)"
							}, 
							{
								"media": "all and (min-width: 500px) and (max-width: 1023px)",
								"width": "400px",
								"height": "740px",
								"left": "calc(50% - 200px)",
								"top": "calc(50% - 370px)"
							}, 
							{
								"media": "all and (max-width: 499px)",
								"width": "280px",
								"height": "740px",
								"left": "calc(50% - 140px)",
								"top": "calc(50% - 370px)"
							}
						]
					});
				})(group_2);
				container.addChild(group_2, {
					"width": "1880px",
					"height": "740px",
					"left": "calc(50% - 940px)",
					"top": "calc(50% - 370px)"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			if(typeof onBodyInit == "function"){
				app.addEventListener("init", onBodyInit);
			}
			if(typeof onBodyUnload == "function"){
				app.addEventListener("unload", onBodyUnload);
			}
		}
	});
	app.title = "myProfile";
	cpr.core.Platform.INSTANCE.register(app);
})();
