/*
 * App URI: mealkit/insertMealkit
 * Source Location: mealkit/insertMealkit.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.4584), Don't edit manually.
 */
(function() {
	var app = new cpr.core.App("mealkit/insertMealkit", { 
		onPrepare: function(loader) {
			loader.addCSS("theme/custom/member.part.css");
			loader.addCSS("theme/cleopatra-theme.css");
			loader.addCSS("theme/custom-theme.css");
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports) {
			var linker = {};
			// Start - User Script
			/************************************************
			 * insertMealkit.js
			 * Created at 2023. 8. 10. 오후 3:23:42.
			 *
			 * @author KOSTA
			 ************************************************/

			/*
			 * 루트 컨테이너에서 init 이벤트 발생 시 호출.
			 * 앱이 최초 구성될 때 발생하는 이벤트 입니다.
			 */
			function onBodyInit2(e){
				var sampleThr = e.control;
				var voResourceLoader = new cpr.core.ResourceLoader();
			    voResourceLoader.addScript("https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js").load().then(function(input) {
			    voResourceLoader.addScript("https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote.min.js").load().then(function(input) {
			            loaded = true;
			            app.lookup("sampleThr").redraw();
			        });
			    });
			}

			/*
			 * 쉘에서 load 이벤트 발생 시 호출.
			 * 쉘이 그려진 후 내용을 작성하는 이벤트.
			 */
			function onSampleThrLoad(e){
				/** 
			     * @type cpr.controls.UIControlShell
			     */
			    var sampleThr = e.control;
			    var content = e.content;

			    if (loaded) {
			        sampleThr.registerComponent("Editor", content);

			        //에디터를 넣어줄 div 생성
			        var editorDiv = document.createElement("div")
			        editorDiv.id = "summernote";
			        editorDiv.style.height = "100%";
			        editorDiv.style.width = "100%";

			        //생성한 에디터를 쉘 영역안에 넣어준다.
			        content.appendChild(editorDiv);

			        $('#summernote').summernote({
			            placeholder: '내용을 입력해주세요.',
			            tabsize: 1,
			            height: 200,
			            toolbar: [
			                ['style', ['style']],
			                ['font', ['bold', 'underline', 'clear']],
			                ['color', ['color']],
			                ['para', ['ul', 'ol', 'paragraph']],
			                ['table', ['table']],
			                ['insert', ['link', 'picture', 'video']],
			       
			            ]
			        });
			    }
				
			}


			/*
			 * "등록" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick2(e){
				var button = e.control;
				var vsOpt = app.lookup("sampleThr");
			  	vsOpt.value = $('#summernote').summernote('code');
			   	var message = vsOpt.value;
			   	var combo1 = app.lookup("cmb1").text;
			   	var combo2 = app.lookup("cmb2").text;
			   	var combo3 = app.lookup("cmb3").text;
			   	var combo4 = app.lookup("cmb4").text;
			   	
			   	var category = combo1+"/"+combo2+"/"+combo3;
			   	
			   	var dataMap = app.lookup("mealkitMap");
			   	dataMap.setValue("mealkitInfo", message);
			   	dataMap.setValue("mealkitCategory", category);
			   	dataMap.setValue("mealkitType", combo4);
			 	//유효성
			 	
			 	var name = app.lookup("ipb1");
			 	var ingredients = app.lookup("ipb2");
			 	var price = app.lookup("ipb3");
			 	var stock = app.lookup("ipb4");
			 	
			 	//
			 	var fileInput = app.lookup("file1");
				var file = fileInput.file;
				app.lookup("uploadImg").src = file;  	
				var submission = app.lookup("mealkitSub");
			 	//
			 	
			 	if(name.value == null || name.value.trim().length == 0){
			 		alert("밀키트 이름을 입력해주세요.");
			 		name.focus();
			 		return;
			 	}else if(combo1.length == 0 || combo2.length == 0 || combo3.length == 0){
			 		alert("카테고리를 반드시 선택해주세요.");
			 		return ;
			 		
			 	}else if(ingredients.value == null || ingredients.value.trim().length == 0){
			 		alert("밀키트 성분을 입력해주세요.");
			 		ingredients.focus();
			 		return;
			 	
			 	}else if(message == null || message.trim().length == 0){
			 		
			 		alert("밀키트 정보를 입력해주세요.");
			 		console.log("왜 안 먹지?");
			 		//e.preventDefault();
			 		return;
			 	}else if(price.value == null || price.value == ""){
			 		alert("밀키트 가격을 입력해주세요.");
			 		price.focus();
			 		return;
			 		
			 	}else if(Number(price.value) <= 0 || isNaN(price.value)){
			 		alert("밀키트 가격은 숫자만 입력이 가능합니다. 다시 확인해주세요.");
			 		price.value = "";
			 		price.focus();
			 		return;
			 	}else if(stock.value == null || stock.value == ""){
			 		alert("밀키트 수량을 입력해주세요.");
			 		stock.focus();
			 		return;
			 		
			 	}else if(Number(stock.value) <= 0 || isNaN(stock.value)){
			 		alert("밀키트 수량은 숫자만 입력이 가능합니다. 다시 확인해주세요");
			 		stock.value = "";
			 		stock.focus();
			 		return;
			 	}
			 	
			 		var initValue = "밀키트를 등록하시겠습니까?";
					app.openDialog("dialog/memberPopup", {
						width: 400, height: 300, headerClose: true
					}, function(dialog) {
						dialog.ready(function(dialogApp) {
							// 필요한 경우, 다이얼로그의 앱이 초기화 된 후, 앱 속성을 전달하십시오.
							dialogApp.initValue = initValue;
						});
					}).then(function(returnValue) {
						if (returnValue == true) {
							submission.addFileParameter("image", file);
							submission.send();
						}
					});
			 	
			 	
			// 	var fileInput = app.lookup("file1");
			//	var file = fileInput.file;
			//	app.lookup("uploadImg").src = file;
			// 	  	
			//
			//	var submission = app.lookup("mealkitSub");
			//	submission.addFileParameter("image", file);
			//	submission.send();
			   	
			}

			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출. done..
			 * 통신이 성공하면 발생합니다.
			 */
			function onMealkitSubSubmitSuccess(e){
				var mealkitSub = e.control;
				var mealkitNo = mealkitSub.getMetadata("result");
				alert("밀키트가 등록되었습니다.");
				//var dataMap = app.lookup("mealkitNo");
				//dataMap.setValue("mealkitNo", metadata);
				var url = '/mealkitDetail/'+mealkitNo; //상세 페이지 url
				window.location.href= url;
					
				}

			/*
			 * "취소" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(e){
				var button = e.control;
				window.location.href= "/"; //추후 리스트 페이지로 바꿔야함.
			}

			/*
			 * 파일 인풋에서 value-change 이벤트 발생 시 호출.
			 * FileInput의 value를 변경하여 변경된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onFile1ValueChange(e){
				var file1 = e.control;
				var image = app.lookup("uploadImg");
				var fileInput = app.lookup("file1");
				if (fileInput.files && fileInput.files[0]) {
					var reader = new FileReader();
					reader.onload = function(e) {
						image.src = e.target.result;
					};
					
					reader.readAsDataURL(fileInput.files[0]);
				}
			}

			/*
			 * "X" 버튼(deleteImgBtn)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onDeleteImgBtnClick(e){
				var deleteImgBtn = e.control;
				var fileInput = app.lookup("file1");
				var image = app.lookup("uploadImg");
				fileInput.clear();
				image.src = "";
			}

			/*
			 * "취소" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick3(e){
				var button = e.control;
				var initValue = "작성된 사항은 반영되지 않습니다.\n취소하시겠습니까?";
					app.openDialog("dialog/memberPopup", {
						width: 400, height: 300, headerClose: true
					}, function(dialog) {
						dialog.ready(function(dialogApp) {
							// 필요한 경우, 다이얼로그의 앱이 초기화 된 후, 앱 속성을 전달하십시오.
							dialogApp.initValue = initValue;
						});
					}).then(function(returnValue) {
						if (returnValue == true) {
							window.location.href = "/mealkitList";
						}
					});
			};
			// End - User Script
			
			// Header
			var dataMap_1 = new cpr.data.DataMap("mealkitMap");
			dataMap_1.parseData({
				"columns" : [
					{"name": "mealkitName"},
					{"name": "mealkitInfo"},
					{"name": "mealkitIngredients"},
					{"name": "mealkitPrice"},
					{"name": "mealkitInventory"},
					{"name": "mealkitCategory"},
					{"name": "mealkitType"}
				]
			});
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("mealkitNo");
			dataMap_2.parseData({
				"columns" : [{
					"name": "mealkitNo",
					"dataType": "number"
				}]
			});
			app.register(dataMap_2);
			var submission_1 = new cpr.protocols.Submission("mealkitSub");
			submission_1.action = "/insertMealkit";
			submission_1.addRequestData(dataMap_1);
			if(typeof onMealkitSubReceive == "function") {
				submission_1.addEventListener("receive", onMealkitSubReceive);
			}
			if(typeof onMealkitSubSubmitLoadProgress == "function") {
				submission_1.addEventListener("submit-load-progress", onMealkitSubSubmitLoadProgress);
			}
			if(typeof onMealkitSubSubmitSuccess == "function") {
				submission_1.addEventListener("submit-success", onMealkitSubSubmitSuccess);
			}
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("mealkitNoSub");
			submission_2.action = "/mealkitDetail";
			submission_2.addRequestData(dataMap_2);
			app.register(submission_2);
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"font-family" : "푸른전남 Medium",
				"width" : "100%",
				"height" : "100%"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			group_1.style.css({
				"background-color" : "#F4FAEC",
				"background-size" : "cover",
				"background-image" : "url('theme/images/common/bgimg3_1920.png')",
				"background-position" : "center"
			});
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var group_2 = new cpr.controls.Container();
				group_2.style.css({
					"background-color" : "#FFFFFF",
					"border-radius" : "20px"
				});
				var xYLayout_3 = new cpr.controls.layouts.XYLayout();
				xYLayout_3.scrollable = false;
				group_2.setLayout(xYLayout_3);
				(function(container){
					var group_3 = new cpr.controls.Container();
					group_3.style.css({
						"background-color" : "#f9f9f9",
						"background-image" : "none"
					});
					var xYLayout_4 = new cpr.controls.layouts.XYLayout();
					group_3.setLayout(xYLayout_4);
					(function(container){
						var output_1 = new cpr.controls.Output();
						output_1.value = "밀키트 등록";
						output_1.style.css({
							"color" : "#0CA44E",
							"font-weight" : "bolder",
							"font-size" : "20px",
							"font-style" : "normal"
						});
						container.addChild(output_1, {
							"top": "30px",
							"left": "20px",
							"width": "122px",
							"height": "31px"
						});
					})(group_3);
					container.addChild(group_3, {
						"top": "39px",
						"width": "861px",
						"height": "81px",
						"left": "calc(50% - 430px)"
					});
					var group_4 = new cpr.controls.Container();
					var xYLayout_5 = new cpr.controls.layouts.XYLayout();
					group_4.setLayout(xYLayout_5);
					(function(container){
						var output_2 = new cpr.controls.Output();
						output_2.value = "밀키트 이름";
						output_2.style.css({
							"color" : "#0CA44E",
							"font-size" : "15px",
							"text-align" : "center"
						});
						container.addChild(output_2, {
							"top": "31px",
							"left": "53px",
							"width": "100px",
							"height": "20px"
						});
						var inputBox_1 = new cpr.controls.InputBox("ipb1");
						inputBox_1.style.css({
							"background-color" : "#F9F9F9"
						});
						inputBox_1.bind("value").toDataMap(app.lookup("mealkitMap"), "mealkitName");
						container.addChild(inputBox_1, {
							"top": "20px",
							"left": "175px",
							"width": "463px",
							"height": "41px"
						});
					})(group_4);
					container.addChild(group_4, {
						"top": "130px",
						"left": "77px",
						"width": "861px",
						"height": "71px"
					});
					var group_5 = new cpr.controls.Container();
					var xYLayout_6 = new cpr.controls.layouts.XYLayout();
					group_5.setLayout(xYLayout_6);
					(function(container){
						var output_3 = new cpr.controls.Output();
						output_3.value = "밀키트 성분";
						output_3.style.css({
							"color" : "#0CA44E",
							"font-size" : "15px",
							"text-align" : "center"
						});
						container.addChild(output_3, {
							"top": "27px",
							"left": "51px",
							"width": "100px",
							"height": "20px"
						});
						var textArea_1 = new cpr.controls.TextArea("ipb2");
						textArea_1.bind("value").toDataMap(app.lookup("mealkitMap"), "mealkitIngredients");
						container.addChild(textArea_1, {
							"top": "9px",
							"left": "173px",
							"width": "641px",
							"height": "55px"
						});
					})(group_5);
					container.addChild(group_5, {
						"top": "234px",
						"left": "77px",
						"width": "861px",
						"height": "71px"
					});
					var group_6 = new cpr.controls.Container();
					var xYLayout_7 = new cpr.controls.layouts.XYLayout();
					group_6.setLayout(xYLayout_7);
					(function(container){
						var output_4 = new cpr.controls.Output();
						output_4.value = "카테고리";
						output_4.style.css({
							"color" : "#0CA44E",
							"font-size" : "15px",
							"text-align" : "center"
						});
						container.addChild(output_4, {
							"top": "8px",
							"left": "52px",
							"width": "100px",
							"height": "20px"
						});
						var comboBox_1 = new cpr.controls.ComboBox("cmb1");
						comboBox_1.placeholder = "-종류-";
						comboBox_1.style.css({
							"background-color" : "#F9F9F9",
							"text-align" : "center"
						});
						(function(comboBox_1){
							comboBox_1.addItem(new cpr.controls.Item("밑반찬", "밑반찬"));
							comboBox_1.addItem(new cpr.controls.Item("메인반찬", "메인반찬"));
							comboBox_1.addItem(new cpr.controls.Item("국/탕", "국/탕"));
							comboBox_1.addItem(new cpr.controls.Item("찌개", "찌개"));
							comboBox_1.addItem(new cpr.controls.Item("디저트", "디저트"));
							comboBox_1.addItem(new cpr.controls.Item("면/만두", "면/만두"));
							comboBox_1.addItem(new cpr.controls.Item("밥/죽/떡", "밥/죽/떡"));
							comboBox_1.addItem(new cpr.controls.Item("퓨전", "퓨전"));
							comboBox_1.addItem(new cpr.controls.Item("김차/장류", "김차/장류"));
							comboBox_1.addItem(new cpr.controls.Item("양념/소스/잼", "양념/소스/잼"));
							comboBox_1.addItem(new cpr.controls.Item("양식", "양식"));
							comboBox_1.addItem(new cpr.controls.Item("샐러드", "샐러드"));
							comboBox_1.addItem(new cpr.controls.Item("스프", "스프"));
							comboBox_1.addItem(new cpr.controls.Item("빵", "빵"));
							comboBox_1.addItem(new cpr.controls.Item("차/음료/술", "차/음료/술"));
							comboBox_1.addItem(new cpr.controls.Item("기타", "기타"));
						})(comboBox_1);
						if(typeof onCmb1SelectionChange == "function") {
							comboBox_1.addEventListener("selection-change", onCmb1SelectionChange);
						}
						container.addChild(comboBox_1, {
							"top": "8px",
							"left": "174px",
							"width": "100px",
							"height": "20px"
						});
						var comboBox_2 = new cpr.controls.ComboBox("cmb2");
						comboBox_2.placeholder = "-재료-";
						comboBox_2.style.css({
							"background-color" : "#F9F9F9",
							"text-align" : "center"
						});
						(function(comboBox_2){
							comboBox_2.addItem(new cpr.controls.Item("소고기", "소고기"));
							comboBox_2.addItem(new cpr.controls.Item("돼지고기", "돼지고기"));
							comboBox_2.addItem(new cpr.controls.Item("닭고기", "닭고기"));
							comboBox_2.addItem(new cpr.controls.Item("육류", "육류"));
							comboBox_2.addItem(new cpr.controls.Item("채소류", "채소류"));
							comboBox_2.addItem(new cpr.controls.Item("해물류", "해물류"));
							comboBox_2.addItem(new cpr.controls.Item("달걀/유제품", "달걀/유제품"));
							comboBox_2.addItem(new cpr.controls.Item("가공식품류", "가공식품류"));
							comboBox_2.addItem(new cpr.controls.Item("밀가루", "밀가루"));
							comboBox_2.addItem(new cpr.controls.Item("건어물류", "건어물류"));
							comboBox_2.addItem(new cpr.controls.Item("쌀", "쌀"));
							comboBox_2.addItem(new cpr.controls.Item("버섯류", "버섯류"));
							comboBox_2.addItem(new cpr.controls.Item("과일류", "과일류"));
							comboBox_2.addItem(new cpr.controls.Item("콩/견과류", "콩/견과류"));
							comboBox_2.addItem(new cpr.controls.Item("곡류", "곡류"));
							comboBox_2.addItem(new cpr.controls.Item("기타", "기타"));
						})(comboBox_2);
						container.addChild(comboBox_2, {
							"top": "8px",
							"left": "284px",
							"width": "100px",
							"height": "20px"
						});
						var comboBox_3 = new cpr.controls.ComboBox("cmb3");
						comboBox_3.placeholder = "-방법-";
						comboBox_3.style.css({
							"background-color" : "#F9F9F9",
							"text-align" : "center"
						});
						(function(comboBox_3){
							comboBox_3.addItem(new cpr.controls.Item("볶음", "볶음"));
							comboBox_3.addItem(new cpr.controls.Item("끓이기", "끓이기"));
							comboBox_3.addItem(new cpr.controls.Item("부침", "부침"));
							comboBox_3.addItem(new cpr.controls.Item("조림", "조림"));
							comboBox_3.addItem(new cpr.controls.Item("무침", "무침"));
							comboBox_3.addItem(new cpr.controls.Item("비빔", "비빔"));
							comboBox_3.addItem(new cpr.controls.Item("절임", "절임"));
							comboBox_3.addItem(new cpr.controls.Item("튀김", "튀김"));
							comboBox_3.addItem(new cpr.controls.Item("삶기", "삶기"));
							comboBox_3.addItem(new cpr.controls.Item("굽기", "굽기"));
							comboBox_3.addItem(new cpr.controls.Item("데치기", "데치기"));
							comboBox_3.addItem(new cpr.controls.Item("회", "회"));
							comboBox_3.addItem(new cpr.controls.Item("기타", "기타"));
						})(comboBox_3);
						container.addChild(comboBox_3, {
							"top": "8px",
							"left": "394px",
							"width": "100px",
							"height": "20px"
						});
						var comboBox_4 = new cpr.controls.ComboBox("cmb4");
						comboBox_4.placeholder = "-선택-";
						comboBox_4.style.css({
							"text-align" : "center"
						});
						(function(comboBox_4){
							comboBox_4.addItem(new cpr.controls.Item("한식", "한식"));
							comboBox_4.addItem(new cpr.controls.Item("양식", "양식"));
							comboBox_4.addItem(new cpr.controls.Item("중식/일식", "중식/일식"));
							comboBox_4.addItem(new cpr.controls.Item("분식", "분식"));
							comboBox_4.addItem(new cpr.controls.Item("동남아", "동남아"));
							comboBox_4.addItem(new cpr.controls.Item("에어프라이어", "에어프라이어"));
						})(comboBox_4);
						container.addChild(comboBox_4, {
							"top": "8px",
							"left": "504px",
							"width": "100px",
							"height": "20px"
						});
					})(group_6);
					container.addChild(group_6, {
						"top": "200px",
						"left": "77px",
						"width": "861px",
						"height": "35px"
					});
					var group_7 = new cpr.controls.Container();
					var xYLayout_8 = new cpr.controls.layouts.XYLayout();
					group_7.setLayout(xYLayout_8);
					(function(container){
						var output_5 = new cpr.controls.Output();
						output_5.value = "가격";
						output_5.style.css({
							"color" : "#0CA44E",
							"font-size" : "15px",
							"text-align" : "center"
						});
						container.addChild(output_5, {
							"top": "20px",
							"left": "46px",
							"width": "100px",
							"height": "20px"
						});
						var output_6 = new cpr.controls.Output();
						output_6.value = "남은 수량";
						output_6.style.css({
							"color" : "#0CA44E",
							"font-size" : "15px",
							"text-align" : "center"
						});
						container.addChild(output_6, {
							"top": "20px",
							"left": "483px",
							"width": "100px",
							"height": "20px"
						});
						var inputBox_2 = new cpr.controls.InputBox("ipb3");
						inputBox_2.style.css({
							"background-color" : "#F9F9F9"
						});
						inputBox_2.bind("value").toDataMap(app.lookup("mealkitMap"), "mealkitPrice");
						container.addChild(inputBox_2, {
							"top": "20px",
							"left": "176px",
							"width": "165px",
							"height": "20px"
						});
						var inputBox_3 = new cpr.controls.InputBox("ipb4");
						inputBox_3.style.css({
							"background-color" : "#F9F9F9"
						});
						inputBox_3.bind("value").toDataMap(app.lookup("mealkitMap"), "mealkitInventory");
						container.addChild(inputBox_3, {
							"top": "20px",
							"left": "603px",
							"width": "165px",
							"height": "20px"
						});
					})(group_7);
					container.addChild(group_7, {
						"top": "750px",
						"left": "77px",
						"width": "861px",
						"height": "50px"
					});
					var group_8 = new cpr.controls.Container();
					var xYLayout_9 = new cpr.controls.layouts.XYLayout();
					group_8.setLayout(xYLayout_9);
					(function(container){
						var output_7 = new cpr.controls.Output();
						output_7.value = "밀키트 소개";
						output_7.style.css({
							"color" : "#0CA44E",
							"font-size" : "15px",
							"text-align" : "center"
						});
						container.addChild(output_7, {
							"top": "46px",
							"left": "54px",
							"width": "100px",
							"height": "20px"
						});
						var uIControlShell_1 = new cpr.controls.UIControlShell("sampleThr");
						if(typeof onSampleThrLoad == "function") {
							uIControlShell_1.addEventListener("load", onSampleThrLoad);
						}
						container.addChild(uIControlShell_1, {
							"top": "8px",
							"left": "174px",
							"width": "681px",
							"height": "267px"
						});
					})(group_8);
					container.addChild(group_8, {
						"top": "454px",
						"left": "77px",
						"width": "861px",
						"height": "285px"
					});
					var button_1 = new cpr.controls.Button();
					button_1.value = "등록";
					button_1.style.setClasses([".cl-button", "mealkitbtn"]);
					button_1.style.css({
						"background-color" : "#0ca44e",
						"color" : "white",
						"font-size" : "17px",
						"background-image" : "none"
					});
					if(typeof onButtonClick2 == "function") {
						button_1.addEventListener("click", onButtonClick2);
					}
					container.addChild(button_1, {
						"top": "825px",
						"left": "395px",
						"width": "104px",
						"height": "34px"
					});
					var button_2 = new cpr.controls.Button();
					button_2.value = "취소";
					button_2.style.setClasses([".cl-button", "mealkitbtn"]);
					button_2.style.css({
						"background-color" : "#0ca44e",
						"color" : "white",
						"font-size" : "17px",
						"background-image" : "none"
					});
					if(typeof onButtonClick3 == "function") {
						button_2.addEventListener("click", onButtonClick3);
					}
					container.addChild(button_2, {
						"top": "825px",
						"left": "509px",
						"width": "111px",
						"height": "34px"
					});
					var group_9 = new cpr.controls.Container();
					var xYLayout_10 = new cpr.controls.layouts.XYLayout();
					group_9.setLayout(xYLayout_10);
					(function(container){
						var fileInput_1 = new cpr.controls.FileInput("file1");
						fileInput_1.placeholder = "클릭후 파일 업로드해주세요.";
						if(typeof onFile1ValueChange == "function") {
							fileInput_1.addEventListener("value-change", onFile1ValueChange);
						}
						container.addChild(fileInput_1, {
							"top": "2px",
							"left": "173px",
							"width": "368px",
							"height": "126px"
						});
						var image_1 = new cpr.controls.Image("uploadImg");
						container.addChild(image_1, {
							"top": "2px",
							"left": "551px",
							"width": "304px",
							"height": "126px"
						});
						var output_8 = new cpr.controls.Output();
						output_8.value = "파일";
						output_8.style.css({
							"color" : "#0CA44E",
							"text-align" : "center"
						});
						container.addChild(output_8, {
							"top": "46px",
							"left": "52px",
							"width": "100px",
							"height": "20px"
						});
						var button_3 = new cpr.controls.Button("deleteImgBtn");
						button_3.value = "X";
						button_3.style.css({
							"color" : "black"
						});
						if(typeof onDeleteImgBtnClick == "function") {
							button_3.addEventListener("click", onDeleteImgBtnClick);
						}
						container.addChild(button_3, {
							"top": "2px",
							"left": "801px",
							"width": "23px",
							"height": "20px"
						});
					})(group_9);
					container.addChild(group_9, {
						"top": "315px",
						"left": "77px",
						"width": "861px",
						"height": "129px"
					});
				})(group_2);
				container.addChild(group_2, {
					"top": "20px",
					"width": "1014px",
					"height": "899px",
					"left": "calc(50% - 507px)"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "200px",
				"width": "1920px",
				"height": "976px",
				"left": "calc(50% - 960px)"
			});
			
			var userDefinedControl_1 = new udc.footer();
			container.addChild(userDefinedControl_1, {
				"top": "1175px",
				"width": "1920px",
				"height": "100px",
				"left": "calc(50% - 960px)"
			});
			
			var userDefinedControl_2 = new udc.myPageHeader();
			container.addChild(userDefinedControl_2, {
				"top": "1px",
				"width": "1920px",
				"height": "200px",
				"left": "calc(50% - 960px)"
			});
			if(typeof onBodyInit2 == "function"){
				app.addEventListener("init", onBodyInit2);
			}
		}
	});
	app.title = "insertMealkit";
	cpr.core.Platform.INSTANCE.register(app);
})();
