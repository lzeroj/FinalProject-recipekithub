/*
 * App URI: mealkit/mealkitList
 * Source Location: mealkit/mealkitList.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.4584), Don't edit manually.
 */
(function() {
	var app = new cpr.core.App("mealkit/mealkitList", { 
		onPrepare: function(loader) {
			loader.addCSS("theme/cleopatra-theme.css");
			loader.addCSS("theme/controls/htmlobject.part.css");
			loader.addCSS("theme/custom-theme.css");
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports) {
			var linker = {};
			// Start - User Script
			/************************************************
			 * mealkitList.js
			 * Created at 2023. 8. 16. 오후 3:05:31.
			 *
			 * @author KOSTA
			 ************************************************/

			/*
			 * 루트 컨테이너에서 init 이벤트 발생 시 호출.
			 * 앱이 최초 구성될 때 발생하는 이벤트 입니다.
			 */
			function onBodyInit(e){
				var param = cpr.core.Platform.INSTANCE.getParameter("searchMealkit");
				console.log("param = " + param);
				var dataMap = app.lookup("meSearch");
				if(param != null && param != ""){
					app.lookup("headerUdc").searchValue = param;
					app.lookup("headerUdc").categoryValue = "밀키트";
					dataMap.setValue("searchMealkit", param);
				}
			}

			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(e){
				app.lookup("category").value = "전체";
				app.lookup("ingre").value = "전체";
				app.lookup("way").value = "전체";
				app.lookup("sort").value = "최신순";
				app.lookup("mealkitBoardList").send();
				
				
				var mealkitList = cpr.core.Platform.INSTANCE.getParameter("mealkitList");
				var mealkitStarList = cpr.core.Platform.INSTANCE.getParameter("mealkitStarList");
				var commentCount = cpr.core.Platform.INSTANCE.getParameter("commentCount");
				var mealkitAllList = cpr.core.Platform.INSTANCE.getParameter("mealkitAllList");
				console.log("ㅌㅌㅌ" + mealkitAllList.length);
				//console.log("mealkitMap =" + mealkitMap);
				var email = cpr.core.Platform.INSTANCE.getParameter("member");
				console.log("email = " + email);
				if(email != "guest"){
					var button = app.lookup("insertBtn");
					button.visible = true;
					button.redraw();
				}
				
				var cnt = app.lookup("mealkitCnt");
				cnt.value = mealkitAllList.lengthmealkitAllList
				console.log("mealkitList = " + mealkitList);
				var container = app.lookup("grp");
				for (var i = 0; i < mealkitAllList.length; i++) {
					(function(index) {
						var mealkit = new udc.mealkitList();
						mealkit.img = "/upload/mealkit/" + mealkitAllList[i].mealkitImage;
						console.log(mealkitAllList.img);
						mealkit.hits = mealkitAllList[i].mealkitBoardHits;
						mealkit.nick = mealkitAllList[i].memberVO.memberNick;
						mealkit.title = mealkitAllList[i].mealkitName;
						mealkit.star = mealkitStarList[i];
						mealkit.count = "("+commentCount[i]+")";
						container.addChild(mealkit, {
							height: "250px",
							width: "230px",
							autoSize: "both"
						});
						mealkit.addEventListener("imgClick", function(e) {
							window.location.href = "/mealkitDetail/" + mealkitAllList[index].mealkitNo;
						});
					})(i);
				}
				

			//	var cnt = app.lookup("mealkitCnt");
			//	cnt.value = mealkitList.length;
			//	console.log("mealkitList = " + mealkitList);
			//	var container = app.lookup("grp");
			//	for (var i = 0; i < mealkitList.length; i++) {
			//		(function(index) {
			//			var mealkit = new udc.mealkitList();
			//			mealkit.img = "/upload/mealkit/" + mealkitList[i].mealkitImage;
			//			console.log(mealkitList.img);
			//			mealkit.hits = mealkitList[i].mealkitBoardHits;
			//			mealkit.nick = mealkitList[i].memberVO.memberNick;
			//			mealkit.title = mealkitList[i].mealkitName;
			//			mealkit.star = mealkitStarList[i];
			//			mealkit.count = "("+commentCount[i]+")";
			//			container.addChild(mealkit, {
			//				height: "250px",
			//				width: "230px",
			//				autoSize: "both"
			//			});
			//			mealkit.addEventListener("imgClick", function(e) {
			//				window.location.href = "/mealkitDetail/" + mealkitList[index].mealkitNo;
			//			});
			//		})(i);
			//	}


			}

			/*
			 * "밀키트 등록" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick2(e){
				var button = e.control;
				window.location.href='/insertMealkitForm';
			}

			/*
			 * 페이지 인덱서에서 selection-change 이벤트 발생 시 호출.
			 * Page index를 선택하여 선택된 페이지가 변경된 후에 발생하는 이벤트.
			 */
			function onPageIndexerSelectionChange(e){
				var pageIndexer = e.control;
				app.lookup("mealkitBoardList").send();
			}

			/*
			 * 내비게이션 바에서 selection-change 이벤트 발생 시 호출.
			 * 선택된 Item 값이 저장된 후에 발생하는 이벤트.
			 */
			function onSortSelectionChange(e){
				var sort = e.control;
				app.lookup("sort").value = "최신순";
				app.lookup("page").currentPageIndex = 1;
				app.lookup("mealkitBoardList").send();
			}

			/*
			 * 내비게이션 바에서 selection-change 이벤트 발생 시 호출.
			 * 선택된 Item 값이 저장된 후에 발생하는 이벤트.
			 */
			function onIngreSelectionChange(e){
				var ingre = e.control;
				app.lookup("sort").value = "최신순";
				app.lookup("page").currentPageIndex = 1;
				app.lookup("mealkitBoardList").send();
				
			}

			/*
			 * 내비게이션 바에서 selection-change 이벤트 발생 시 호출.
			 * 선택된 Item 값이 저장된 후에 발생하는 이벤트.
			 */
			function onWaySelectionChange(e){
				var way = e.control;
				app.lookup("sort").value = "최신순";
				app.lookup("page").currentPageIndex = 1;
				app.lookup("mealkitBoardList").send();
				
			}

			/*
			 * 내비게이션 바에서 selection-change 이벤트 발생 시 호출.
			 * 선택된 Item 값이 저장된 후에 발생하는 이벤트.
			 */
			function onCategorySelectionChange(e){
				var category = e.control;
				app.lookup("page").currentPageIndex = 1;
				app.lookup("mealkitBoardList").send();
			};
			// End - User Script
			
			// Header
			var dataMap_1 = new cpr.data.DataMap("meSearch");
			dataMap_1.parseData({
				"columns" : [{"name": "searchMealkit"}]
			});
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("mePage");
			dataMap_2.parseData({
				"columns" : [{
					"name": "pageNo",
					"defaultValue": "1"
				}]
			});
			app.register(dataMap_2);
			
			var dataMap_3 = new cpr.data.DataMap("meCategory");
			dataMap_3.parseData({
				"columns" : [
					{"name": "category"},
					{"name": "ingre"},
					{"name": "way"}
				]
			});
			app.register(dataMap_3);
			
			var dataMap_4 = new cpr.data.DataMap("meSort");
			dataMap_4.parseData({
				"columns" : [{"name": "sort"}]
			});
			app.register(dataMap_4);
			var submission_1 = new cpr.protocols.Submission("mealkitBoardList");
			submission_1.action = "/findMealkitList";
			submission_1.addRequestData(dataMap_1);
			submission_1.addRequestData(dataMap_2);
			submission_1.addRequestData(dataMap_3);
			submission_1.addRequestData(dataMap_4);
			app.register(submission_1);
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"height" : "100%"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			xYLayout_2.scrollable = false;
			group_1.setLayout(xYLayout_2);
			(function(container){
				var navigationBar_1 = new cpr.controls.NavigationBar("category");
				navigationBar_1.style.css({
					"font-size" : "13px"
				});
				navigationBar_1.bind("value").toDataMap(app.lookup("meCategory"), "category");
				(function(navigationBar_1){
					navigationBar_1.addItem(new cpr.controls.MenuItem("종류별", "종류별", null));
					navigationBar_1.addItem(new cpr.controls.MenuItem("전체", "전체", null));
					navigationBar_1.addItem(new cpr.controls.MenuItem("밑반찬", "밑반찬", null));
					navigationBar_1.addItem(new cpr.controls.MenuItem("메인반찬", "메인반찬", null));
					navigationBar_1.addItem(new cpr.controls.MenuItem("국/탕", "국/탕", null));
					navigationBar_1.addItem(new cpr.controls.MenuItem("찌개", "찌개", null));
					navigationBar_1.addItem(new cpr.controls.MenuItem("디저트", "디저트", null));
					navigationBar_1.addItem(new cpr.controls.MenuItem("면/만두", "면/만두", null));
					navigationBar_1.addItem(new cpr.controls.MenuItem("밥/죽/떡", "밥/죽/떡", null));
					navigationBar_1.addItem(new cpr.controls.MenuItem("퓨전", "퓨전", null));
					navigationBar_1.addItem(new cpr.controls.MenuItem("김치/장류", "김치/장류", null));
					navigationBar_1.addItem(new cpr.controls.MenuItem("양념/소스/잼", "양념/소스/잼", null));
					navigationBar_1.addItem(new cpr.controls.MenuItem("양식", "양식", null));
					navigationBar_1.addItem(new cpr.controls.MenuItem("샐러드", "샐러드", null));
					navigationBar_1.addItem(new cpr.controls.MenuItem("스프", "스프", null));
					navigationBar_1.addItem(new cpr.controls.MenuItem("빵", "빵", null));
					navigationBar_1.addItem(new cpr.controls.MenuItem("차/음료/술", "차/음료/술", null));
					navigationBar_1.addItem(new cpr.controls.MenuItem("기타", "기타", null));
				})(navigationBar_1);
				if(typeof onSortSelectionChange == "function") {
					navigationBar_1.addEventListener("selection-change", onSortSelectionChange);
				}
				container.addChild(navigationBar_1, {
					"top": "20px",
					"width": "1094px",
					"height": "36px",
					"left": "calc(50% - 547px)"
				});
				var navigationBar_2 = new cpr.controls.NavigationBar("ingre");
				navigationBar_2.bind("value").toDataMap(app.lookup("meCategory"), "ingre");
				(function(navigationBar_2){
					navigationBar_2.addItem(new cpr.controls.MenuItem("재료별", "재료별", null));
					navigationBar_2.addItem(new cpr.controls.MenuItem("전체", "전체", null));
					navigationBar_2.addItem(new cpr.controls.MenuItem("소고기", "소고기", null));
					navigationBar_2.addItem(new cpr.controls.MenuItem("돼지고기", "돼지고기", null));
					navigationBar_2.addItem(new cpr.controls.MenuItem("닭고기", "닭고기", null));
					navigationBar_2.addItem(new cpr.controls.MenuItem("육류", "육류", null));
					navigationBar_2.addItem(new cpr.controls.MenuItem("채소류", "채소류", null));
					navigationBar_2.addItem(new cpr.controls.MenuItem("해물류", "해물류", null));
					navigationBar_2.addItem(new cpr.controls.MenuItem("달걀/유제품", "달걀/유제품", null));
					navigationBar_2.addItem(new cpr.controls.MenuItem("가공식품류", "가공식품류", null));
					navigationBar_2.addItem(new cpr.controls.MenuItem("쌀", "쌀", null));
					navigationBar_2.addItem(new cpr.controls.MenuItem("밀가루", "밀가루", null));
					navigationBar_2.addItem(new cpr.controls.MenuItem("건어물류", "건어물류", null));
					navigationBar_2.addItem(new cpr.controls.MenuItem("과일류", "과일류", null));
					navigationBar_2.addItem(new cpr.controls.MenuItem("콩/견과류", "콩/견과류", null));
					navigationBar_2.addItem(new cpr.controls.MenuItem("곡류", "곡류", null));
					navigationBar_2.addItem(new cpr.controls.MenuItem("기타", "기타", null));
				})(navigationBar_2);
				if(typeof onIngreSelectionChange == "function") {
					navigationBar_2.addEventListener("selection-change", onIngreSelectionChange);
				}
				container.addChild(navigationBar_2, {
					"top": "55px",
					"width": "1081px",
					"height": "32px",
					"left": "calc(50% - 540px)"
				});
				var navigationBar_3 = new cpr.controls.NavigationBar("way");
				navigationBar_3.bind("value").toDataMap(app.lookup("meCategory"), "way");
				(function(navigationBar_3){
					navigationBar_3.addItem(new cpr.controls.MenuItem("방법별", "방법별", null));
					navigationBar_3.addItem(new cpr.controls.MenuItem("전체", "전체", null));
					navigationBar_3.addItem(new cpr.controls.MenuItem("볶음", "볶음", null));
					navigationBar_3.addItem(new cpr.controls.MenuItem("끓이기", "끓이기", null));
					navigationBar_3.addItem(new cpr.controls.MenuItem("부침", "부침", null));
					navigationBar_3.addItem(new cpr.controls.MenuItem("조림", "조림", null));
					navigationBar_3.addItem(new cpr.controls.MenuItem("무침", "무침", null));
					navigationBar_3.addItem(new cpr.controls.MenuItem("비빔", "비빔", null));
					navigationBar_3.addItem(new cpr.controls.MenuItem("찜", "찜", null));
					navigationBar_3.addItem(new cpr.controls.MenuItem("절임", "절임", null));
					navigationBar_3.addItem(new cpr.controls.MenuItem("튀김", "튀김", null));
					navigationBar_3.addItem(new cpr.controls.MenuItem("삶기", "삶기", null));
					navigationBar_3.addItem(new cpr.controls.MenuItem("굽기", "굽기", null));
					navigationBar_3.addItem(new cpr.controls.MenuItem("데치기", "데치기", null));
					navigationBar_3.addItem(new cpr.controls.MenuItem("회", "회", null));
					navigationBar_3.addItem(new cpr.controls.MenuItem("기타", "기타", null));
				})(navigationBar_3);
				if(typeof onWaySelectionChange == "function") {
					navigationBar_3.addEventListener("selection-change", onWaySelectionChange);
				}
				container.addChild(navigationBar_3, {
					"top": "86px",
					"width": "791px",
					"height": "40px",
					"left": "calc(50% - 395px)"
				});
				var group_2 = new cpr.controls.Container();
				group_2.style.css({
					"background-color" : "#FFFFFF"
				});
				var xYLayout_3 = new cpr.controls.layouts.XYLayout();
				group_2.setLayout(xYLayout_3);
				(function(container){
					var output_1 = new cpr.controls.Output();
					output_1.value = "총";
					output_1.style.css({
						"font-weight" : "bold"
					});
					container.addChild(output_1, {
						"top": "30px",
						"left": "45px",
						"width": "18px",
						"height": "20px"
					});
					var output_2 = new cpr.controls.Output();
					output_2.value = "개의 밀키트가 있습니다.";
					output_2.style.css({
						"font-weight" : "bold"
					});
					container.addChild(output_2, {
						"top": "30px",
						"left": "110px",
						"width": "247px",
						"height": "20px"
					});
					var output_3 = new cpr.controls.Output("mealkitCnt");
					output_3.value = "";
					output_3.style.css({
						"color" : "#0CA44E",
						"font-weight" : "bold",
						"font-size" : "18px",
						"text-align" : "center"
					});
					container.addChild(output_3, {
						"top": "20px",
						"left": "62px",
						"width": "49px",
						"height": "39px"
					});
					var navigationBar_4 = new cpr.controls.NavigationBar("sort");
					navigationBar_4.bind("value").toDataMap(app.lookup("meSort"), "sort");
					(function(navigationBar_4){
						navigationBar_4.addItem(new cpr.controls.MenuItem("최신순", "최신순", null));
						navigationBar_4.addItem(new cpr.controls.MenuItem("별점순", "별점순", null));
						navigationBar_4.addItem(new cpr.controls.MenuItem("조회수순", "조회수순", null));
					})(navigationBar_4);
					if(typeof onCategorySelectionChange == "function") {
						navigationBar_4.addEventListener("selection-change", onCategorySelectionChange);
					}
					container.addChild(navigationBar_4, {
						"top": "20px",
						"left": "775px",
						"width": "202px",
						"height": "40px"
					});
				})(group_2);
				container.addChild(group_2, {
					"top": "176px",
					"width": "984px",
					"height": "70px",
					"left": "calc(50% - 492px)"
				});
				var group_3 = new cpr.controls.Container();
				group_3.style.css({
					"background-color" : "#f9f9f9",
					"background-image" : "none"
				});
				var xYLayout_4 = new cpr.controls.layouts.XYLayout();
				group_3.setLayout(xYLayout_4);
				container.addChild(group_3, {
					"top": "136px",
					"width": "974px",
					"height": "15px",
					"left": "calc(50% - 487px)"
				});
				var group_4 = new cpr.controls.Container();
				group_4.style.css({
					"background-color" : "#f9f9f9",
					"background-image" : "none"
				});
				var xYLayout_5 = new cpr.controls.layouts.XYLayout();
				group_4.setLayout(xYLayout_5);
				container.addChild(group_4, {
					"top": "256px",
					"width": "974px",
					"height": "15px",
					"left": "calc(50% - 487px)"
				});
				var button_1 = new cpr.controls.Button("insertBtn");
				button_1.visible = false;
				button_1.value = "밀키트 등록";
				button_1.style.setClasses([".cl-button", "mealkitbtn"]);
				button_1.style.css({
					"background-color" : "#0ca44e",
					"color" : "white",
					"font-weight" : "16",
					"font-family" : "푸른전남 Medium",
					"background-image" : "none"
				});
				if(typeof onButtonClick2 == "function") {
					button_1.addEventListener("click", onButtonClick2);
				}
				container.addChild(button_1, {
					"top": "299px",
					"right": "73px",
					"width": "104px",
					"height": "34px"
				});
				var group_5 = new cpr.controls.Container("grp");
				var flowLayout_1 = new cpr.controls.layouts.FlowLayout();
				flowLayout_1.scrollable = false;
				group_5.setLayout(flowLayout_1);
				container.addChild(group_5, {
					"top": "355px",
					"width": "968px",
					"height": "1045px",
					"left": "calc(50% - 484px)"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "244px",
				"bottom": "-993px",
				"width": "1114px",
				"left": "calc(50% - 557px)"
			});
			
			var userDefinedControl_1 = new udc.header3("headerUdc");
			container.addChild(userDefinedControl_1, {
				"top": "-1px",
				"right": "0px",
				"left": "0px",
				"height": "200px"
			});
			
			var group_6 = new cpr.controls.Container();
			group_6.style.css({
				"background-color" : "#6A8B41"
			});
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.scrollable = false;
			formLayout_1.topMargin = "0px";
			formLayout_1.rightMargin = "50px";
			formLayout_1.bottomMargin = "0px";
			formLayout_1.leftMargin = "50px";
			formLayout_1.horizontalSpacing = "50px";
			formLayout_1.verticalSpacing = "30px";
			formLayout_1.setColumns(["400px", "1fr", "400px"]);
			formLayout_1.setRows(["1fr"]);
			group_6.setLayout(formLayout_1);
			(function(container){
				var image_1 = new cpr.controls.Image();
				image_1.src = "theme/images/common/footerLogo3.png";
				container.addChild(image_1, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var group_7 = new cpr.controls.Container();
				var formLayout_2 = new cpr.controls.layouts.FormLayout();
				formLayout_2.scrollable = false;
				formLayout_2.topMargin = "5px";
				formLayout_2.rightMargin = "0px";
				formLayout_2.bottomMargin = "0px";
				formLayout_2.leftMargin = "0px";
				formLayout_2.horizontalSpacing = "10px";
				formLayout_2.verticalSpacing = "5px";
				formLayout_2.setColumns(["330px"]);
				formLayout_2.setRows(["30px", "1fr"]);
				group_7.setLayout(formLayout_2);
				(function(container){
					var output_4 = new cpr.controls.Output();
					output_4.value = "Team HI-FIVE";
					output_4.style.css({
						"border-right-style" : "none",
						"color" : "#F4FAEC",
						"border-bottom-color" : "#ffffff",
						"font-weight" : "bolder",
						"border-left-style" : "none",
						"font-size" : "20px",
						"border-bottom-style" : "solid",
						"border-top-style" : "none"
					});
					container.addChild(output_4, {
						"colIndex": 0,
						"rowIndex": 0
					});
					var output_5 = new cpr.controls.Output();
					output_5.value = "금동준\t 심현준\t 엄용식\t  임영준";
					output_5.style.css({
						"color" : "#F4FAEC",
						"font-weight" : "bolder"
					});
					container.addChild(output_5, {
						"colIndex": 0,
						"rowIndex": 1,
						"colSpan": 1,
						"rowSpan": 1
					});
				})(group_7);
				container.addChild(group_7, {
					"colIndex": 2,
					"rowIndex": 0
				});
			})(group_6);
			container.addChild(group_6, {
				"right": "1px",
				"bottom": "-1100px",
				"left": "0px",
				"height": "70px"
			});
			
			var pageIndexer_1 = new cpr.controls.PageIndexer("page");
			pageIndexer_1.init(1, 1, 1);
			if(typeof onPageIndexerSelectionChange == "function") {
				pageIndexer_1.addEventListener("selection-change", onPageIndexerSelectionChange);
			}
			container.addChild(pageIndexer_1, {
				"top": "1694px",
				"width": "321px",
				"height": "40px",
				"left": "calc(50% - 160px)"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			if(typeof onBodyInit == "function"){
				app.addEventListener("init", onBodyInit);
			}
		}
	});
	app.title = "mealkitList";
	cpr.core.Platform.INSTANCE.register(app);
})();
