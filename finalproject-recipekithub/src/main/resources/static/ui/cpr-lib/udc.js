/// start - udc.chefListIndexudc
/*
 * UDC Qualified Name: udc.chefListIndexudc
 * App URI: udc/chefListIndexudc
 * Source Location: udc/chefListIndexudc.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.4584), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/chefListIndexudc", { 
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * chefListIndexudc.js
				 * Created at 2023. 8. 24. 오후 2:19:43.
				 *
				 * @author shj22k
				 ************************************************/
	
				/**
				 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
				 */
				exports.getText = function(){
					// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
					return "";
				};
	
				/*
				 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
				 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
				 */
				function onBodyLoad(e){
					app.lookup("chefemail").text = app.getAppProperty("memberEmail");
					app.lookup("chefimg").src = app.getAppProperty("memberImage");
					app.lookup("chefnick").text = app.getAppProperty("memberNick");
				}
	
				/*
				 * 이미지에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onChefimgClick(e){
					var chefimg = e.control;
					var event = new cpr.events.CAppEvent("memberImageClick");
					app.dispatchEvent(event);
				};
				// End - User Script
				
				// Header
				app.declareAppProperty("memberEmail", null);
				app.declareAppProperty("memberImage", null);
				app.declareAppProperty("memberNick", null);
				app.supportMedia("all and (min-width: 1024px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
				app.supportMedia("all and (max-width: 499px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.style.css({
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"left" : "0px"
				});
				
				// Layout
				var xYLayout_1 = new cpr.controls.layouts.XYLayout();
				container.setLayout(xYLayout_1);
				
				// UI Configuration
				var image_1 = new cpr.controls.Image("chefimg");
				image_1.fallbackSrc = "theme/images/icon/chefimg.png";
				image_1.style.css({
					"border-radius" : "100px",
					"cursor" : "pointer"
				});
				if(typeof onChefimgClick == "function") {
					image_1.addEventListener("click", onChefimgClick);
				}
				container.addChild(image_1, {
					"top": "0px",
					"left": "0px",
					"width": "160px",
					"height": "160px"
				});
				
				var output_1 = new cpr.controls.Output("chefnick");
				output_1.value = "Output";
				output_1.style.css({
					"font-weight" : "bold",
					"font-size" : "14px",
					"text-align" : "center"
				});
				container.addChild(output_1, {
					"top": "160px",
					"left": "0px",
					"width": "160px",
					"height": "30px"
				});
				
				var output_2 = new cpr.controls.Output("chefemail");
				output_2.value = "Output";
				output_2.style.css({
					"color" : "#9C9C9C",
					"text-align" : "center"
				});
				container.addChild(output_2, {
					"top": "190px",
					"left": "0px",
					"width": "160px",
					"height": "20px"
				});
				if(typeof onBodyLoad == "function"){
					app.addEventListener("load", onBodyLoad);
				}
			}
		});
	internalApp.title = "chefListIndexudc";
	
	// Type declaration for chefListIndexudc
	cpr.utils.Util.ensurePackage("udc").chefListIndexudc = function(id){
		cpr.controls.UDCBase.call(this, "udc.chefListIndexudc", internalApp, id);
	};
	
	udc.chefListIndexudc.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.chefListIndexudc.prototype, "type", {
		get : function(){
			return "udc.chefListIndexudc";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.chefListIndexudc.prototype, "memberEmail", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("memberEmail");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("memberEmail", newValue, true);
		}
	});
	Object.defineProperty(udc.chefListIndexudc.prototype, "memberImage", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("memberImage");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("memberImage", newValue, true);
		}
	});
	Object.defineProperty(udc.chefListIndexudc.prototype, "memberNick", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("memberNick");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("memberNick", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.chefListIndexudc
/// start - udc.chefListudc
/*
 * UDC Qualified Name: udc.chefListudc
 * App URI: udc/chefListudc
 * Source Location: udc/chefListudc.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.4584), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/chefListudc", { 
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * chefListudc.js
				 * Created at 2023. 8. 21. 오후 10:56:35.
				 *
				 * @author shj22k
				 ************************************************/
	
				/**
				 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
				 */
				exports.getText = function(){
					// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
					return "";
				};
	
				/*
				 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
				 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
				 */
				function onBodyLoad(e){
					app.lookup("memberEmail").text = app.getAppProperty("memberEmail");
					app.lookup("memberNick").text = app.getAppProperty("memberNick");
					app.lookup("memberImage").src = app.getAppProperty("memberImage");
					app.lookup("rank").text = app.getAppProperty("rank");
				}
	
				/*
				 * 이미지에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onMemberImageClick(e){
					var memberImage = e.control;
					var event = new cpr.events.CAppEvent("memberImageClick");
					app.dispatchEvent(event);
				};
				// End - User Script
				
				// Header
				app.declareAppProperty("memberEmail", null);
				app.declareAppProperty("memberName", null);
				app.declareAppProperty("memberImage", null);
				app.declareAppProperty("memberNick", null);
				app.declareAppProperty("rank", null);
				app.supportMedia("all and (min-width: 1024px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
				app.supportMedia("all and (max-width: 499px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.style.css({
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"left" : "0px"
				});
				
				// Layout
				var xYLayout_1 = new cpr.controls.layouts.XYLayout();
				container.setLayout(xYLayout_1);
				
				// UI Configuration
				var image_1 = new cpr.controls.Image("memberImage");
				image_1.fallbackSrc = "theme/images/icon/x.png";
				image_1.style.css({
					"border-radius" : "100px",
					"cursor" : "pointer"
				});
				if(typeof onMemberImageClick == "function") {
					image_1.addEventListener("click", onMemberImageClick);
				}
				container.addChild(image_1, {
					"top": "0px",
					"left": "0px",
					"width": "180px",
					"height": "160px"
				});
				
				var output_1 = new cpr.controls.Output("memberNick");
				output_1.value = "Output";
				output_1.style.css({
					"font-weight" : "bold",
					"font-size" : "18px",
					"text-align" : "center"
				});
				container.addChild(output_1, {
					"top": "160px",
					"left": "0px",
					"width": "180px",
					"height": "30px"
				});
				
				var output_2 = new cpr.controls.Output("memberEmail");
				output_2.value = "Output";
				output_2.style.css({
					"font-size" : "15px",
					"text-align" : "center"
				});
				container.addChild(output_2, {
					"top": "190px",
					"left": "0px",
					"width": "180px",
					"height": "25px"
				});
				
				var output_3 = new cpr.controls.Output("rank");
				output_3.value = "Output";
				output_3.style.css({
					"border-right-style" : "solid",
					"border-bottom-color" : "#b3b3b3",
					"border-top-width" : "1px",
					"border-right-width" : "1px",
					"font-weight" : "bold",
					"border-left-color" : "#b3b3b3",
					"border-right-color" : "#b3b3b3",
					"border-left-width" : "1px",
					"border-top-style" : "solid",
					"border-radius" : "50px",
					"background-color" : "#FFFFFF",
					"border-left-style" : "solid",
					"border-bottom-width" : "1px",
					"border-top-color" : "#b3b3b3",
					"border-bottom-style" : "solid",
					"background-image" : "none",
					"text-align" : "center"
				});
				container.addChild(output_3, {
					"top": "0px",
					"left": "0px",
					"width": "30px",
					"height": "30px"
				});
				if(typeof onBodyLoad == "function"){
					app.addEventListener("load", onBodyLoad);
				}
			}
		});
	internalApp.title = "chefListudc";
	
	// Type declaration for chefListudc
	cpr.utils.Util.ensurePackage("udc").chefListudc = function(id){
		cpr.controls.UDCBase.call(this, "udc.chefListudc", internalApp, id);
	};
	
	udc.chefListudc.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.chefListudc.prototype, "type", {
		get : function(){
			return "udc.chefListudc";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.chefListudc.prototype, "memberEmail", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("memberEmail");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("memberEmail", newValue, true);
		}
	});
	Object.defineProperty(udc.chefListudc.prototype, "memberName", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("memberName");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("memberName", newValue, true);
		}
	});
	Object.defineProperty(udc.chefListudc.prototype, "memberImage", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("memberImage");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("memberImage", newValue, true);
		}
	});
	Object.defineProperty(udc.chefListudc.prototype, "memberNick", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("memberNick");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("memberNick", newValue, true);
		}
	});
	Object.defineProperty(udc.chefListudc.prototype, "rank", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("rank");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("rank", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.chefListudc
/// start - udc.chefRecipeListudc
/*
 * UDC Qualified Name: udc.chefRecipeListudc
 * App URI: udc/chefRecipeListudc
 * Source Location: udc/chefRecipeListudc.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.4584), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/chefRecipeListudc", { 
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * chefRecipeListudc.js
				 * Created at 2023. 8. 22. 오전 10:19:08.
				 *
				 * @author shj22k
				 ************************************************/
	
				/**
				 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
				 */
				exports.getText = function(){
					// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
					return "";
				};
	
				/*
				 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
				 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
				 */
				function onBodyLoad(e){
					app.lookup("memberNick").text = app.getAppProperty("memberNick");
					app.lookup("recipeBoardImage").src = "/upload/recipe/"+app.getAppProperty("recipeBoardImage");
					app.lookup("recipeBoardTitle").text = app.getAppProperty("recipeBoardTitle");
				}
	
				/*
				 * 이미지에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onRecipeBoardImageClick(e){
					var recipeBoardImage = e.control;
					var event = new cpr.events.CAppEvent("memberImageClick"); 
					app.dispatchEvent(event);
				};
				// End - User Script
				
				// Header
				app.declareAppProperty("recipeBoardTitle", null);
				app.declareAppProperty("recipeBoardImage", null);
				app.declareAppProperty("memberNick", null);
				app.supportMedia("all and (min-width: 1024px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
				app.supportMedia("all and (max-width: 499px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.style.css({
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"left" : "0px"
				});
				
				// Layout
				var xYLayout_1 = new cpr.controls.layouts.XYLayout();
				container.setLayout(xYLayout_1);
				
				// UI Configuration
				var group_1 = new cpr.controls.Container();
				group_1.style.css({
					"border-right-style" : "solid",
					"border-bottom-color" : "#b2b2b2",
					"border-top-width" : "1px",
					"border-left-style" : "solid",
					"border-right-width" : "1px",
					"border-left-color" : "#b2b2b2",
					"border-bottom-width" : "1px",
					"border-top-color" : "#b2b2b2",
					"border-bottom-style" : "solid",
					"border-right-color" : "#b2b2b2",
					"border-left-width" : "1px",
					"border-top-style" : "solid"
				});
				var formLayout_1 = new cpr.controls.layouts.FormLayout();
				formLayout_1.scrollable = false;
				formLayout_1.topMargin = "0px";
				formLayout_1.rightMargin = "0px";
				formLayout_1.bottomMargin = "0px";
				formLayout_1.leftMargin = "0px";
				formLayout_1.horizontalSpacing = "0px";
				formLayout_1.verticalSpacing = "0px";
				formLayout_1.setColumns(["100px", "1fr"]);
				formLayout_1.setRows(["200px", "40px", "1fr"]);
				group_1.setLayout(formLayout_1);
				(function(container){
					var image_1 = new cpr.controls.Image("recipeBoardImage");
					if(typeof onRecipeBoardImageClick == "function") {
						image_1.addEventListener("click", onRecipeBoardImageClick);
					}
					container.addChild(image_1, {
						"colIndex": 0,
						"rowIndex": 0,
						"colSpan": 2,
						"rowSpan": 1
					});
					var output_1 = new cpr.controls.Output("recipeBoardTitle");
					output_1.value = "Output";
					output_1.style.css({
						"font-weight" : "bold",
						"font-size" : "16px",
						"text-align" : "center"
					});
					container.addChild(output_1, {
						"colIndex": 0,
						"rowIndex": 1,
						"colSpan": 2,
						"rowSpan": 1
					});
					var output_2 = new cpr.controls.Output("memberNick");
					output_2.value = "Output";
					output_2.style.css({
						"color" : "#909090",
						"text-align" : "center"
					});
					container.addChild(output_2, {
						"colIndex": 0,
						"rowIndex": 2,
						"colSpan": 2,
						"rowSpan": 1
					});
				})(group_1);
				container.addChild(group_1, {
					"top": "0px",
					"left": "0px",
					"width": "200px",
					"height": "260px"
				});
				if(typeof onBodyLoad == "function"){
					app.addEventListener("load", onBodyLoad);
				}
			}
		});
	internalApp.title = "chefRecipeListudc";
	
	// Type declaration for chefRecipeListudc
	cpr.utils.Util.ensurePackage("udc").chefRecipeListudc = function(id){
		cpr.controls.UDCBase.call(this, "udc.chefRecipeListudc", internalApp, id);
	};
	
	udc.chefRecipeListudc.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.chefRecipeListudc.prototype, "type", {
		get : function(){
			return "udc.chefRecipeListudc";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.chefRecipeListudc.prototype, "recipeBoardTitle", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("recipeBoardTitle");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("recipeBoardTitle", newValue, true);
		}
	});
	Object.defineProperty(udc.chefRecipeListudc.prototype, "recipeBoardImage", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("recipeBoardImage");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("recipeBoardImage", newValue, true);
		}
	});
	Object.defineProperty(udc.chefRecipeListudc.prototype, "memberNick", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("memberNick");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("memberNick", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.chefRecipeListudc
/// start - udc.footer
/*
 * UDC Qualified Name: udc.footer
 * App URI: udc/footer
 * Source Location: udc/footer.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.4584), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/footer", { 
			onPrepare: function(loader) {
				loader.addCSS("theme/cleopatra-theme.css");
				loader.addCSS("theme/controls/htmlobject.css");
				loader.addCSS("theme/custom-settings.part.css");
				loader.addCSS("theme/custom-theme.css");
				loader.addCSS("theme/custom/member.part.css");
				loader.addCSS("theme/settings.part.css");
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * footer.js
				 * Created at 2023. 8. 15. 오후 8:47:42.
				 *
				 * @author kjoon
				 ************************************************/
	
				/**
				 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
				 */
				exports.getText = function(){
					// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
					return "";
				};;
				// End - User Script
				
				// Header
				app.supportMedia("all and (min-width: 1920px)", "FHD");
				app.supportMedia("all and (min-width: 1024px) and (max-width: 1919px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
				app.supportMedia("all and (max-width: 499px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.style.css({
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"left" : "0px"
				});
				
				// Layout
				var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
				container.setLayout(verticalLayout_1);
				
				// UI Configuration
				var group_1 = new cpr.controls.Container();
				group_1.style.setClasses(["footer"]);
				var xYLayout_1 = new cpr.controls.layouts.XYLayout();
				group_1.setLayout(xYLayout_1);
				(function(container){
					var group_2 = new cpr.controls.Container();
					var formLayout_1 = new cpr.controls.layouts.FormLayout();
					formLayout_1.scrollable = false;
					formLayout_1.topMargin = "0px";
					formLayout_1.rightMargin = "0px";
					formLayout_1.bottomMargin = "0px";
					formLayout_1.leftMargin = "0px";
					formLayout_1.horizontalSpacing = "50px";
					formLayout_1.verticalSpacing = "0px";
					formLayout_1.setColumns(["1fr"]);
					formLayout_1.setRows(["70px", "30px"]);
					group_2.setLayout(formLayout_1);
					(function(container){
						var output_1 = new cpr.controls.Output();
						output_1.value = "Copyright RecipeKitHub Inc. All Rights Reserved";
						output_1.style.setClasses(["footer-bottom"]);
						output_1.style.css({
							"color" : "rgba(100, 100, 100, 1.0)",
							"font-weight" : "bolder",
							"text-align" : "center"
						});
						container.addChild(output_1, {
							"colIndex": 0,
							"rowIndex": 1,
							"colSpan": 1,
							"rowSpan": 1
						});
						var group_3 = new cpr.controls.Container();
						group_3.style.setClasses(["footer-top"]);
						group_3.style.css({
							"color" : "rgba(100, 100, 100, 1.0)"
						});
						var formLayout_2 = new cpr.controls.layouts.FormLayout();
						formLayout_2.scrollable = false;
						formLayout_2.topMargin = "0px";
						formLayout_2.rightMargin = "50px";
						formLayout_2.bottomMargin = "0px";
						formLayout_2.leftMargin = "50px";
						formLayout_2.horizontalSpacing = "50px";
						formLayout_2.verticalSpacing = "30px";
						formLayout_2.setColumns(["400px", "1fr", "400px"]);
						formLayout_2.setRows(["1fr"]);
						group_3.setLayout(formLayout_2);
						(function(container){
							var group_4 = new cpr.controls.Container();
							var formLayout_3 = new cpr.controls.layouts.FormLayout();
							formLayout_3.scrollable = false;
							formLayout_3.topMargin = "5px";
							formLayout_3.rightMargin = "0px";
							formLayout_3.bottomMargin = "0px";
							formLayout_3.leftMargin = "0px";
							formLayout_3.horizontalSpacing = "10px";
							formLayout_3.verticalSpacing = "5px";
							formLayout_3.setColumns(["330px"]);
							formLayout_3.setRows(["30px", "1fr"]);
							group_4.setLayout(formLayout_3);
							(function(container){
								var output_2 = new cpr.controls.Output();
								output_2.value = "Team HI-FIVE";
								output_2.style.css({
									"border-right-style" : "none",
									"color" : "#F4FAEC",
									"border-bottom-color" : "#ffffff",
									"font-weight" : "bolder",
									"border-left-style" : "none",
									"font-size" : "20px",
									"border-bottom-style" : "solid",
									"border-top-style" : "none"
								});
								container.addChild(output_2, {
									"colIndex": 0,
									"rowIndex": 0
								});
								var output_3 = new cpr.controls.Output();
								output_3.value = "금동준\t 심현준\t 엄용식\t  임영준";
								output_3.style.css({
									"color" : "#F4FAEC",
									"font-weight" : "bolder"
								});
								container.addChild(output_3, {
									"colIndex": 0,
									"rowIndex": 1,
									"colSpan": 1,
									"rowSpan": 1
								});
							})(group_4);
							container.addChild(group_4, {
								"colIndex": 2,
								"rowIndex": 0
							});
							var image_1 = new cpr.controls.Image();
							image_1.src = "theme/images/common/footerlogofinal.png";
							container.addChild(image_1, {
								"colIndex": 0,
								"rowIndex": 0
							});
						})(group_3);
						container.addChild(group_3, {
							"colIndex": 0,
							"rowIndex": 0,
							"colSpan": 1,
							"rowSpan": 1
						});
					})(group_2);
					container.addChild(group_2, {
						"right": "0px",
						"bottom": "0px",
						"left": "0px",
						"height": "100px"
					});
				})(group_1);
				container.addChild(group_1, {
					"width": "1920px",
					"height": "100px"
				});
			}
		});
	internalApp.title = "footer";
	
	// Type declaration for footer
	cpr.utils.Util.ensurePackage("udc").footer = function(id){
		cpr.controls.UDCBase.call(this, "udc.footer", internalApp, id);
	};
	
	udc.footer.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.footer.prototype, "type", {
		get : function(){
			return "udc.footer";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.footer
/// start - udc.header
/*
 * UDC Qualified Name: udc.header
 * App URI: udc/header
 * Source Location: udc/header.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.4584), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/header", { 
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * header.js
				 * Created at 2023. 8. 8. 오후 3:17:56.
				 *
				 * @author shj22k
				 ************************************************/
	
				/**
				 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
				 */
				exports.getText = function(){
					// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
					return "";
				};
	
				/*
				 * 버튼에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onButtonClick(e){
					var button = e.control;
					window.location.href="/findMyCartForm";
				}
	
				/*
				 * 버튼(mypage)에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onMypageClick(e){
					var mypage = e.control;
					window.location.href="/findMyPageForm";
				}
	
				/*
				 * 이미지에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onImageClick(e){
					var image = e.control;
					window.location.href="/";
				}
	
				/*
				 * 내비게이션 바에서 item-click 이벤트 발생 시 호출.
				 * 아이템 클릭시 발생하는 이벤트.
				 */
				function onNavigationBarItemClick(e){
					var navigationBar = e.control;
					if(navigationBar.value == 'question'){
						console.log(1);
					}
					
					if(navigationBar.value == 'mealkit'){
						window.location.href='/mealkitList';
					}
						
					if(navigationBar.value == 'recipe'){
						window.location.href='/recipeBoardList';
					}
				};
				// End - User Script
				
				// Header
				app.declareAppProperty("cartbtn", null);
				app.supportMedia("all and (min-width: 1024px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
				app.supportMedia("all and (max-width: 499px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.style.css({
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"left" : "0px"
				});
				
				// Layout
				var xYLayout_1 = new cpr.controls.layouts.XYLayout();
				container.setLayout(xYLayout_1);
				
				// UI Configuration
				var group_1 = new cpr.controls.Container();
				var responsiveXYLayout_1 = new cpr.controls.layouts.ResponsiveXYLayout();
				group_1.setLayout(responsiveXYLayout_1);
				(function(container){
					var group_2 = new cpr.controls.Container("grp1");
					group_2.overscrollBehavior = "none";
					var xYLayout_2 = new cpr.controls.layouts.XYLayout();
					xYLayout_2.scrollable = false;
					group_2.setLayout(xYLayout_2);
					(function(container){
						var image_1 = new cpr.controls.Image();
						image_1.src = "theme/images/icon/recipekithubLog.png";
						image_1.style.css({
							"cursor" : "pointer",
							"padding-top" : "0px"
						});
						if(typeof onImageClick == "function") {
							image_1.addEventListener("click", onImageClick);
						}
						container.addChild(image_1, {
							"top": "-20px",
							"left": "42px",
							"width": "140px",
							"height": "140px"
						});
						var button_1 = new cpr.controls.Button("mypage");
						button_1.value = "";
						button_1.style.setClasses(["login"]);
						button_1.style.css({
							"border-right-style" : "none",
							"background-color" : "#FFFFFF",
							"background-size" : "cover",
							"border-left-style" : "none",
							"border-bottom-style" : "none",
							"background-image" : "url('theme/images/icon/people.png')",
							"border-top-style" : "none"
						});
						if(typeof onMypageClick == "function") {
							button_1.addEventListener("click", onMypageClick);
						}
						container.addChild(button_1, {
							"top": "20px",
							"left": "694px",
							"width": "50px",
							"height": "50px"
						});
						var button_2 = new cpr.controls.Button("cartbtn");
						button_2.value = "";
						button_2.style.setClasses(["recipe"]);
						button_2.style.css({
							"border-right-style" : "none",
							"background-color" : "#FFFFFF",
							"background-size" : "cover",
							"border-left-style" : "none",
							"border-bottom-style" : "none",
							"background-image" : "url('theme/images/icon/shopping-basket.png')",
							"border-top-style" : "none"
						});
						if(typeof onButtonClick == "function") {
							button_2.addEventListener("click", onButtonClick);
						}
						container.addChild(button_2, {
							"top": "20px",
							"left": "771px",
							"width": "50px",
							"height": "50px"
						});
						var group_3 = new cpr.controls.Container();
						group_3.style.setClasses(["cl-form-group"]);
						group_3.style.css({
							"border-right-style" : "solid",
							"border-bottom-color" : "#b4b4b4",
							"border-top-width" : "2px",
							"border-right-width" : "2px",
							"border-left-color" : "#b4b4b4",
							"border-right-color" : "#b4b4b4",
							"border-left-width" : "2px",
							"border-top-style" : "solid",
							"border-radius" : "15px",
							"border-left-style" : "solid",
							"border-bottom-width" : "2px",
							"border-top-color" : "#b4b4b4",
							"border-bottom-style" : "solid"
						});
						var formLayout_1 = new cpr.controls.layouts.FormLayout();
						formLayout_1.scrollable = false;
						formLayout_1.topMargin = "0px";
						formLayout_1.rightMargin = "0px";
						formLayout_1.bottomMargin = "0px";
						formLayout_1.leftMargin = "0px";
						formLayout_1.horizontalSpacing = "0px";
						formLayout_1.verticalSpacing = "0px";
						formLayout_1.horizontalSeparatorWidth = 1;
						formLayout_1.verticalSeparatorWidth = 1;
						formLayout_1.setColumns(["1fr", "2fr", "2fr"]);
						formLayout_1.setRows(["1fr"]);
						group_3.setLayout(formLayout_1);
						(function(container){
							var searchInput_1 = new cpr.controls.SearchInput();
							searchInput_1.style.css({
								"border-right-style" : "solid",
								"border-bottom-color" : "#ffffff",
								"border-left-style" : "solid",
								"border-left-color" : "#ffffff",
								"border-top-color" : "#ffffff",
								"border-bottom-style" : "solid",
								"border-right-color" : "#ffffff",
								"border-top-style" : "solid"
							});
							container.addChild(searchInput_1, {
								"colIndex": 1,
								"rowIndex": 0,
								"colSpan": 2,
								"rowSpan": 1
							});
							var comboBox_1 = new cpr.controls.ComboBox("cmb1");
							comboBox_1.preventInput = true;
							comboBox_1.style.css({
								"border-right-style" : "none",
								"border-left-style" : "none",
								"border-bottom-style" : "none",
								"border-top-style" : "none"
							});
							comboBox_1.style.item.css({
								"border-right-style" : "solid",
								"border-bottom-color" : "#ffffff",
								"border-top-width" : "0px",
								"border-left-style" : "solid",
								"border-right-width" : "0px",
								"border-left-color" : "#ffffff",
								"border-bottom-width" : "0px",
								"border-top-color" : "#ffffff",
								"border-bottom-style" : "solid",
								"border-right-color" : "#ffffff",
								"border-left-width" : "0px",
								"border-top-style" : "solid"
							});
							(function(comboBox_1){
								comboBox_1.addItem(new cpr.controls.Item("레시피", "value1"));
								comboBox_1.addItem(new cpr.controls.Item("밀키트", "value2"));
							})(comboBox_1);
							container.addChild(comboBox_1, {
								"colIndex": 0,
								"rowIndex": 0
							});
						})(group_3);
						container.addChild(group_3, {
							"top": "23px",
							"left": "218px",
							"width": "431px",
							"height": "45px"
						});
					})(group_2);
					container.addChild(group_2, {
						positions: [
							{
								"media": "all and (min-width: 1024px)",
								"top": "10px",
								"width": "897px",
								"height": "89px",
								"left": "calc(50% - 448px)"
							}, 
							{
								"media": "all and (min-width: 500px) and (max-width: 1023px)",
								"top": "10px",
								"width": "438px",
								"height": "89px",
								"left": "calc(50% - 219px)"
							}, 
							{
								"media": "all and (max-width: 499px)",
								"top": "10px",
								"width": "307px",
								"height": "89px",
								"left": "calc(50% - 153px)"
							}
						]
					});
					var navigationBar_1 = new cpr.controls.NavigationBar();
					navigationBar_1.menuType = "fullmenu";
					navigationBar_1.expandTrigger = "click";
					navigationBar_1.style.setClasses(["indexnav"]);
					navigationBar_1.style.css({
						"background-color" : "#0ebc59",
						"border-right-style" : "solid",
						"color" : "#FFFFFF",
						"border-bottom-color" : "#0ebc59",
						"border-left-style" : "solid",
						"border-left-color" : "#0ebc59",
						"font-size" : "16px",
						"border-top-color" : "#0ebc59",
						"font-family" : "푸른잔디",
						"border-bottom-style" : "solid",
						"border-right-color" : "#0ebc59",
						"border-top-style" : "solid"
					});
					navigationBar_1.style.bar.css({
						"text-align" : "center"
					});
					navigationBar_1.style.item.css({
						"text-align" : "center"
					});
					(function(navigationBar_1){
						navigationBar_1.addItem(new cpr.controls.MenuItem("추천", "value1", null));
						navigationBar_1.addItem(new cpr.controls.MenuItem("레시피", "recipe", null));
						navigationBar_1.addItem(new cpr.controls.MenuItem("밀키트", "mealkit", null));
						navigationBar_1.addItem(new cpr.controls.MenuItem("Q & A", "question", null));
					})(navigationBar_1);
					if(typeof onNavigationBarItemClick == "function") {
						navigationBar_1.addEventListener("item-click", onNavigationBarItemClick);
					}
					container.addChild(navigationBar_1, {
						positions: [
							{
								"media": "all and (min-width: 1024px)",
								"top": "98px",
								"right": "0px",
								"left": "0px",
								"height": "51px"
							}, 
							{
								"media": "all and (min-width: 500px) and (max-width: 1023px)",
								"top": "98px",
								"right": "0px",
								"left": "0px",
								"height": "51px"
							}, 
							{
								"media": "all and (max-width: 499px)",
								"top": "98px",
								"right": "0px",
								"left": "0px",
								"height": "51px"
							}
						]
					});
				})(group_1);
				container.addChild(group_1, {
					"top": "0px",
					"width": "1024px",
					"height": "160px",
					"left": "calc(50% - 512px)"
				});
			}
		});
	internalApp.title = "header";
	
	// Type declaration for header
	cpr.utils.Util.ensurePackage("udc").header = function(id){
		cpr.controls.UDCBase.call(this, "udc.header", internalApp, id);
	};
	
	udc.header.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.header.prototype, "type", {
		get : function(){
			return "udc.header";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.header.prototype, "cartbtn", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("cartbtn");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("cartbtn", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.header
/// start - udc.header3
/*
 * UDC Qualified Name: udc.header3
 * App URI: udc/header3
 * Source Location: udc/header3.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.4584), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/header3", { 
			onPrepare: function(loader) {
				loader.addCSS("theme/cleopatra-theme.css");
				loader.addCSS("theme/custom-theme.css");
				loader.addCSS("theme/custom/member.part.css");
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * header.js
				 * Created at 2023. 8. 8. 오후 3:17:56.
				 *
				 * @author shj22k
				 ************************************************/
	
				/**
				 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
				 */
				exports.getText = function(){
					// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
					return "";
				};
	
				function getTimedSessionData(key) {
				    var storedData = sessionStorage.getItem(key);
	
				    if (storedData) {
				        var data = JSON.parse(storedData);
				        var currentTime = new Date().getTime();
	
				        if (currentTime < data.expirationTime) {
				            return data.value;
				        } else {
				            sessionStorage.removeItem(key);
				        }
				    }
				    return null;
				}
	
				/*
				 * 이미지에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onHeaderLogoClick(e){
					var headerLogo = e.control;
					if (window.location.href === "http://localhost:7777/insertRecipeForm" || window.location.href === "http://localhost:7777/updateRecipe") {
						if (confirm("변경된 사항이 저장되지 않습니다. 이동하시겠습니까?")) {
							window.location.href = "/";
						}
					} else {
						window.location.href = "/";
					}
				}
	
				/*
				 * 버튼에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onButtonClick(e){
					var button = e.control;
					var sessionstrg = getTimedSessionData("memsession");
					console.log("sessionstrg : "+sessionstrg);
					if(sessionstrg == null || sessionstrg == ''){
						app.getRootAppInstance().openDialog("dialog/needLogin", {
							width: 400, height: 300, headerClose: true
						}, function(dialog) {
							dialog.ready(function(dialogApp) {
								
							});
						}).then(function(returnValue){
							if(returnValue == "ok"){
								location.href="member/login-form.clx";
							}
						});
					}else{
						if (window.location.href === "http://localhost:7777/insertRecipeForm" || window.location.href === "http://localhost:7777/updateRecipe") {
							if (confirm("변경된 사항이 저장되지 않습니다. 이동하시겠습니까?")) {
								window.location.href = "/findMyCartForm";
							}
						} else {
							/** @type cpr.controls.EmbeddedApp */
							var embeapp = app.getAppProperty("embe");
							cpr.core.App.load("cart/cartForm", function( /*cpr.core.App*/ loadedApp) {
								/*임베디드앱에 안에 앱이 있는 경우에는 앱을 삭제해줍니다.(다시 앱을 열고싶을때 스크립트 작성)*/
								if (embeapp.getEmbeddedAppInstance()) {
									embeapp.getEmbeddedAppInstance().dispose();
								}
								/*로드된 앱이 있는 경우에는 임베디드앱 안에 불러온 앱을 넣습니다.*/
								if (loadedApp) {
									/*초기값을 전달합니다.*/
									embeapp.ready(function( /*cpr.controls.EmbeddedApp*/ embApp) {
										//					embApp.initValue = voInitValue;
									})
									/*임베디드 앱에 내장할 앱을 로드하여 설정합니다*/
									embeapp.app = loadedApp;
								}
							});
							embeapp.redraw();
						}
					}
				}
	
				/*
				 * 버튼(mypage)에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onMypageClick(e){
					var mypage = e.control;
					var sessionval = getTimedSessionData("memsession");
					if(sessionval == null || sessionval == ''){
						app.getRootAppInstance().openDialog("dialog/needLogin", {
							width: 400, height: 300, headerClose: true
						}, function(dialog) {
							dialog.ready(function(dialogApp) {
								
							});
						}).then(function(returnValue){
							if(returnValue == "ok"){
								console.log(returnValue);
								location.href="member/login-form.clx";
							}
						});
					}
					if (window.location.href === "http://localhost:7777/insertRecipeForm" || window.location.href === "http://localhost:7777/updateRecipe") {
						if (confirm("변경된 사항이 저장되지 않습니다. 이동하시겠습니까?")) {
							window.location.href = "/findMyPageForm";
						}
					} else {
						window.location.href = "/findMyPageForm";
					}
				}
	
				/*
				 * 내비게이션 바에서 item-click 이벤트 발생 시 호출.
				 * 아이템 클릭시 발생하는 이벤트.
				 */
				function onNavigationBarItemClick(e) {
					var navigationBar = e.control;
					if(navigationBar.value == null || navigationBar.value == ''){
						return;
					}
					if (navigationBar.value == 'mealkit') {
						if (window.location.href === "http://localhost:7777/insertRecipeForm" || window.location.href === "http://localhost:7777/updateRecipe") {
							if (confirm("변경된 사항이 저장되지 않습니다. 이동하시겠습니까?")) {
								window.location.href = "/mealkitList";
							}
						} else {
							window.location.href = "/mealkitList";
						}
					}
					
					if (navigationBar.value == 'questionAdmin') {
						/** @type cpr.controls.EmbeddedApp */
						var embeapp = app.getAppProperty("embe");
						cpr.core.App.load("embedded/admin/findQnAAdminForm", function( /*cpr.core.App*/ loadedApp) {
							/*임베디드앱에 안에 앱이 있는 경우에는 앱을 삭제해줍니다.(다시 앱을 열고싶을때 스크립트 작성)*/
							if (embeapp.getEmbeddedAppInstance()) {
								embeapp.getEmbeddedAppInstance().dispose();
							}
							/*로드된 앱이 있는 경우에는 임베디드앱 안에 불러온 앱을 넣습니다.*/
							if (loadedApp) {
								/*초기값을 전달합니다.*/
								embeapp.ready(function( /*cpr.controls.EmbeddedApp*/ embApp) {
									//					embApp.initValue = voInitValue;
								})
								/*임베디드 앱에 내장할 앱을 로드하여 설정합니다*/
								embeapp.app = loadedApp;
							}
						});
						embeapp.redraw();
					}
					
					if (navigationBar.value == 'reportAdmin') {
						/** @type cpr.controls.EmbeddedApp */
						var embeapp = app.getAppProperty("embe");
						cpr.core.App.load("embedded/admin/findReportAdminForm", function( /*cpr.core.App*/ loadedApp) {
							/*임베디드앱에 안에 앱이 있는 경우에는 앱을 삭제해줍니다.(다시 앱을 열고싶을때 스크립트 작성)*/
							if (embeapp.getEmbeddedAppInstance()) {
								embeapp.getEmbeddedAppInstance().dispose();
							}
							/*로드된 앱이 있는 경우에는 임베디드앱 안에 불러온 앱을 넣습니다.*/
							if(loadedApp){						
								/*초기값을 전달합니다.*/			
								embeapp.ready(function(/*cpr.controls.EmbeddedApp*/embApp){
				//					embApp.initValue = voInitValue;
								})
								/*임베디드 앱에 내장할 앱을 로드하여 설정합니다*/
								embeapp.app = loadedApp;
							}
						});
						embeapp.redraw();
					}
					
					//salesAdmin
					if(navigationBar.value == 'salesAdmin'){
						/** @type cpr.controls.EmbeddedApp */ 
						var embeapp = app.getAppProperty("embe");
						cpr.core.App.load("embedded/admin/findSalesAdminForm", function(/*cpr.core.App*/ loadedApp){
						/*임베디드앱에 안에 앱이 있는 경우에는 앱을 삭제해줍니다.(다시 앱을 열고싶을때 스크립트 작성)*/
							if(embeapp.getEmbeddedAppInstance()){
								embeapp.getEmbeddedAppInstance().dispose();
							}
							/*로드된 앱이 있는 경우에는 임베디드앱 안에 불러온 앱을 넣습니다.*/
							if(loadedApp){						
								/*초기값을 전달합니다.*/			
								embeapp.ready(function(/*cpr.controls.EmbeddedApp*/embApp){
				//					embApp.initValue = voInitValue;
								})
								/*임베디드 앱에 내장할 앱을 로드하여 설정합니다*/
								embeapp.app = loadedApp;
							}
						}); 
						embeapp.redraw();
					}
					
					//---[ 관리자 - 회원조회 메뉴 ]---//
					if(navigationBar.value == 'memberAdmin'){
						/** @type cpr.controls.EmbeddedApp */ 
						var embeapp = app.getAppProperty("embe");
						cpr.core.App.load("embedded/admin/findMemberDetail", function(/*cpr.core.App*/ loadedApp){
						/*임베디드앱에 안에 앱이 있는 경우에는 앱을 삭제해줍니다.(다시 앱을 열고싶을때 스크립트 작성)*/
							if(embeapp.getEmbeddedAppInstance()){
								embeapp.getEmbeddedAppInstance().dispose();
							}
							/*로드된 앱이 있는 경우에는 임베디드앱 안에 불러온 앱을 넣습니다.*/
							if(loadedApp){						
								/*초기값을 전달합니다.*/			
								embeapp.ready(function(/*cpr.controls.EmbeddedApp*/embApp){
								})
								/*임베디드 앱에 내장할 앱을 로드하여 설정합니다*/
								embeapp.app = loadedApp;
							}
						}); 
						embeapp.redraw();
					}
					
					if (navigationBar.value == 'recommend') {
						if (window.location.href === "http://localhost:7777/insertRecipeForm" || window.location.href === "http://localhost:7777/updateRecipe") {
							if (confirm("변경된 사항이 저장되지 않습니다. 이동하시겠습니까?")) {
								window.location.href = "/";
							}
						} else {
							window.location.href = "/";
						}
					}
						if(navigationBar.value == 'chef'){
						/** @type cpr.controls.EmbeddedApp */ 
						var embeapp = app.getAppProperty("embe");
						cpr.core.App.load("embedded/findChefList", function(/*cpr.core.App*/ loadedApp){
						/*임베디드앱에 안에 앱이 있는 경우에는 앱을 삭제해줍니다.(다시 앱을 열고싶을때 스크립트 작성)*/
							if(embeapp.getEmbeddedAppInstance()){
								embeapp.getEmbeddedAppInstance().dispose();
							}
							/*로드된 앱이 있는 경우에는 임베디드앱 안에 불러온 앱을 넣습니다.*/
							if(loadedApp){						
								/*초기값을 전달합니다.*/			
								embeapp.ready(function(/*cpr.controls.EmbeddedApp*/embApp){
				//					embApp.initValue = voInitValue;
								})
								/*임베디드 앱에 내장할 앱을 로드하여 설정합니다*/
								embeapp.app = loadedApp;
							}
						}); 
						embeapp.redraw();
					}
					if (navigationBar.value == 'recipe') {
						if (window.location.href === "http://localhost:7777/insertRecipeForm" || window.location.href === "http://localhost:7777/updateRecipe") {
							if (confirm("변경된 사항이 저장되지 않습니다. 이동하시겠습니까?")) {
								window.location.href = "/recipeBoardList";
							}
						} else {
							window.location.href = "/recipeBoardList";
						}
					}
				}
	
				/*
				 * 버튼(btnWrite)에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onBtnWriteClick(e) {
					var btnWrite = e.control;
					if (window.location.href === "http://localhost:7777/insertRecipeForm" || window.location.href === "http://localhost:7777/updateRecipe") {
						if (confirm("변경된 사항이 저장되지 않습니다. 이동하시겠습니까?")) {
							var _httpPostMethod = new cpr.protocols.HttpPostMethod("/insertRecipeForm", "_self");
							_httpPostMethod.submit();
						}
					} else {
						var sessionval = getTimedSessionData("memsession");
						if (sessionval == null) {
							app.getRootAppInstance().openDialog("dialog/needLogin", {
								width: 400, height: 300, headerClose: true
							}, function(dialog) {
								dialog.ready(function(dialogApp) {
									
								});
							}).then(function(returnValue){
								if(returnValue == "ok"){
									console.log(returnValue);
									location.href="member/login-form.clx";
								}
							});
						} else {
							var _httpPostMethod = new cpr.protocols.HttpPostMethod("/insertRecipeForm", "_self");
							_httpPostMethod.submit();
						}
					}
				}
	
				/*
				 * 버튼(btnLoginoff)에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onBtnLoginoffClick(e) {
					var btnLoginoff = e.control;
					window.location.href = "/memberUI/loginForm";
					var event = new cpr.events.CAppEvent("clickEvent");
					app.dispatchEvent(event);
				}
	
				/*
				 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
				 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
				 */
				function onBodyLoad(e) {
					var sessionval = getTimedSessionData("memsession");
					console.log("세션에 담긴값 : " + sessionval);
					var navigationBar = app.lookup("nav1");
					if (navigationBar.isSelectedByValue("admin") ||
						navigationBar.isSelectedByValue("questionAdmin") ||
						navigationBar.isSelectedByValue("reportAdmin")) {
						return;
					}
					
					if (sessionval == "shj" || sessionval == "kjoonie@naver.com") {
						navigationBar.addItem(new cpr.controls.TreeItem("관리자", "admin", "root"));
						navigationBar.addItem(new cpr.controls.TreeItem("Q&A관리", "questionAdmin", "admin"));
						navigationBar.addItem(new cpr.controls.TreeItem("신고관리", "reportAdmin", "admin"));
						navigationBar.addItem(new cpr.controls.TreeItem("매출관리", "salesAdmin", "admin"));
						navigationBar.addItem(new cpr.controls.TreeItem("회원조회", "memberAdmin", "admin"));
					}
					app.lookup("category").value = app.getAppProperty("categoryValue");
					app.lookup("searchInput").value = app.getAppProperty("searchValue");
					var opbLoginStatus = app.lookup("opbLoginStatus");
					if (sessionval != null) {
						opbLoginStatus.text = "[ " + sessionval + " ] \n님이 로그인 상태입니다.";
					} else {
						opbLoginStatus.text = "현재 비로그인 상태입니다."
					}
				}
	
				/*
				 * 서치 인풋에서 search 이벤트 발생 시 호출.
				 * Searchinput의 enter키 또는 검색버튼을 클릭하여 인풋의 값이 Search될때 발생하는 이벤트
				 */
	
				function onSearchInputSearch(e) {
					var searchInput = e.control;
					var comboBox = app.lookup("category");
					if(comboBox.value =="" || comboBox.value ==null){
						alert("카테고리 선택하세요");
						return;
					}
					if(comboBox.value =="레시피"){
						if(window.location.href=== "http://localhost:7777/insertRecipeForm" || window.location.href==="http://localhost:7777/updateRecipe"){
							if(confirm("변경된 사항이 저장되지 않습니다. 이동하시겠습니까?")){
								window.location.href="/recipeBoardList?search="+ searchInput.value;
							}
						} else {
							window.location.href = "/recipeBoardList?search=" + searchInput.value;
						}
					}
					if(comboBox.value =="밀키트"){
						window.location.href="/mealkitList?search="+searchInput.value;
					}
				}
	
				/*
				 * 콤보 박스에서 open 이벤트 발생 시 호출.
				 * 리스트박스를 열때 발생하는 이벤트.
				 */
				function onCmb1Open(e){
					var cmb1 = e.control;
					var sessionval = getTimedSessionData("memsession");
	
					cmb1.deleteAllItems();
	
				    if (sessionval) { 
				        cmb1.addItem(new cpr.controls.Item("로그아웃", "logout"));
				        cmb1.addItem(new cpr.controls.Item("프로필", "profile"));
				    } else {
				        cmb1.addItem(new cpr.controls.Item("로그인", "login"));
				    }
				}
	
				/*
				 * 콤보 박스에서 selection-change 이벤트 발생 시 호출.
				 * ComboBox Item을 선택하여 선택된 값이 저장된 후에 발생하는 이벤트.
				 */
				function onCmb1SelectionChange(e){
					var cmb1 = e.control;
				    
				    // 비로그인 상태의 경우, 콤보박스에 "로그인" 메뉴 표시
				    if (cmb1.value == "login") { 
				        window.location.href = "/memberUI/loginForm";
						
					// 로그인 상태의 경우, 콤보박스에 "로그아웃" 메뉴 표시
				    } else if (cmb1.value == "logout") {
				    	var initValue = "로그아웃 하시겠습니까?";
						app.getRootAppInstance().openDialog("dialog/registerPopup", {
							width: 400, height: 300, headerClose: true, resizable: false
						}, function(dialog) {
							dialog.ready(function(dialogApp) {
							dialogApp.initValue = initValue;
							});
						}).then(function(returnValue) {
							sessionStorage.clear();
							var submission = app.lookup("sub_logout");
							submission.send();
							var httpPostMethod = new cpr.protocols.HttpPostMethod("index.clx");
							httpPostMethod.submit();
						});
						
					// 로그인 상태의 경우, 콤보박스에 "프로필" 메뉴 표시
					} else if (cmb1.value == "profile") {
						var httpPostMethod = new cpr.protocols.HttpPostMethod("member/myProfile.clx");
						httpPostMethod.submit();
				    }
				};
				// End - User Script
				
				// Header
				app.declareAppProperty("embe", null);
				app.declareAppProperty("categoryValue", null);
				app.declareAppProperty("searchValue", null);
				app.declareAppProperty("cmb1", null);
				var submission_1 = new cpr.protocols.Submission("sub_logout");
				submission_1.action = "/member/logout";
				app.register(submission_1);
				app.supportMedia("all and (min-width: 1920px)", "FHD");
				app.supportMedia("all and (min-width: 1024px) and (max-width: 1919px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
				app.supportMedia("all and (max-width: 499px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.style.css({
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"left" : "0px"
				});
				
				// Layout
				var xYLayout_1 = new cpr.controls.layouts.XYLayout();
				container.setLayout(xYLayout_1);
				
				// UI Configuration
				var group_1 = new cpr.controls.Container();
				group_1.style.css({
					"box-shadow" : "0 0 10px #333"
				});
				var formLayout_1 = new cpr.controls.layouts.FormLayout();
				formLayout_1.scrollable = false;
				formLayout_1.topMargin = "0px";
				formLayout_1.rightMargin = "0px";
				formLayout_1.bottomMargin = "0px";
				formLayout_1.leftMargin = "0px";
				formLayout_1.horizontalSpacing = "0px";
				formLayout_1.verticalSpacing = "0px";
				formLayout_1.setColumns(["1fr"]);
				formLayout_1.setRows(["140px", "60px"]);
				group_1.setLayout(formLayout_1);
				(function(container){
					var group_2 = new cpr.controls.Container("grp1");
					group_2.overscrollBehavior = "none";
					group_2.style.css({
						"background-color" : "#F4FAEC"
					});
					var formLayout_2 = new cpr.controls.layouts.FormLayout();
					formLayout_2.scrollable = false;
					formLayout_2.topMargin = "20px";
					formLayout_2.rightMargin = "30px";
					formLayout_2.bottomMargin = "0px";
					formLayout_2.leftMargin = "50px";
					formLayout_2.horizontalSpacing = "40px";
					formLayout_2.verticalSpacing = "0px";
					formLayout_2.setColumns(["330px", "2fr", "250px", "420px"]);
					formLayout_2.setRows(["110px"]);
					group_2.setLayout(formLayout_2);
					(function(container){
						var image_1 = new cpr.controls.Image("headerLogo");
						image_1.src = "theme/images/common/headerLogo3.png";
						if(typeof onHeaderLogoClick == "function") {
							image_1.addEventListener("click", onHeaderLogoClick);
						}
						container.addChild(image_1, {
							"colIndex": 0,
							"rowIndex": 0,
							"colSpan": 1,
							"rowSpan": 1
						});
						var group_3 = new cpr.controls.Container();
						var formLayout_3 = new cpr.controls.layouts.FormLayout();
						formLayout_3.scrollable = false;
						formLayout_3.topMargin = "25px";
						formLayout_3.rightMargin = "25px";
						formLayout_3.bottomMargin = "25px";
						formLayout_3.leftMargin = "25px";
						formLayout_3.horizontalSpacing = "0px";
						formLayout_3.verticalSpacing = "0px";
						formLayout_3.setColumns(["1fr"]);
						formLayout_3.setRows(["1fr"]);
						group_3.setLayout(formLayout_3);
						(function(container){
							var group_4 = new cpr.controls.Container();
							group_4.style.setClasses(["cl-form-group"]);
							group_4.style.css({
								"border-right-style" : "solid",
								"border-bottom-color" : "#b4b4b4",
								"border-top-width" : "2px",
								"border-right-width" : "2px",
								"border-left-color" : "#b4b4b4",
								"border-right-color" : "#b4b4b4",
								"border-left-width" : "2px",
								"border-top-style" : "solid",
								"border-radius" : "15px",
								"border-left-style" : "solid",
								"border-bottom-width" : "2px",
								"border-top-color" : "#b4b4b4",
								"border-bottom-style" : "solid"
							});
							var formLayout_4 = new cpr.controls.layouts.FormLayout();
							formLayout_4.scrollable = false;
							formLayout_4.topMargin = "0px";
							formLayout_4.rightMargin = "0px";
							formLayout_4.bottomMargin = "0px";
							formLayout_4.leftMargin = "0px";
							formLayout_4.horizontalSpacing = "0px";
							formLayout_4.verticalSpacing = "0px";
							formLayout_4.horizontalSeparatorWidth = 1;
							formLayout_4.verticalSeparatorWidth = 1;
							formLayout_4.setColumns(["1fr", "2fr", "2fr"]);
							formLayout_4.setRows(["1fr"]);
							group_4.setLayout(formLayout_4);
							(function(container){
								var searchInput_1 = new cpr.controls.SearchInput("searchInput");
								searchInput_1.searchButtonImage = "theme/images/com/main/icon-search-line.svg";
								searchInput_1.style.css({
									"border-right-style" : "solid",
									"border-bottom-color" : "#ffffff",
									"border-left-style" : "solid",
									"border-left-color" : "#ffffff",
									"border-top-color" : "#ffffff",
									"border-bottom-style" : "solid",
									"border-right-color" : "#ffffff",
									"border-top-style" : "solid"
								});
								searchInput_1.style.search.css({
									"width" : "30px",
									"padding-right" : "15px"
								});
								searchInput_1.style.clear.css({
									"width" : "20px",
									"padding-right" : "10px"
								});
								if(typeof onSearchInputSearch == "function") {
									searchInput_1.addEventListener("search", onSearchInputSearch);
								}
								container.addChild(searchInput_1, {
									"colIndex": 1,
									"rowIndex": 0,
									"colSpan": 2,
									"rowSpan": 1
								});
								var comboBox_1 = new cpr.controls.ComboBox("category");
								comboBox_1.preventInput = true;
								comboBox_1.style.css({
									"border-right-style" : "none",
									"border-left-style" : "none",
									"border-bottom-style" : "none",
									"border-top-style" : "none"
								});
								comboBox_1.style.list.css({
									"border-right-style" : "none",
									"padding-top" : "10px",
									"white-space" : "normal",
									"padding-left" : "10px",
									"vertical-align" : "middle",
									"padding-bottom" : "10px",
									"border-top-style" : "none",
									"border-radius" : "10px",
									"box-shadow" : "3px 3px 5px 5px gray",
									"border-left-style" : "none",
									"border-bottom-style" : "none",
									"padding-right" : "10px",
									"text-align" : "left"
								});
								comboBox_1.style.button.css({
									"padding-right" : "10px"
								});
								comboBox_1.style.item.css({
									"border-right-style" : "solid",
									"padding-top" : "20px",
									"border-bottom-color" : "#ffffff",
									"border-top-width" : "0px",
									"white-space" : "normal",
									"border-right-width" : "0px",
									"font-weight" : "bolder",
									"padding-left" : "20px",
									"border-left-color" : "#ffffff",
									"padding-bottom" : "20px",
									"font-size" : "18px",
									"border-right-color" : "#ffffff",
									"border-left-width" : "0px",
									"border-top-style" : "solid",
									"border-radius" : "10px",
									"border-left-style" : "solid",
									"border-bottom-width" : "0px",
									"border-top-color" : "#ffffff",
									"border-bottom-style" : "solid",
									"font-family" : "푸른전남 Medium",
									"padding-right" : "20px",
									"text-align" : "left"
								});
								(function(comboBox_1){
									comboBox_1.addItem(new cpr.controls.Item("레시피", "레시피"));
									comboBox_1.addItem(new cpr.controls.Item("밀키트", "밀키트"));
								})(comboBox_1);
								container.addChild(comboBox_1, {
									"colIndex": 0,
									"rowIndex": 0
								});
							})(group_4);
							container.addChild(group_4, {
								"colIndex": 0,
								"rowIndex": 0
							});
						})(group_3);
						container.addChild(group_3, {
							"colIndex": 1,
							"rowIndex": 0,
							"colSpan": 1,
							"rowSpan": 1
						});
						var group_5 = new cpr.controls.Container();
						var formLayout_5 = new cpr.controls.layouts.FormLayout();
						formLayout_5.scrollable = false;
						formLayout_5.topMargin = "30px";
						formLayout_5.rightMargin = "30px";
						formLayout_5.bottomMargin = "30px";
						formLayout_5.leftMargin = "30px";
						formLayout_5.horizontalSpacing = "50px";
						formLayout_5.verticalSpacing = "20px";
						formLayout_5.setColumns(["200px", "50px", "50px", "50px", "50px"]);
						formLayout_5.setRows(["50px"]);
						group_5.setLayout(formLayout_5);
						(function(container){
							var button_1 = new cpr.controls.Button("mypage");
							button_1.value = "";
							button_1.style.setClasses(["login"]);
							button_1.style.css({
								"border-right-style" : "none",
								"background-color" : "#F4FAEC",
								"background-size" : "cover",
								"border-left-style" : "none",
								"border-bottom-style" : "none",
								"background-image" : "url('theme/images/common/mypage.png')",
								"background-position" : "center",
								"border-top-style" : "none"
							});
							if(typeof onMypageClick == "function") {
								button_1.addEventListener("click", onMypageClick);
							}
							container.addChild(button_1, {
								"colIndex": 1,
								"rowIndex": 0
							});
							var button_2 = new cpr.controls.Button("cartbtn");
							button_2.value = "";
							button_2.style.setClasses(["recipe"]);
							button_2.style.css({
								"border-right-style" : "none",
								"background-color" : "#F4FAEC",
								"background-size" : "cover",
								"border-left-style" : "none",
								"border-bottom-style" : "none",
								"background-image" : "url('theme/images/icon/shopping-basket.png')",
								"border-top-style" : "none"
							});
							if(typeof onButtonClick == "function") {
								button_2.addEventListener("click", onButtonClick);
							}
							container.addChild(button_2, {
								"colIndex": 2,
								"rowIndex": 0
							});
							var button_3 = new cpr.controls.Button("btnWrite");
							button_3.value = "";
							button_3.style.css({
								"border-right-style" : "none",
								"background-size" : "cover",
								"border-bottom-color" : "none",
								"border-left-color" : "none",
								"border-right-color" : "none",
								"background-position" : "center",
								"border-top-style" : "none",
								"background-color" : "transparent",
								"background-repeat" : "no-repeat",
								"border-left-style" : "none",
								"border-top-color" : "none",
								"border-bottom-style" : "none",
								"background-image" : "url('theme/images/common/write.png')"
							});
							if(typeof onBtnWriteClick == "function") {
								button_3.addEventListener("click", onBtnWriteClick);
							}
							container.addChild(button_3, {
								"colIndex": 3,
								"rowIndex": 0
							});
							var comboBox_2 = new cpr.controls.ComboBox("cmb1");
							comboBox_2.buttonImage = "udc/url(../theme/images/member/transparentImg.png)";
							comboBox_2.preventInput = true;
							comboBox_2.style.css({
								"border-right-style" : "none",
								"background-color" : "#F4FAEC",
								"background-size" : "cover",
								"border-left-style" : "none",
								"border-bottom-style" : "none",
								"background-image" : "url('theme/images/common/loginoff.png')",
								"background-position" : "center",
								"border-top-style" : "none"
							});
							comboBox_2.style.list.css({
								"border-radius" : "10px",
								"padding-top" : "10px",
								"box-shadow" : "3px 3px 5px 5px gray",
								"padding-left" : "10px",
								"vertical-align" : "middle",
								"padding-bottom" : "10px",
								"padding-right" : "10px",
								"text-align" : "left"
							});
							comboBox_2.style.item.css({
								"border-radius" : "10px",
								"padding-top" : "20px",
								"font-weight" : "bolder",
								"padding-left" : "20px",
								"padding-bottom" : "20px",
								"font-size" : "18px",
								"font-family" : "푸른전남 Medium",
								"text-align" : "left",
								"padding-right" : "20px"
							});
							if(typeof onCmb1SelectionChange == "function") {
								comboBox_2.addEventListener("selection-change", onCmb1SelectionChange);
							}
							if(typeof onCmb1Open == "function") {
								comboBox_2.addEventListener("open", onCmb1Open);
							}
							container.addChild(comboBox_2, {
								"colIndex": 4,
								"rowIndex": 0
							});
							var output_1 = new cpr.controls.Output("opbLoginStatus");
							output_1.value = "";
							output_1.style.css({
								"font-weight" : "bold",
								"font-size" : "16px",
								"line-height" : "2.0"
							});
							container.addChild(output_1, {
								"colIndex": 0,
								"rowIndex": 0,
								"colSpan": 1,
								"rowSpan": 1,
								"ignoreLayoutSpacing": true
							});
						})(group_5);
						container.addChild(group_5, {
							"colIndex": 2,
							"rowIndex": 0,
							"colSpan": 2,
							"rowSpan": 1
						});
					})(group_2);
					container.addChild(group_2, {
						"colIndex": 0,
						"rowIndex": 0
					});
					var navigationBar_1 = new cpr.controls.NavigationBar("nav1");
					navigationBar_1.menuType = "fullmenu";
					navigationBar_1.expandTrigger = "click";
					navigationBar_1.style.setClasses(["navbar1"]);
					navigationBar_1.style.css({
						"box-shadow" : "10px 10px 5px 5px gray",
						"text-shadow" : "2px 2px 4px gray",
						"color" : "#F4FAEC",
						"font-weight" : "bolder",
						"font-size" : "24px",
						"font-family" : "푸른전남 Medium"
					});
					navigationBar_1.style.bar.setClasses(["navbar1"]);
					navigationBar_1.style.bar.css({
						"box-shadow" : "10px 10px 5px 5px gray",
						"text-align" : "center"
					});
					navigationBar_1.style.item.css({
						"text-align" : "center"
					});
					navigationBar_1.style.list.css({
						"background-color" : "transparent",
						"border-right-style" : "none",
						"border-left-style" : "none",
						"border-bottom-style" : "none",
						"border-top-style" : "none"
					});
					navigationBar_1.style.listitem.css({
						"padding-top" : "20px",
						"font-weight" : "bolder",
						"font-size" : "20px",
						"padding-bottom" : "20px",
						"font-family" : "푸른전남 Medium"
					});
					(function(navigationBar_1){
						navigationBar_1.addItem(new cpr.controls.MenuItem("추천", "recommend", null));
						navigationBar_1.addItem(new cpr.controls.MenuItem("레시피", "recipe", null));
						navigationBar_1.addItem(new cpr.controls.MenuItem("밀키트", "mealkit", null));
						navigationBar_1.addItem(new cpr.controls.MenuItem("셰프", "chef", null));
					})(navigationBar_1);
					if(typeof onNavigationBarItemClick == "function") {
						navigationBar_1.addEventListener("item-click", onNavigationBarItemClick);
					}
					container.addChild(navigationBar_1, {
						"colIndex": 0,
						"rowIndex": 1
					});
				})(group_1);
				container.addChild(group_1, {
					"top": "0px",
					"right": "0px",
					"left": "0px",
					"height": "200px"
				});
				if(typeof onBodyLoad == "function"){
					app.addEventListener("load", onBodyLoad);
				}
			}
		});
	internalApp.title = "header3";
	
	// Type declaration for header3
	cpr.utils.Util.ensurePackage("udc").header3 = function(id){
		cpr.controls.UDCBase.call(this, "udc.header3", internalApp, id);
	};
	
	udc.header3.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.header3.prototype, "type", {
		get : function(){
			return "udc.header3";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.header3.prototype, "embe", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("embe");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("embe", newValue, true);
		}
	});
	Object.defineProperty(udc.header3.prototype, "categoryValue", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("categoryValue");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("categoryValue", newValue, true);
		}
	});
	Object.defineProperty(udc.header3.prototype, "searchValue", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("searchValue");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("searchValue", newValue, true);
		}
	});
	Object.defineProperty(udc.header3.prototype, "cmb1", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("cmb1");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("cmb1", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.header3
/// start - udc.headerMyPage
/*
 * UDC Qualified Name: udc.headerMyPage
 * App URI: udc/headerMyPage
 * Source Location: udc/headerMyPage.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.4584), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/headerMyPage", { 
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * headerMyPage.js
				 * Created at 2023. 8. 21. 오후 4:32:15.
				 *
				 * @author shj22k
				 ************************************************/
	
				/**
				 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
				 */
				exports.getText = function(){
					// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
					return "";
				};
	
				/*
				 * 이미지에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onHeaderLogoClick(e){
					var headerLogo = e.control;
					window.location.href="/";
				}
	
				/*
				 * 버튼(mypage)에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onMypageClick(e){
					var mypage = e.control;
					window.location.href="/findMyPageForm";	
				}
	
				/*
				 * 버튼(btnLoginoff)에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onBtnLoginoffClick(e){
					var btnLoginoff = e.control;
					window.location.href="/memberUI/loginForm";
				}
	
				/*
				 * 버튼(cartbtn)에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onCartbtnClick(e){
					var cartbtn = e.control;
					window.location.href = "/mealkitList";
				};
				// End - User Script
				
				// Header
				app.supportMedia("all and (min-width: 1024px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
				app.supportMedia("all and (max-width: 499px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.style.css({
					"background-color" : "#F4FAEC",
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"left" : "0px"
				});
				
				// Layout
				var xYLayout_1 = new cpr.controls.layouts.XYLayout();
				container.setLayout(xYLayout_1);
				
				// UI Configuration
				var group_1 = new cpr.controls.Container();
				group_1.style.css({
					"border-right-style" : "none",
					"border-bottom-color" : "#F4FAEC",
					"border-left-style" : "none",
					"border-bottom-width" : "5px",
					"border-bottom-style" : "solid",
					"border-top-style" : "none"
				});
				var xYLayout_2 = new cpr.controls.layouts.XYLayout();
				group_1.setLayout(xYLayout_2);
				(function(container){
					var image_1 = new cpr.controls.Image("headerLogo");
					image_1.src = "theme/images/common/headerLogo3.png";
					if(typeof onHeaderLogoClick == "function") {
						image_1.addEventListener("click", onHeaderLogoClick);
					}
					container.addChild(image_1, {
						"top": "45px",
						"bottom": "45px",
						"left": "300px",
						"width": "330px"
					});
					var group_2 = new cpr.controls.Container();
					var formLayout_1 = new cpr.controls.layouts.FormLayout();
					formLayout_1.scrollable = false;
					formLayout_1.topMargin = "30px";
					formLayout_1.rightMargin = "30px";
					formLayout_1.bottomMargin = "30px";
					formLayout_1.leftMargin = "30px";
					formLayout_1.horizontalSpacing = "50px";
					formLayout_1.verticalSpacing = "50px";
					formLayout_1.setColumns(["50px", "50px", "50px", "50px"]);
					formLayout_1.setRows(["50px"]);
					group_2.setLayout(formLayout_1);
					(function(container){
						var button_1 = new cpr.controls.Button("mypage");
						button_1.value = "";
						button_1.style.setClasses(["login"]);
						button_1.style.css({
							"border-right-style" : "none",
							"background-color" : "#F4FAEC",
							"background-size" : "cover",
							"border-left-style" : "none",
							"border-bottom-style" : "none",
							"background-image" : "url('theme/images/common/mypage.png')",
							"background-position" : "center",
							"border-top-style" : "none"
						});
						if(typeof onMypageClick == "function") {
							button_1.addEventListener("click", onMypageClick);
						}
						container.addChild(button_1, {
							"colIndex": 0,
							"rowIndex": 0
						});
						var button_2 = new cpr.controls.Button("cartbtn");
						button_2.value = "";
						button_2.style.setClasses(["recipe"]);
						button_2.style.css({
							"border-right-style" : "none",
							"background-color" : "#F4FAEC",
							"background-size" : "cover",
							"border-left-style" : "none",
							"border-bottom-style" : "none",
							"background-image" : "url('theme/images/icon/shopping-basket.png')",
							"border-top-style" : "none"
						});
						if(typeof onCartbtnClick == "function") {
							button_2.addEventListener("click", onCartbtnClick);
						}
						container.addChild(button_2, {
							"colIndex": 1,
							"rowIndex": 0
						});
						var button_3 = new cpr.controls.Button("btnLoginoff");
						button_3.value = "";
						button_3.style.css({
							"background-color" : "transparent",
							"border-right-style" : "none",
							"background-repeat" : "no-repeat",
							"background-size" : "cover",
							"border-left-style" : "none",
							"border-bottom-style" : "none",
							"background-image" : "url('theme/images/common/loginoff.png')",
							"background-position" : "center",
							"border-top-style" : "none"
						});
						if(typeof onBtnLoginoffClick == "function") {
							button_3.addEventListener("click", onBtnLoginoffClick);
						}
						container.addChild(button_3, {
							"colIndex": 3,
							"rowIndex": 0
						});
						var button_4 = new cpr.controls.Button("btnWrite");
						button_4.value = "";
						button_4.style.css({
							"border-right-style" : "none",
							"background-size" : "cover",
							"border-bottom-color" : "none",
							"border-left-color" : "none",
							"border-right-color" : "none",
							"background-position" : "center",
							"border-top-style" : "none",
							"background-color" : "transparent",
							"background-repeat" : "no-repeat",
							"border-left-style" : "none",
							"border-top-color" : "none",
							"border-bottom-style" : "none",
							"background-image" : "url('theme/images/common/write.png')"
						});
						container.addChild(button_4, {
							"colIndex": 2,
							"rowIndex": 0
						});
					})(group_2);
					container.addChild(group_2, {
						"top": "40px",
						"right": "100px",
						"bottom": "40px",
						"width": "420px"
					});
					var output_1 = new cpr.controls.Output();
					output_1.value = "My Page";
					output_1.style.css({
						"color" : "#0a8c43",
						"font-weight" : "bold",
						"font-size" : "60px",
						"font-style" : "normal",
						"text-align" : "center"
					});
					container.addChild(output_1, {
						"top": "20px",
						"right": "750px",
						"bottom": "20px",
						"left": "750px"
					});
				})(group_1);
				container.addChild(group_1, {
					"top": "0px",
					"right": "0px",
					"bottom": "0px",
					"left": "0px"
				});
			}
		});
	internalApp.title = "headerMyPage";
	
	// Type declaration for headerMyPage
	cpr.utils.Util.ensurePackage("udc").headerMyPage = function(id){
		cpr.controls.UDCBase.call(this, "udc.headerMyPage", internalApp, id);
	};
	
	udc.headerMyPage.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.headerMyPage.prototype, "type", {
		get : function(){
			return "udc.headerMyPage";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.headerMyPage
/// start - udc.imgButton
/*
 * UDC Qualified Name: udc.imgButton
 * App URI: udc/imgButton
 * Source Location: udc/imgButton.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.4584), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/imgButton", { 
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * imgButton.js
				 * Created at 2022. 5. 30. 오후 5:02:20.
				 *
				 * @author techdom
				 ************************************************/
	
				/**
				 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
				 */
				exports.getText = function(){
					// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
					return "";
				};
	
				/*
				 * "삭제" 버튼에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onButtonClick(e){
					var button = e.control;
					
					//[삭제] 버튼 클릭시 이미지를 삭제하는 이벤트 출판
					var event = new cpr.events.CUIEvent("deleteImg");
					app.dispatchEvent(event);
				}
	
				/*
				 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
				 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
				 */
				function onBodyLoad(e){
					//출판한 [이미지 경로] 앱 속성을 이미지의 경로로 지정
					app.lookup("img1").src = app.getAppProperty("src");
				};
				// End - User Script
				
				// Header
				app.declareAppProperty("src", null);
				app.supportMedia("all and (min-width: 1024px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
				app.supportMedia("all and (max-width: 499px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.style.css({
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"left" : "0px"
				});
				
				// Layout
				var xYLayout_1 = new cpr.controls.layouts.XYLayout();
				container.setLayout(xYLayout_1);
				
				// UI Configuration
				var image_1 = new cpr.controls.Image("img1");
				container.addChild(image_1, {
					"top": "0px",
					"left": "0px",
					"width": "300px",
					"height": "300px"
				});
				
				var button_1 = new cpr.controls.Button("btn1");
				button_1.value = "삭제";
				if(typeof onButtonClick == "function") {
					button_1.addEventListener("click", onButtonClick);
				}
				container.addChild(button_1, {
					"top": "10px",
					"left": "250px",
					"width": "40px",
					"height": "40px"
				});
				if(typeof onBodyLoad == "function"){
					app.addEventListener("load", onBodyLoad);
				}
			}
		});
	internalApp.title = "imgButton";
	
	// Type declaration for imgButton
	cpr.utils.Util.ensurePackage("udc").imgButton = function(id){
		cpr.controls.UDCBase.call(this, "udc.imgButton", internalApp, id);
	};
	
	udc.imgButton.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.imgButton.prototype, "type", {
		get : function(){
			return "udc.imgButton";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.imgButton.prototype, "src", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("src");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("src", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.imgButton
/// start - udc.mealkitComment
/*
 * UDC Qualified Name: udc.mealkitComment
 * App URI: udc/mealkitComment
 * Source Location: udc/mealkitComment.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.4584), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/mealkitComment", { 
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * mealkitComment.js
				 * Created at 2023. 8. 18. 오후 2:40:09.
				 *
				 * @author KOSTA
				 ************************************************/
	
				/**
				 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
				 */
				exports.getText = function(){
					// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
					return "";
				};
	
				/*
				 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
				 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
				 */
				function onBodyLoad(e){
					app.lookup("nick").text = app.getAppProperty("nick");
					app.lookup("regDate").text = app.getAppProperty("regDate");
					app.lookup("content").text = app.getAppProperty("content");
					app.lookup("star").text = app.getAppProperty("star");
				}
	
				/*
				 * "수정" 버튼에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onButtonClick(e){
					var button = e.control;
					var event = new cpr.events.CAppEvent("updateClick");
					app.dispatchEvent(event);
				}
	
				/*
				 * "삭제" 버튼에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onButtonClick2(e){
					var button = e.control;
					var event = new cpr.events.CAppEvent("deleteClick");
					app.dispatchEvent(event);
				};
				// End - User Script
				
				// Header
				app.declareAppProperty("nick", null);
				app.declareAppProperty("regDate", null);
				app.declareAppProperty("content", null);
				app.declareAppProperty("star", null);
				app.declareAppProperty("deleteBtn", null);
				app.supportMedia("all and (min-width: 1024px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
				app.supportMedia("all and (max-width: 499px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.style.css({
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"left" : "0px"
				});
				
				// Layout
				var xYLayout_1 = new cpr.controls.layouts.XYLayout();
				container.setLayout(xYLayout_1);
				
				// UI Configuration
				var output_1 = new cpr.controls.Output("nick");
				output_1.value = "Output";
				container.addChild(output_1, {
					"top": "20px",
					"left": "8px",
					"width": "100px",
					"height": "18px"
				});
				
				var output_2 = new cpr.controls.Output("regDate");
				output_2.value = "Output";
				container.addChild(output_2, {
					"top": "21px",
					"left": "160px",
					"width": "93px",
					"height": "18px"
				});
				
				var button_1 = new cpr.controls.Button();
				button_1.value = "삭제";
				if(typeof onButtonClick2 == "function") {
					button_1.addEventListener("click", onButtonClick2);
				}
				container.addChild(button_1, {
					"top": "20px",
					"left": "252px",
					"width": "61px",
					"height": "20px"
				});
				
				var output_3 = new cpr.controls.Output("star");
				output_3.value = "별점";
				output_3.style.css({
					"font-size" : "12px"
				});
				container.addChild(output_3, {
					"top": "22px",
					"left": "125px",
					"width": "36px",
					"height": "15px"
				});
				
				var output_4 = new cpr.controls.Output("content");
				output_4.value = "Output";
				output_4.style.css({
					"cursor" : "auto"
				});
				container.addChild(output_4, {
					"top": "39px",
					"left": "8px",
					"width": "926px",
					"height": "60px"
				});
				
				var group_1 = new cpr.controls.Container();
				group_1.style.css({
					"background-color" : "#f9f9f9"
				});
				var xYLayout_2 = new cpr.controls.layouts.XYLayout();
				group_1.setLayout(xYLayout_2);
				container.addChild(group_1, {
					"top": "88px",
					"left": "8px",
					"width": "926px",
					"height": "1px"
				});
				
				var image_1 = new cpr.controls.Image();
				image_1.src = "theme/images/mealkit/free-icon-star-6063500.png";
				image_1.style.css({
					"font-size" : "12px"
				});
				container.addChild(image_1, {
					"top": "22px",
					"left": "107px",
					"width": "19px",
					"height": "15px"
				});
				if(typeof onBodyLoad == "function"){
					app.addEventListener("load", onBodyLoad);
				}
			}
		});
	internalApp.title = "mealkitComment";
	
	// Type declaration for mealkitComment
	cpr.utils.Util.ensurePackage("udc").mealkitComment = function(id){
		cpr.controls.UDCBase.call(this, "udc.mealkitComment", internalApp, id);
	};
	
	udc.mealkitComment.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.mealkitComment.prototype, "type", {
		get : function(){
			return "udc.mealkitComment";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.mealkitComment.prototype, "nick", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("nick");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("nick", newValue, true);
		}
	});
	Object.defineProperty(udc.mealkitComment.prototype, "regDate", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("regDate");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("regDate", newValue, true);
		}
	});
	Object.defineProperty(udc.mealkitComment.prototype, "content", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("content");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("content", newValue, true);
		}
	});
	Object.defineProperty(udc.mealkitComment.prototype, "star", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("star");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("star", newValue, true);
		}
	});
	Object.defineProperty(udc.mealkitComment.prototype, "deleteBtn", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("deleteBtn");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("deleteBtn", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.mealkitComment
/// start - udc.mealkitList
/*
 * UDC Qualified Name: udc.mealkitList
 * App URI: udc/mealkitList
 * Source Location: udc/mealkitList.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.4584), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/mealkitList", { 
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * mealkitList.js
				 * Created at 2023. 8. 20. 오후 9:38:25.
				 *
				 * @author KOSTA
				 ************************************************/
	
				/**
				 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
				 */
				exports.getText = function(){
					// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
					return "";
				};
	
				/*
				 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
				 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
				 */
				function onBodyLoad(e){
					app.lookup("img").src = app.getAppProperty("img");
					app.lookup("title").text = app.getAppProperty("title");
					app.lookup("nick").text = app.getAppProperty("nick");
					app.lookup("star").text = app.getAppProperty("star");
					app.lookup("hits").text = app.getAppProperty("hits");
					app.lookup("count").text = app.getAppProperty("count");
				}
	
				/*
				 * 이미지에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onImgClick(e){
					var img = e.control;
					var event = new cpr.events.CAppEvent("imgClick");
					app.dispatchEvent(event);
				};
				// End - User Script
				
				// Header
				app.declareAppProperty("img", null);
				app.declareAppProperty("title", null);
				app.declareAppProperty("nick", null);
				app.declareAppProperty("star", null);
				app.declareAppProperty("hits", null);
				app.declareAppProperty("count", null);
				app.supportMedia("all and (min-width: 1024px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
				app.supportMedia("all and (max-width: 499px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.style.css({
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"left" : "0px"
				});
				
				// Layout
				var xYLayout_1 = new cpr.controls.layouts.XYLayout();
				container.setLayout(xYLayout_1);
				
				// UI Configuration
				var image_1 = new cpr.controls.Image("img");
				image_1.style.css({
					"cursor" : "pointer"
				});
				if(typeof onImgClick == "function") {
					image_1.addEventListener("click", onImgClick);
				}
				container.addChild(image_1, {
					"top": "0px",
					"left": "0px",
					"width": "230px",
					"height": "150px"
				});
				
				var output_1 = new cpr.controls.Output("title");
				output_1.value = "Output";
				output_1.style.css({
					"font-weight" : "bold"
				});
				container.addChild(output_1, {
					"top": "149px",
					"left": "0px",
					"width": "230px",
					"height": "30px"
				});
				
				var output_2 = new cpr.controls.Output("nick");
				output_2.value = "Output";
				output_2.style.css({
					"color" : "#0CA44E"
				});
				container.addChild(output_2, {
					"top": "178px",
					"left": "0px",
					"width": "116px",
					"height": "27px"
				});
				
				var output_3 = new cpr.controls.Output("star");
				output_3.value = "Output";
				output_3.style.css({
					"color" : "#0CA44E",
					"font-weight" : "bold",
					"font-size" : "14px"
				});
				container.addChild(output_3, {
					"top": "204px",
					"left": "57px",
					"width": "34px",
					"height": "24px"
				});
				
				var output_4 = new cpr.controls.Output();
				output_4.value = "조회수";
				container.addChild(output_4, {
					"top": "204px",
					"left": "90px",
					"width": "50px",
					"height": "27px"
				});
				
				var output_5 = new cpr.controls.Output("hits");
				output_5.value = "Output";
				output_5.style.css({
					"color" : "#0CA44E"
				});
				container.addChild(output_5, {
					"top": "204px",
					"left": "141px",
					"width": "50px",
					"height": "27px"
				});
				
				var image_2 = new cpr.controls.Image();
				image_2.src = "theme/images/mealkit/free-icon-star-6063500.png";
				container.addChild(image_2, {
					"top": "206px",
					"left": "0px",
					"width": "27px",
					"height": "23px"
				});
				
				var group_1 = new cpr.controls.Container();
				group_1.style.css({
					"background-color" : "#f9f9f9"
				});
				var xYLayout_2 = new cpr.controls.layouts.XYLayout();
				group_1.setLayout(xYLayout_2);
				container.addChild(group_1, {
					"top": "241px",
					"left": "0px",
					"width": "230px",
					"height": "5px"
				});
				
				var output_6 = new cpr.controls.Output("count");
				output_6.value = "Output";
				container.addChild(output_6, {
					"top": "204px",
					"left": "26px",
					"width": "32px",
					"height": "24px"
				});
				if(typeof onBodyLoad == "function"){
					app.addEventListener("load", onBodyLoad);
				}
			}
		});
	internalApp.title = "mealkitList";
	
	// Type declaration for mealkitList
	cpr.utils.Util.ensurePackage("udc").mealkitList = function(id){
		cpr.controls.UDCBase.call(this, "udc.mealkitList", internalApp, id);
	};
	
	udc.mealkitList.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.mealkitList.prototype, "type", {
		get : function(){
			return "udc.mealkitList";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.mealkitList.prototype, "img", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("img");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("img", newValue, true);
		}
	});
	Object.defineProperty(udc.mealkitList.prototype, "title", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("title");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("title", newValue, true);
		}
	});
	Object.defineProperty(udc.mealkitList.prototype, "nick", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("nick");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("nick", newValue, true);
		}
	});
	Object.defineProperty(udc.mealkitList.prototype, "star", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("star");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("star", newValue, true);
		}
	});
	Object.defineProperty(udc.mealkitList.prototype, "hits", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("hits");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("hits", newValue, true);
		}
	});
	Object.defineProperty(udc.mealkitList.prototype, "count", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("count");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("count", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.mealkitList
/// start - udc.mealkitStarudc
/*
 * UDC Qualified Name: udc.mealkitStarudc
 * App URI: udc/mealkitStarudc
 * Source Location: udc/mealkitStarudc.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.4584), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/mealkitStarudc", { 
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * mealkitStarudc.js
				 * Created at 2023. 8. 24. 오전 11:25:11.
				 *
				 * @author shj22k
				 ************************************************/
	
				/**
				 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
				 */
				exports.getText = function(){
					// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
					return "";
				};
	
				/*
				 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
				 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
				 */
				function onBodyLoad(e){
					app.lookup("mealkitImg").src = app.getAppProperty("mealkitImg");
					app.lookup("mealkitName").text = app.getAppProperty("mealkitName");
					app.lookup("mealkitPrice").text = app.getAppProperty("mealkitPrice")+"원";
				}
	
				/*
				 * 이미지에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onMealkitImgClick(e){
					var mealkitImg = e.control;
					//imgClick
					var event = new cpr.events.CAppEvent("imgClick");
					app.dispatchEvent(event);
				};
				// End - User Script
				
				// Header
				app.declareAppProperty("mealkitImg", null);
				app.declareAppProperty("mealkitName", null);
				app.declareAppProperty("mealkitPrice", null);
				app.supportMedia("all and (min-width: 1024px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
				app.supportMedia("all and (max-width: 499px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.style.css({
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"left" : "0px"
				});
				
				// Layout
				var xYLayout_1 = new cpr.controls.layouts.XYLayout();
				container.setLayout(xYLayout_1);
				
				// UI Configuration
				var image_1 = new cpr.controls.Image("mealkitImg");
				image_1.style.css({
					"cursor" : "pointer"
				});
				if(typeof onMealkitImgClick == "function") {
					image_1.addEventListener("click", onMealkitImgClick);
				}
				container.addChild(image_1, {
					"top": "0px",
					"left": "0px",
					"width": "250px",
					"height": "200px"
				});
				
				var output_1 = new cpr.controls.Output("mealkitName");
				output_1.value = "Output";
				output_1.style.css({
					"font-weight" : "bold",
					"font-size" : "20px",
					"text-align" : "center"
				});
				container.addChild(output_1, {
					"top": "200px",
					"left": "0px",
					"width": "250px",
					"height": "30px"
				});
				
				var output_2 = new cpr.controls.Output("mealkitPrice");
				output_2.value = "Output";
				output_2.style.css({
					"color" : "#41913F",
					"font-weight" : "bold",
					"text-align" : "center"
				});
				container.addChild(output_2, {
					"top": "229px",
					"left": "0px",
					"width": "250px",
					"height": "20px"
				});
				if(typeof onBodyLoad == "function"){
					app.addEventListener("load", onBodyLoad);
				}
			}
		});
	internalApp.title = "mealkitStarudc";
	
	// Type declaration for mealkitStarudc
	cpr.utils.Util.ensurePackage("udc").mealkitStarudc = function(id){
		cpr.controls.UDCBase.call(this, "udc.mealkitStarudc", internalApp, id);
	};
	
	udc.mealkitStarudc.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.mealkitStarudc.prototype, "type", {
		get : function(){
			return "udc.mealkitStarudc";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.mealkitStarudc.prototype, "mealkitImg", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("mealkitImg");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("mealkitImg", newValue, true);
		}
	});
	Object.defineProperty(udc.mealkitStarudc.prototype, "mealkitName", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("mealkitName");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("mealkitName", newValue, true);
		}
	});
	Object.defineProperty(udc.mealkitStarudc.prototype, "mealkitPrice", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("mealkitPrice");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("mealkitPrice", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.mealkitStarudc
/// start - udc.recipeCommentudc
/*
 * UDC Qualified Name: udc.recipeCommentudc
 * App URI: udc/recipeCommentudc
 * Source Location: udc/recipeCommentudc.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.4584), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/recipeCommentudc", { 
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * recipeCommentudc.js
				 * Created at 2023. 8. 17. 오후 1:32:11.
				 *
				 * @author user
				 ************************************************/
	
				/**
				 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
				 */
				exports.getText = function(){
					// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
					return "";
				};
	
				/*
				 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
				 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
				 */
				function onBodyLoad(e){
					app.lookup("nick").text = app.getAppProperty("nick");
					app.lookup("regDate").text = app.getAppProperty("regDate");
					app.lookup("content").text = app.getAppProperty("content");
					app.lookup("deleteBtn").visible = app.getAppProperty("deleteBtn");
					app.lookup("profile").src = app.getAppProperty("profile");
				}
	
	
				/*
				 * "삭제" 버튼에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onButtonClick2(e){
					var button = e.control;
					var event = new cpr.events.CAppEvent("deleteClick");
					app.dispatchEvent(event);
				};
				// End - User Script
				
				// Header
				app.declareAppProperty("nick", null);
				app.declareAppProperty("regDate", null);
				app.declareAppProperty("content", null);
				app.declareAppProperty("deleteBtn", null);
				app.declareAppProperty("profile", null);
				app.supportMedia("all and (min-width: 1024px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
				app.supportMedia("all and (max-width: 499px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.style.css({
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"left" : "0px"
				});
				
				// Layout
				var xYLayout_1 = new cpr.controls.layouts.XYLayout();
				container.setLayout(xYLayout_1);
				
				// UI Configuration
				var output_1 = new cpr.controls.Output("nick");
				output_1.value = "Output";
				output_1.style.css({
					"color" : "#3C00FF",
					"font-weight" : "normal"
				});
				container.addChild(output_1, {
					"top": "3px",
					"left": "51px",
					"width": "73px",
					"height": "31px"
				});
				
				var output_2 = new cpr.controls.Output("content");
				output_2.value = "Output";
				container.addChild(output_2, {
					"top": "33px",
					"left": "3px",
					"width": "333px",
					"height": "35px"
				});
				
				var output_3 = new cpr.controls.Output("regDate");
				output_3.value = "Output";
				output_3.style.css({
					"color" : "#CBCBCB"
				});
				container.addChild(output_3, {
					"top": "9px",
					"left": "123px",
					"width": "143px",
					"height": "20px"
				});
				
				var button_1 = new cpr.controls.Button("deleteBtn");
				button_1.value = "삭제";
				button_1.style.css({
					"border-right-style" : "none",
					"background-color" : "transparent",
					"color" : "#CBCBCB",
					"border-left-style" : "none",
					"border-bottom-style" : "none",
					"background-image" : "none",
					"border-top-style" : "none"
				});
				if(typeof onButtonClick2 == "function") {
					button_1.addEventListener("click", onButtonClick2);
				}
				container.addChild(button_1, {
					"top": "9px",
					"left": "265px",
					"width": "38px",
					"height": "20px"
				});
				
				var image_1 = new cpr.controls.Image("profile");
				image_1.fallbackSrc = "theme/images/icon/chefimg.png";
				container.addChild(image_1, {
					"top": "3px",
					"left": "3px",
					"width": "38px",
					"height": "31px"
				});
				if(typeof onBodyLoad == "function"){
					app.addEventListener("load", onBodyLoad);
				}
			}
		});
	internalApp.title = "recipeCommentudc";
	
	// Type declaration for recipeCommentudc
	cpr.utils.Util.ensurePackage("udc").recipeCommentudc = function(id){
		cpr.controls.UDCBase.call(this, "udc.recipeCommentudc", internalApp, id);
	};
	
	udc.recipeCommentudc.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.recipeCommentudc.prototype, "type", {
		get : function(){
			return "udc.recipeCommentudc";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.recipeCommentudc.prototype, "nick", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("nick");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("nick", newValue, true);
		}
	});
	Object.defineProperty(udc.recipeCommentudc.prototype, "regDate", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("regDate");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("regDate", newValue, true);
		}
	});
	Object.defineProperty(udc.recipeCommentudc.prototype, "content", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("content");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("content", newValue, true);
		}
	});
	Object.defineProperty(udc.recipeCommentudc.prototype, "deleteBtn", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("deleteBtn");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("deleteBtn", newValue, true);
		}
	});
	Object.defineProperty(udc.recipeCommentudc.prototype, "profile", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("profile");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("profile", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.recipeCommentudc
/// start - udc.recipeLikeudc
/*
 * UDC Qualified Name: udc.recipeLikeudc
 * App URI: udc/recipeLikeudc
 * Source Location: udc/recipeLikeudc.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.4584), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/recipeLikeudc", { 
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * recipeLikeudc.js
				 * Created at 2023. 8. 21. 오후 4:05:24.
				 *
				 * @author user
				 ************************************************/
	
				/**
				 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
				 */
				exports.getText = function(){
					// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
					return "";
				};
	
				/*
				 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
				 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
				 */
				function onBodyLoad(e){
					app.lookup("img").src = app.getAppProperty("img");
					app.lookup("title").text = app.getAppProperty("title");
				}
	
				/*
				 * 이미지에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onImgClick(e){
					var img = e.control;
					var event = new cpr.events.CAppEvent("imgClick");
					app.dispatchEvent(event);
				};
				// End - User Script
				
				// Header
				app.declareAppProperty("img", null);
				app.declareAppProperty("title", null);
				app.supportMedia("all and (min-width: 1024px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
				app.supportMedia("all and (max-width: 499px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.style.css({
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"left" : "0px"
				});
				
				// Layout
				var xYLayout_1 = new cpr.controls.layouts.XYLayout();
				container.setLayout(xYLayout_1);
				
				// UI Configuration
				var image_1 = new cpr.controls.Image("img");
				image_1.style.css({
					"cursor" : "pointer",
					"border-radius" : "10px 10px 0px 0px"
				});
				if(typeof onImgClick == "function") {
					image_1.addEventListener("click", onImgClick);
				}
				container.addChild(image_1, {
					"top": "0px",
					"left": "0px",
					"width": "250px",
					"height": "200px"
				});
				
				var output_1 = new cpr.controls.Output("title");
				output_1.value = "Output";
				output_1.style.css({
					"border-radius" : "0px 0px 10px 10px",
					"font-weight" : "bold",
					"font-size" : "20px",
					"text-align" : "center"
				});
				container.addChild(output_1, {
					"top": "200px",
					"left": "0px",
					"width": "250px",
					"height": "50px"
				});
				if(typeof onBodyLoad == "function"){
					app.addEventListener("load", onBodyLoad);
				}
			}
		});
	internalApp.title = "recipeLikeudc";
	
	// Type declaration for recipeLikeudc
	cpr.utils.Util.ensurePackage("udc").recipeLikeudc = function(id){
		cpr.controls.UDCBase.call(this, "udc.recipeLikeudc", internalApp, id);
	};
	
	udc.recipeLikeudc.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.recipeLikeudc.prototype, "type", {
		get : function(){
			return "udc.recipeLikeudc";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.recipeLikeudc.prototype, "img", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("img");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("img", newValue, true);
		}
	});
	Object.defineProperty(udc.recipeLikeudc.prototype, "title", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("title");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("title", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.recipeLikeudc
/// start - udc.recipeListudc
/*
 * UDC Qualified Name: udc.recipeListudc
 * App URI: udc/recipeListudc
 * Source Location: udc/recipeListudc.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.4584), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/recipeListudc", { 
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * recipeListudc.js
				 * Created at 2023. 8. 9. 오후 2:45:00.
				 *
				 * @author user
				 ************************************************/
	
				/**
				 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
				 */
				exports.getText = function(){
					// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
					return "";
				};
	
				/*
				 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
				 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
				 */
				function onBodyLoad(e){
					app.lookup("img").src = app.getAppProperty("img");
					app.lookup("title").text = app.getAppProperty("title");
					app.lookup("nick").text = app.getAppProperty("nick");
					app.lookup("like").text = app.getAppProperty("like");
					app.lookup("hits").text = app.getAppProperty("hits");
					app.lookup("profile").src = app.getAppProperty("profile");
				}
	
				/*
				 * 이미지에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onImgClick(e){
					var img = e.control;
					var event = new cpr.events.CAppEvent("imgClick");
					app.dispatchEvent(event);
				};
				// End - User Script
				
				// Header
				app.declareAppProperty("img", null);
				app.declareAppProperty("title", null);
				app.declareAppProperty("nick", null);
				app.declareAppProperty("like", null);
				app.declareAppProperty("hits", null);
				app.declareAppProperty("profile", null);
				app.supportMedia("all and (min-width: 1024px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
				app.supportMedia("all and (max-width: 499px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.style.css({
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"left" : "0px"
				});
				
				// Layout
				var xYLayout_1 = new cpr.controls.layouts.XYLayout();
				container.setLayout(xYLayout_1);
				
				// UI Configuration
				var group_1 = new cpr.controls.Container();
				group_1.style.css({
					"background-color" : "#FFFFFF"
				});
				var xYLayout_2 = new cpr.controls.layouts.XYLayout();
				group_1.setLayout(xYLayout_2);
				(function(container){
					var image_1 = new cpr.controls.Image("img");
					image_1.style.css({
						"cursor" : "pointer"
					});
					if(typeof onImgItemClick2 == "function") {
						image_1.addEventListener("item-click", onImgItemClick2);
					}
					if(typeof onImgClick == "function") {
						image_1.addEventListener("click", onImgClick);
					}
					container.addChild(image_1, {
						"top": "2px",
						"left": "0px",
						"width": "294px",
						"height": "140px"
					});
					var output_1 = new cpr.controls.Output("title");
					output_1.value = "Output";
					output_1.style.css({
						"font-weight" : "bold"
					});
					container.addChild(output_1, {
						"top": "141px",
						"left": "0px",
						"width": "294px",
						"height": "41px"
					});
					var output_2 = new cpr.controls.Output("nick");
					output_2.value = "Output";
					output_2.style.css({
						"color" : "#0CA44E"
					});
					container.addChild(output_2, {
						"top": "181px",
						"left": "44px",
						"width": "116px",
						"height": "27px"
					});
					var output_3 = new cpr.controls.Output("like");
					output_3.value = "Output";
					output_3.style.css({
						"color" : "#0CA44E"
					});
					container.addChild(output_3, {
						"top": "211px",
						"left": "28px",
						"width": "39px",
						"height": "27px"
					});
					var output_4 = new cpr.controls.Output();
					output_4.value = "조회수";
					container.addChild(output_4, {
						"top": "211px",
						"left": "66px",
						"width": "50px",
						"height": "27px"
					});
					var output_5 = new cpr.controls.Output("hits");
					output_5.value = "Output";
					output_5.style.css({
						"color" : "#0CA44E"
					});
					container.addChild(output_5, {
						"top": "211px",
						"left": "115px",
						"width": "50px",
						"height": "27px"
					});
					var image_2 = new cpr.controls.Image();
					image_2.src = "theme/images/recipe/heartcolor.png";
					container.addChild(image_2, {
						"top": "212px",
						"left": "0px",
						"width": "29px",
						"height": "25px"
					});
					var image_3 = new cpr.controls.Image("profile");
					image_3.fallbackSrc = "theme/images/icon/chefimg.png";
					container.addChild(image_3, {
						"top": "181px",
						"left": "0px",
						"width": "37px",
						"height": "32px"
					});
				})(group_1);
				container.addChild(group_1, {
					"top": "0px",
					"left": "0px",
					"width": "295px",
					"height": "240px"
				});
				if(typeof onBodyLoad == "function"){
					app.addEventListener("load", onBodyLoad);
				}
			}
		});
	internalApp.title = "recipeListudc";
	
	// Type declaration for recipeListudc
	cpr.utils.Util.ensurePackage("udc").recipeListudc = function(id){
		cpr.controls.UDCBase.call(this, "udc.recipeListudc", internalApp, id);
	};
	
	udc.recipeListudc.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.recipeListudc.prototype, "type", {
		get : function(){
			return "udc.recipeListudc";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.recipeListudc.prototype, "img", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("img");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("img", newValue, true);
		}
	});
	Object.defineProperty(udc.recipeListudc.prototype, "title", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("title");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("title", newValue, true);
		}
	});
	Object.defineProperty(udc.recipeListudc.prototype, "nick", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("nick");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("nick", newValue, true);
		}
	});
	Object.defineProperty(udc.recipeListudc.prototype, "like", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("like");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("like", newValue, true);
		}
	});
	Object.defineProperty(udc.recipeListudc.prototype, "hits", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("hits");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("hits", newValue, true);
		}
	});
	Object.defineProperty(udc.recipeListudc.prototype, "profile", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("profile");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("profile", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.recipeListudc
