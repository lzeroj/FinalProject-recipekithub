/// start - udc.header
/*
 * UDC Qualified Name: udc.header
 * App URI: udc/header
 * Source Location: udc/header.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.4584), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/header", { 
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * header.js
				 * Created at 2023. 8. 8. 오후 3:17:56.
				 *
				 * @author shj22k
				 ************************************************/
	
				/**
				 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
				 */
				exports.getText = function(){
					// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
					return "";
				};
	
				/*
				 * 버튼에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onButtonClick(e){
					var button = e.control;
					window.location.href="/findMyCartForm";
				}
	
				/*
				 * 버튼(mypage)에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onMypageClick(e){
					var mypage = e.control;
					window.location.href="/findMyPageForm";
				};
				// End - User Script
				
				// Header
				app.declareAppProperty("cartbtn", null);
				app.supportMedia("all and (min-width: 1024px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
				app.supportMedia("all and (max-width: 499px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.style.css({
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"left" : "0px"
				});
				
				// Layout
				var xYLayout_1 = new cpr.controls.layouts.XYLayout();
				container.setLayout(xYLayout_1);
				
				// UI Configuration
				var group_1 = new cpr.controls.Container();
				group_1.style.css({
					"background-color" : "rgb(173, 255, 47)",
					"font-family" : "'맑은 고딕' , 'Malgun Gothic' , sans-serif"
				});
				var formLayout_1 = new cpr.controls.layouts.FormLayout();
				formLayout_1.scrollable = false;
				formLayout_1.topMargin = "5px";
				formLayout_1.rightMargin = "5px";
				formLayout_1.bottomMargin = "5px";
				formLayout_1.leftMargin = "5px";
				formLayout_1.horizontalSpacing = "10px";
				formLayout_1.verticalSpacing = "10px";
				formLayout_1.setColumns(["150px", "1fr", "150px", "1fr", "150px", "1fr", "150px", "1fr", "150px"]);
				formLayout_1.setRows(["1fr"]);
				group_1.setLayout(formLayout_1);
				(function(container){
					var button_1 = new cpr.controls.Button();
					button_1.value = "추천";
					button_1.style.setClasses([".cl-button", "main"]);
					button_1.style.css({
						"border-right-style" : "none",
						"background-color" : "transparent",
						"border-left-style" : "none",
						"font-size" : "20px",
						"border-bottom-style" : "none",
						"font-family" : "'맑은 고딕' , 'Malgun Gothic' , sans-serif",
						"background-image" : "none",
						"border-top-style" : "none"
					});
					container.addChild(button_1, {
						"colIndex": 1,
						"rowIndex": 0
					});
					var button_2 = new cpr.controls.Button();
					button_2.value = "레시피";
					button_2.style.setClasses([".cl-button", "main"]);
					button_2.style.css({
						"border-right-style" : "none",
						"background-color" : "transparent",
						"border-left-style" : "none",
						"font-size" : "20px",
						"border-bottom-style" : "none",
						"background-image" : "none",
						"border-top-style" : "none"
					});
					container.addChild(button_2, {
						"colIndex": 3,
						"rowIndex": 0
					});
					var button_3 = new cpr.controls.Button();
					button_3.value = "밀키트";
					button_3.style.setClasses([".cl-button", "main"]);
					button_3.style.css({
						"border-right-style" : "none",
						"background-color" : "transparent",
						"border-left-style" : "none",
						"font-size" : "20px",
						"border-bottom-style" : "none",
						"background-image" : "none",
						"border-top-style" : "none"
					});
					container.addChild(button_3, {
						"colIndex": 5,
						"rowIndex": 0
					});
					var button_4 = new cpr.controls.Button();
					button_4.value = "공모전";
					button_4.style.setClasses([".cl-button", "main"]);
					button_4.style.css({
						"border-right-style" : "none",
						"background-color" : "transparent",
						"border-left-style" : "none",
						"font-size" : "20px",
						"border-bottom-style" : "none",
						"background-image" : "none",
						"border-top-style" : "none"
					});
					container.addChild(button_4, {
						"colIndex": 7,
						"rowIndex": 0
					});
				})(group_1);
				container.addChild(group_1, {
					"top": "140px",
					"right": "0px",
					"left": "0px",
					"height": "53px"
				});
				
				var group_2 = new cpr.controls.Container();
				var xYLayout_2 = new cpr.controls.layouts.XYLayout();
				group_2.setLayout(xYLayout_2);
				(function(container){
					var group_3 = new cpr.controls.Container();
					var xYLayout_3 = new cpr.controls.layouts.XYLayout();
					group_3.setLayout(xYLayout_3);
					(function(container){
						var image_1 = new cpr.controls.Image();
						image_1.src = "udc/theme/images/logo.png";
						container.addChild(image_1, {
							"top": "0px",
							"left": "0px",
							"width": "200px",
							"height": "90px"
						});
						var searchInput_1 = new cpr.controls.SearchInput();
						searchInput_1.style.css({
							"border-bottom-color" : "rgb(173,255,47)",
							"border-left-color" : "rgb(173,255,47)",
							"border-top-color" : "rgb(173,255,47)",
							"border-right-color" : "rgb(173,255,47)",
							"background-origin" : "border-box"
						});
						searchInput_1.style.search.css({
							"background-size" : "contain",
							"width" : "2em"
						});
						searchInput_1.style.clear.css({
							"width" : "2em"
						});
						container.addChild(searchInput_1, {
							"top": "20px",
							"left": "286px",
							"width": "370px",
							"height": "50px"
						});
						var button_5 = new cpr.controls.Button("mypage");
						button_5.value = "";
						button_5.style.setClasses(["login"]);
						button_5.style.css({
							"border-right-style" : "none",
							"background-size" : "cover",
							"border-left-style" : "none",
							"border-bottom-style" : "none",
							"background-image" : "url('udc/theme/images/recipe/login.png')",
							"border-top-style" : "none"
						});
						if(typeof onMypageClick == "function") {
							button_5.addEventListener("click", onMypageClick);
						}
						container.addChild(button_5, {
							"top": "20px",
							"left": "686px",
							"width": "56px",
							"height": "50px"
						});
						var button_6 = new cpr.controls.Button("cartbtn");
						button_6.value = "";
						button_6.style.setClasses(["recipe"]);
						button_6.style.css({
							"border-right-style" : "none",
							"background-size" : "cover",
							"border-left-style" : "none",
							"border-bottom-style" : "none",
							"background-image" : "url('udc/theme/images/recipe/reciperegister.png')",
							"border-top-style" : "none"
						});
						if(typeof onButtonClick == "function") {
							button_6.addEventListener("click", onButtonClick);
						}
						container.addChild(button_6, {
							"top": "20px",
							"left": "778px",
							"width": "56px",
							"height": "50px"
						});
						var linkedComboBox_1 = new cpr.controls.LinkedComboBox("lcb1");
						linkedComboBox_1.placeholders = ["종류"];
						linkedComboBox_1.style.css({
							"border-bottom-color" : "rgb(173,255,47)",
							"border-left-color" : "rgb(173,255,47)",
							"border-top-color" : "rgb(173,255,47)",
							"border-right-color" : "rgb(173,255,47)"
						});
						(function(linkedComboBox_1){
							linkedComboBox_1.addItem(new cpr.controls.TreeItem("레시피", "recipe", null));
							linkedComboBox_1.addItem(new cpr.controls.TreeItem("밀키트", "mealkit", null));
						})(linkedComboBox_1);
						container.addChild(linkedComboBox_1, {
							"top": "20px",
							"left": "221px",
							"width": "66px",
							"height": "50px"
						});
					})(group_3);
					container.addChild(group_3, {
						"top": "10px",
						"width": "897px",
						"height": "90px",
						"left": "calc(50% - 448px)"
					});
				})(group_2);
				container.addChild(group_2, {
					"top": "20px",
					"width": "1024px",
					"height": "120px",
					"left": "calc(50% - 512px)"
				});
			}
		});
	internalApp.title = "header";
	
	// Type declaration for header
	cpr.utils.Util.ensurePackage("udc").header = function(id){
		cpr.controls.UDCBase.call(this, "udc.header", internalApp, id);
	};
	
	udc.header.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.header.prototype, "type", {
		get : function(){
			return "udc.header";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.header.prototype, "cartbtn", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("cartbtn");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("cartbtn", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.header
/// start - udc.imgButton
/*
 * UDC Qualified Name: udc.imgButton
 * App URI: udc/imgButton
 * Source Location: udc/imgButton.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.4584), Don't edit manually.
 */
(function(){
	// App Declaration
		var internalApp = new cpr.core.App("udc/imgButton", { 
			onPrepare: function(loader) {
			},
			onCreate: function(/* cpr.core.AppInstance */ app, exports) {
				var linker = {};
				// Start - User Script
				/************************************************
				 * imgButton.js
				 * Created at 2022. 5. 30. 오후 5:02:20.
				 *
				 * @author techdom
				 ************************************************/
	
				/**
				 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
				 */
				exports.getText = function(){
					// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
					return "";
				};
	
				/*
				 * "삭제" 버튼에서 click 이벤트 발생 시 호출.
				 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
				 */
				function onButtonClick(e){
					var button = e.control;
					
					//[삭제] 버튼 클릭시 이미지를 삭제하는 이벤트 출판
					var event = new cpr.events.CUIEvent("deleteImg");
					app.dispatchEvent(event);
				}
	
				/*
				 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
				 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
				 */
				function onBodyLoad(e){
					//출판한 [이미지 경로] 앱 속성을 이미지의 경로로 지정
					app.lookup("img1").src = app.getAppProperty("src");
				};
				// End - User Script
				
				// Header
				app.declareAppProperty("src", null);
				app.supportMedia("all and (min-width: 1024px)", "default");
				app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
				app.supportMedia("all and (max-width: 499px)", "mobile");
				
				// Configure root container
				var container = app.getContainer();
				container.style.css({
					"width" : "100%",
					"top" : "0px",
					"height" : "100%",
					"left" : "0px"
				});
				
				// Layout
				var xYLayout_1 = new cpr.controls.layouts.XYLayout();
				container.setLayout(xYLayout_1);
				
				// UI Configuration
				var image_1 = new cpr.controls.Image("img1");
				container.addChild(image_1, {
					"top": "0px",
					"left": "0px",
					"width": "300px",
					"height": "300px"
				});
				
				var button_1 = new cpr.controls.Button("btn1");
				button_1.value = "삭제";
				if(typeof onButtonClick == "function") {
					button_1.addEventListener("click", onButtonClick);
				}
				container.addChild(button_1, {
					"top": "10px",
					"left": "250px",
					"width": "40px",
					"height": "40px"
				});
				if(typeof onBodyLoad == "function"){
					app.addEventListener("load", onBodyLoad);
				}
			}
		});
	internalApp.title = "imgButton";
	
	// Type declaration for imgButton
	cpr.utils.Util.ensurePackage("udc").imgButton = function(id){
		cpr.controls.UDCBase.call(this, "udc.imgButton", internalApp, id);
	};
	
	udc.imgButton.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.imgButton.prototype, "type", {
		get : function(){
			return "udc.imgButton";
		},
		
		configurable: true
	});
	
	// App Properties
	Object.defineProperty(udc.imgButton.prototype, "src", {
		get: function(){
			return this.getEmbeddedAppInstance().getAppProperty("src");
		},
		set: function(newValue){
			return this.getEmbeddedAppInstance().setAppProperty("src", newValue, true);
		}
	});
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.imgButton
